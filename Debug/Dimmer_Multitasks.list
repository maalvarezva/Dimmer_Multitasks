
Dimmer_Multitasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac8  08007ac8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a78  20000010  08007ae0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a88  08007ae0  00021a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc18  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003518  00000000  00000000  0003cc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  00040170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a0  00000000  00000000  00041898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000374d  00000000  00000000  00042e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000120af  00000000  00000000  00046585  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc0db  00000000  00000000  00058634  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015470f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f4  00000000  00000000  0015478c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800797c 	.word	0x0800797c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800797c 	.word	0x0800797c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	if ( fsm_button.state == WAITING ) {
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d107      	bne.n	80004f2 <HAL_GPIO_EXTI_Callback+0x22>
		fsm_button.event = BUTTON_ON;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	705a      	strb	r2, [r3, #1]
		fsm_button.new_event = TRUE;
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004ea:	78d3      	ldrb	r3, [r2, #3]
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	70d3      	strb	r3, [r2, #3]
	}
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20001930 	.word	0x20001930

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_led_struct(&led2);
 8000508:	481c      	ldr	r0, [pc, #112]	; (800057c <main+0x78>)
 800050a:	f000 fa15 	bl	8000938 <init_led_struct>
  init_fsm(&fsm_button);
 800050e:	481c      	ldr	r0, [pc, #112]	; (8000580 <main+0x7c>)
 8000510:	f000 fa26 	bl	8000960 <init_fsm>
  init_fsmd (&fsm_dimmer);
 8000514:	481b      	ldr	r0, [pc, #108]	; (8000584 <main+0x80>)
 8000516:	f000 fa40 	bl	800099a <init_fsmd>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fdef 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f847 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9af 	bl	8000884 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000526:	f000 f8b9 	bl	800069c <MX_TIM2_Init>
  MX_TIM3_Init();
 800052a:	f000 f92d 	bl	8000788 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800052e:	f000 f979 	bl	8000824 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 //HAL_TIM_Base_Start_IT(&htim2);
 HAL_TIM_Base_Start_IT(&htim3);
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <main+0x84>)
 8000534:	f002 fc98 	bl	8002e68 <HAL_TIM_Base_Start_IT>
 HAL_UART_Transmit(&huart2, (uint8_t *)"Initializing fsm...\n", sizeof("Initializing fsm...\n")-1, 100);
 8000538:	2364      	movs	r3, #100	; 0x64
 800053a:	2214      	movs	r2, #20
 800053c:	4913      	ldr	r1, [pc, #76]	; (800058c <main+0x88>)
 800053e:	4814      	ldr	r0, [pc, #80]	; (8000590 <main+0x8c>)
 8000540:	f003 fd88 	bl	8004054 <HAL_UART_Transmit>
 print_current_state(&fsm_button);
 8000544:	480e      	ldr	r0, [pc, #56]	; (8000580 <main+0x7c>)
 8000546:	f000 fb5d 	bl	8000c04 <print_current_state>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054a:	f004 fca5 	bl	8004e98 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800054e:	2100      	movs	r1, #0
 8000550:	4810      	ldr	r0, [pc, #64]	; (8000594 <main+0x90>)
 8000552:	f002 fce9 	bl	8002f28 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Push_Button_fsm */
  Push_Button_fsmHandle = osThreadNew(StartPush_Button_fsm, NULL, &Push_Button_fsm_attributes);
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <main+0x94>)
 8000558:	2100      	movs	r1, #0
 800055a:	4810      	ldr	r0, [pc, #64]	; (800059c <main+0x98>)
 800055c:	f004 fd06 	bl	8004f6c <osThreadNew>
 8000560:	4602      	mov	r2, r0
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x9c>)
 8000564:	601a      	str	r2, [r3, #0]

  /* creation of Led2_Fsm_Task */
  Led2_Fsm_TaskHandle = osThreadNew(StartLed2_Fsm_Tak, NULL, &Led2_Fsm_Task_attributes);
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <main+0xa0>)
 8000568:	2100      	movs	r1, #0
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0xa4>)
 800056c:	f004 fcfe 	bl	8004f6c <osThreadNew>
 8000570:	4602      	mov	r2, r0
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0xa8>)
 8000574:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000576:	f004 fcc3 	bl	8004f00 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint8_t duty;
  while (1)
 800057a:	e7fe      	b.n	800057a <main+0x76>
 800057c:	200019fc 	.word	0x200019fc
 8000580:	20001930 	.word	0x20001930
 8000584:	20001974 	.word	0x20001974
 8000588:	200018f0 	.word	0x200018f0
 800058c:	080079b4 	.word	0x080079b4
 8000590:	20001978 	.word	0x20001978
 8000594:	20001934 	.word	0x20001934
 8000598:	08007a30 	.word	0x08007a30
 800059c:	08000c95 	.word	0x08000c95
 80005a0:	200018ec 	.word	0x200018ec
 80005a4:	08007a54 	.word	0x08007a54
 80005a8:	08000cb1 	.word	0x08000cb1
 80005ac:	200019f8 	.word	0x200019f8

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0b8      	sub	sp, #224	; 0xe0
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 f9d3 	bl	800796a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2288      	movs	r2, #136	; 0x88
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 f9c5 	bl	800796a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005e0:	f001 f8c6 	bl	8001770 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <SystemClock_Config+0xe8>)
 80005e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ea:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <SystemClock_Config+0xe8>)
 80005ec:	f023 0318 	bic.w	r3, r3, #24
 80005f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f4:	2314      	movs	r3, #20
 80005f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f91b 	bl	8001858 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000628:	f000 fb8c 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fce7 	bl	8002024 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800065c:	f000 fb72 	bl	8000d44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000660:	2302      	movs	r3, #2
 8000662:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4618      	mov	r0, r3
 800066c:	f001 ff10 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000676:	f000 fb65 	bl	8000d44 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067e:	f001 f895 	bl	80017ac <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000688:	f000 fb5c 	bl	8000d44 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068c:	f002 f9e6 	bl	8002a5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000690:	bf00      	nop
 8000692:	37e0      	adds	r7, #224	; 0xe0
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08e      	sub	sp, #56	; 0x38
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006d8:	2210      	movs	r2, #16
 80006da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006e4:	2264      	movs	r2, #100	; 0x64
 80006e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f4:	4823      	ldr	r0, [pc, #140]	; (8000784 <MX_TIM2_Init+0xe8>)
 80006f6:	f002 fb8b 	bl	8002e10 <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000700:	f000 fb20 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	4619      	mov	r1, r3
 8000710:	481c      	ldr	r0, [pc, #112]	; (8000784 <MX_TIM2_Init+0xe8>)
 8000712:	f002 fe99 	bl	8003448 <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800071c:	f000 fb12 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <MX_TIM2_Init+0xe8>)
 8000722:	f002 fbcb 	bl	8002ebc <HAL_TIM_PWM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800072c:	f000 fb0a 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_TIM2_Init+0xe8>)
 8000740:	f003 fb94 	bl	8003e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800074a:	f000 fafb 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074e:	2360      	movs	r3, #96	; 0x60
 8000750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <MX_TIM2_Init+0xe8>)
 8000766:	f002 fd57 	bl	8003218 <HAL_TIM_PWM_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000770:	f000 fae8 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <MX_TIM2_Init+0xe8>)
 8000776:	f000 fb4d 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 800077a:	bf00      	nop
 800077c:	3738      	adds	r7, #56	; 0x38
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20001934 	.word	0x20001934

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_TIM3_Init+0x94>)
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <MX_TIM3_Init+0x98>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_TIM3_Init+0x94>)
 80007ae:	2210      	movs	r2, #16
 80007b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_TIM3_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_TIM3_Init+0x94>)
 80007ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_TIM3_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_TIM3_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_TIM3_Init+0x94>)
 80007ce:	f002 fb1f 	bl	8002e10 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007d8:	f000 fab4 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_TIM3_Init+0x94>)
 80007ea:	f002 fe2d 	bl	8003448 <HAL_TIM_ConfigClockSource>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007f4:	f000 faa6 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_TIM3_Init+0x94>)
 8000806:	f003 fb31 	bl	8003e6c <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 fa98 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200018f0 	.word	0x200018f0
 8000820:	40000400 	.word	0x40000400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART2_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x58>)
 8000868:	f003 fba6 	bl	8003fb8 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 fa67 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20001978 	.word	0x20001978
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xa8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_GPIO_Init+0xa8>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_GPIO_Init+0xa8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_GPIO_Init+0xa8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a1d      	ldr	r2, [pc, #116]	; (800092c <MX_GPIO_Init+0xa8>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_GPIO_Init+0xa8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_GPIO_Init+0xa8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xa8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xa8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_GPIO_Init+0xa8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <MX_GPIO_Init+0xa8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0xa8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_GPIO_Init+0xac>)
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_GPIO_Init+0xb0>)
 8000910:	f000 fd56 	bl	80013c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2105      	movs	r1, #5
 8000918:	2028      	movs	r0, #40	; 0x28
 800091a:	f000 fce5 	bl	80012e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800091e:	2028      	movs	r0, #40	; 0x28
 8000920:	f000 fcfe 	bl	8001320 <HAL_NVIC_EnableIRQ>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	10210000 	.word	0x10210000
 8000934:	48000800 	.word	0x48000800

08000938 <init_led_struct>:

/* USER CODE BEGIN 4 */
void init_led_struct ( led_t *led ) {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	led->counter = 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	805a      	strh	r2, [r3, #2]
	led->period = PERIOD;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094c:	801a      	strh	r2, [r3, #0]
	led->start = 0;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <init_fsm>:

void init_fsm ( fsm_t *sm ) {  //init states machine debounce
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	sm->state = WAITING;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
	sm->event = NON_EVENT;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	705a      	strb	r2, [r3, #1]
	sm->new_event = FALSE;
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	78d3      	ldrb	r3, [r2, #3]
 8000978:	f36f 0300 	bfc	r3, #0, #1
 800097c:	70d3      	strb	r3, [r2, #3]
	sm->counter = 0;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	709a      	strb	r2, [r3, #2]
	sm->start_countdown = 0;
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	78d3      	ldrb	r3, [r2, #3]
 8000988:	f36f 0341 	bfc	r3, #1, #1
 800098c:	70d3      	strb	r3, [r2, #3]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <init_fsmd>:

void init_fsmd ( fsm_d *fsm ) { //init states machine Dimmer
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	fsm->state = OFF;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
	fsm->event = Non_EVENT;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	705a      	strb	r2, [r3, #1]
	fsm->new_event = FALSE;
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	78d3      	ldrb	r3, [r2, #3]
 80009b2:	f36f 0300 	bfc	r3, #0, #1
 80009b6:	70d3      	strb	r3, [r2, #3]
	fsm-> count_Dimm=0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	709a      	strb	r2, [r3, #2]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <run_fsm>:

void run_fsm ( fsm_t *sm ) {    //machine states debounce
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if (sm->new_event == TRUE) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	78db      	ldrb	r3, [r3, #3]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 808f 	beq.w	8000b02 <run_fsm+0x136>
		sm->new_event = FALSE;
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	78d3      	ldrb	r3, [r2, #3]
 80009e8:	f36f 0300 	bfc	r3, #0, #1
 80009ec:	70d3      	strb	r3, [r2, #3]
		switch (sm->state) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d87b      	bhi.n	8000aee <run_fsm+0x122>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <run_fsm+0x30>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a0d 	.word	0x08000a0d
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a65 	.word	0x08000a65
 8000a08:	08000aa7 	.word	0x08000aa7
		case WAITING:
			print_current_state(sm);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f8f9 	bl	8000c04 <print_current_state>
			if ( sm->event == BUTTON_ON ) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d175      	bne.n	8000b06 <run_fsm+0x13a>
				sm->start_countdown = TRUE; /* init countdown of timer ISR */
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	78d3      	ldrb	r3, [r2, #3]
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	70d3      	strb	r3, [r2, #3]
				sm->state = DETECTED; /* next state of fsm */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a2a:	e06c      	b.n	8000b06 <run_fsm+0x13a>
		case DETECTED:
			print_current_state(sm);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f8e9 	bl	8000c04 <print_current_state>
			if ( sm->event == TICK_TIMEOUT ) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d167      	bne.n	8000b0a <run_fsm+0x13e>
				if (button_pressed(B1_GPIO_Port, B1_Pin)) {
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	4837      	ldr	r0, [pc, #220]	; (8000b1c <run_fsm+0x150>)
 8000a40:	f000 f8c8 	bl	8000bd4 <button_pressed>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d008      	beq.n	8000a5c <run_fsm+0x90>
					sm->state = WAIT_RELEASE; /* next state */
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	701a      	strb	r2, [r3, #0]
					sm->start_countdown = TRUE;
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	78d3      	ldrb	r3, [r2, #3]
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	70d3      	strb	r3, [r2, #3]
				} else {
					sm->state = WAITING;
				}
			}
			break;
 8000a5a:	e056      	b.n	8000b0a <run_fsm+0x13e>
					sm->state = WAITING;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
			break;
 8000a62:	e052      	b.n	8000b0a <run_fsm+0x13e>
		case WAIT_RELEASE:
			print_current_state(sm);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f8cd 	bl	8000c04 <print_current_state>
			if ( sm->event == TICK_TIMEOUT ) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	785b      	ldrb	r3, [r3, #1]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d14d      	bne.n	8000b0e <run_fsm+0x142>
				if (!button_pressed(B1_GPIO_Port, B1_Pin)) {
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <run_fsm+0x150>)
 8000a78:	f000 f8ac 	bl	8000bd4 <button_pressed>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d108      	bne.n	8000a94 <run_fsm+0xc8>
					sm->state = UPDATE;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	701a      	strb	r2, [r3, #0]
					sm->start_countdown = TRUE;
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	78d3      	ldrb	r3, [r2, #3]
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	70d3      	strb	r3, [r2, #3]
				} else {
					sm->state = WAIT_RELEASE;
					sm->start_countdown = TRUE;
				}
			}
			break;
 8000a92:	e03c      	b.n	8000b0e <run_fsm+0x142>
					sm->state = WAIT_RELEASE;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	701a      	strb	r2, [r3, #0]
					sm->start_countdown = TRUE;
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	78d3      	ldrb	r3, [r2, #3]
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	70d3      	strb	r3, [r2, #3]
			break;
 8000aa4:	e033      	b.n	8000b0e <run_fsm+0x142>
		case UPDATE:
			print_current_state(sm);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f8ac 	bl	8000c04 <print_current_state>
			if ( sm->event == TICK_TIMEOUT ) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d12e      	bne.n	8000b12 <run_fsm+0x146>
				sm->state = WAITING;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
				sm->event = NON_EVENT;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	705a      	strb	r2, [r3, #1]
				sm->new_event = FALSE;
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	78d3      	ldrb	r3, [r2, #3]
 8000ac4:	f36f 0300 	bfc	r3, #0, #1
 8000ac8:	70d3      	strb	r3, [r2, #3]
				print_current_state(sm);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f89a 	bl	8000c04 <print_current_state>
				//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
				//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 15);
				fsm_dimmer.new_event = TRUE;
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <run_fsm+0x154>)
 8000ad2:	78d3      	ldrb	r3, [r2, #3]
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	70d3      	strb	r3, [r2, #3]
				fsm_dimmer.event=PUSH_BOTTON;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <run_fsm+0x154>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	705a      	strb	r2, [r3, #1]
				fsm_dimmer.count_Dimm++;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <run_fsm+0x154>)
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <run_fsm+0x154>)
 8000aea:	709a      	strb	r2, [r3, #2]

			}
			break;
 8000aec:	e011      	b.n	8000b12 <run_fsm+0x146>
		default:
			print_current_state(sm);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f888 	bl	8000c04 <print_current_state>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown State", sizeof("Unknown State"), 100);
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	220e      	movs	r2, #14
 8000af8:	490a      	ldr	r1, [pc, #40]	; (8000b24 <run_fsm+0x158>)
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <run_fsm+0x15c>)
 8000afc:	f003 faaa 	bl	8004054 <HAL_UART_Transmit>
			while (1);
 8000b00:	e7fe      	b.n	8000b00 <run_fsm+0x134>
			break;
		}
	}
 8000b02:	bf00      	nop
 8000b04:	e006      	b.n	8000b14 <run_fsm+0x148>
			break;
 8000b06:	bf00      	nop
 8000b08:	e004      	b.n	8000b14 <run_fsm+0x148>
			break;
 8000b0a:	bf00      	nop
 8000b0c:	e002      	b.n	8000b14 <run_fsm+0x148>
			break;
 8000b0e:	bf00      	nop
 8000b10:	e000      	b.n	8000b14 <run_fsm+0x148>
			break;
 8000b12:	bf00      	nop
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	20001974 	.word	0x20001974
 8000b24:	080079cc 	.word	0x080079cc
 8000b28:	20001978 	.word	0x20001978

08000b2c <run_dimmer_fsm>:

void run_dimmer_fsm(fsm_d *fsm){  //machine states Dimmer
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if(fsm->new_event==TRUE){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	78db      	ldrb	r3, [r3, #3]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d03b      	beq.n	8000bba <run_dimmer_fsm+0x8e>
		fsm->new_event=FALSE;
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	78d3      	ldrb	r3, [r2, #3]
 8000b46:	f36f 0300 	bfc	r3, #0, #1
 8000b4a:	70d3      	strb	r3, [r2, #3]

	switch(fsm->state){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d011      	beq.n	8000b78 <run_dimmer_fsm+0x4c>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d002      	beq.n	8000b5e <run_dimmer_fsm+0x32>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d01a      	beq.n	8000b92 <run_dimmer_fsm+0x66>
 8000b5c:	e029      	b.n	8000bb2 <run_dimmer_fsm+0x86>
	case OFF:

		if(fsm->event==PUSH_BOTTON &&fsm->count_Dimm==1 ){
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d12b      	bne.n	8000bbe <run_dimmer_fsm+0x92>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d127      	bne.n	8000bbe <run_dimmer_fsm+0x92>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 10); //Dimer apagado
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <run_dimmer_fsm+0xa4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	220a      	movs	r2, #10
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
			//fsm->state=DIM;
		}
		//else{
			//fsm->state=OFF;
		//}
		break;
 8000b76:	e022      	b.n	8000bbe <run_dimmer_fsm+0x92>
	case DIM:
		if(fsm->event==PUSH_BOTTON &&fsm->count_Dimm==2 ){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	785b      	ldrb	r3, [r3, #1]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d120      	bne.n	8000bc2 <run_dimmer_fsm+0x96>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d11c      	bne.n	8000bc2 <run_dimmer_fsm+0x96>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 50);               //Dimer medio
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <run_dimmer_fsm+0xa4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2232      	movs	r2, #50	; 0x32
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
			//fsm->state=OFF;
		//}
		//else{
			//fsm->state=DIM;
		}
		break;
 8000b90:	e017      	b.n	8000bc2 <run_dimmer_fsm+0x96>

	case ON:
		if(fsm->event==PUSH_BOTTON &&fsm->count_Dimm==3 ){
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d107      	bne.n	8000baa <run_dimmer_fsm+0x7e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	789b      	ldrb	r3, [r3, #2]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d103      	bne.n	8000baa <run_dimmer_fsm+0x7e>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 100);                   //Dimer encendio
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <run_dimmer_fsm+0xa4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2264      	movs	r2, #100	; 0x64
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
			//fsm->state=DIM;
		}
		if(fsm->event==PUSH_BOTTON &&fsm->count_Dimm==4 ){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	2b01      	cmp	r3, #1
					//__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 100);
		}
		break;
 8000bb0:	e008      	b.n	8000bc4 <run_dimmer_fsm+0x98>

	default:
			fsm->state=OFF;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
		break;
 8000bb8:	e004      	b.n	8000bc4 <run_dimmer_fsm+0x98>

		}

	}
 8000bba:	bf00      	nop
 8000bbc:	e002      	b.n	8000bc4 <run_dimmer_fsm+0x98>
		break;
 8000bbe:	bf00      	nop
 8000bc0:	e000      	b.n	8000bc4 <run_dimmer_fsm+0x98>
		break;
 8000bc2:	bf00      	nop
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	20001934 	.word	0x20001934

08000bd4 <button_pressed>:




GPIO_PinState button_pressed ( GPIO_TypeDef *port, uint16_t pin ) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
	return !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <button_pressed+0x2c>)
 8000be6:	f000 fd93 	bl	8001710 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bf0c      	ite	eq
 8000bf0:	2301      	moveq	r3, #1
 8000bf2:	2300      	movne	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	48000800 	.word	0x48000800

08000c04 <print_current_state>:

void print_current_state ( fsm_t *fsm ) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	switch (fsm->state) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d827      	bhi.n	8000c64 <print_current_state+0x60>
 8000c14:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <print_current_state+0x18>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000c2d 	.word	0x08000c2d
 8000c20:	08000c3b 	.word	0x08000c3b
 8000c24:	08000c49 	.word	0x08000c49
 8000c28:	08000c57 	.word	0x08000c57
	case WAITING:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAITING\n", sizeof("WAITING\n")-1, 100);
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	2208      	movs	r2, #8
 8000c30:	4912      	ldr	r1, [pc, #72]	; (8000c7c <print_current_state+0x78>)
 8000c32:	4813      	ldr	r0, [pc, #76]	; (8000c80 <print_current_state+0x7c>)
 8000c34:	f003 fa0e 	bl	8004054 <HAL_UART_Transmit>
		break;
 8000c38:	e01b      	b.n	8000c72 <print_current_state+0x6e>
	case DETECTED:
		HAL_UART_Transmit(&huart2, (uint8_t*)"DETECTED\n", sizeof("DETECTED\n")-1, 100);
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2209      	movs	r2, #9
 8000c3e:	4911      	ldr	r1, [pc, #68]	; (8000c84 <print_current_state+0x80>)
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <print_current_state+0x7c>)
 8000c42:	f003 fa07 	bl	8004054 <HAL_UART_Transmit>
		break;
 8000c46:	e014      	b.n	8000c72 <print_current_state+0x6e>
	case WAIT_RELEASE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAIT FOR RELEASE\n", sizeof("WAIT FOR RELEASE\n")-1, 100);
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	2211      	movs	r2, #17
 8000c4c:	490e      	ldr	r1, [pc, #56]	; (8000c88 <print_current_state+0x84>)
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <print_current_state+0x7c>)
 8000c50:	f003 fa00 	bl	8004054 <HAL_UART_Transmit>
		break;
 8000c54:	e00d      	b.n	8000c72 <print_current_state+0x6e>
	case UPDATE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"UPDATE\n", sizeof("UPDATE\n")-1, 100);
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	2207      	movs	r2, #7
 8000c5a:	490c      	ldr	r1, [pc, #48]	; (8000c8c <print_current_state+0x88>)
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <print_current_state+0x7c>)
 8000c5e:	f003 f9f9 	bl	8004054 <HAL_UART_Transmit>
		break;
 8000c62:	e006      	b.n	8000c72 <print_current_state+0x6e>
	default:
		HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\n", sizeof("ERROR\n")-1, 100);
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2206      	movs	r2, #6
 8000c68:	4909      	ldr	r1, [pc, #36]	; (8000c90 <print_current_state+0x8c>)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <print_current_state+0x7c>)
 8000c6c:	f003 f9f2 	bl	8004054 <HAL_UART_Transmit>
		break;
 8000c70:	bf00      	nop
	}
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	080079dc 	.word	0x080079dc
 8000c80:	20001978 	.word	0x20001978
 8000c84:	080079e8 	.word	0x080079e8
 8000c88:	080079f4 	.word	0x080079f4
 8000c8c:	08007a08 	.word	0x08007a08
 8000c90:	08007a10 	.word	0x08007a10

08000c94 <StartPush_Button_fsm>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartPush_Button_fsm */
void StartPush_Button_fsm(void *argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	run_fsm(&fsm_button);
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <StartPush_Button_fsm+0x18>)
 8000c9e:	f7ff fe95 	bl	80009cc <run_fsm>
    osDelay(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f004 fa08 	bl	80050b8 <osDelay>
	run_fsm(&fsm_button);
 8000ca8:	e7f8      	b.n	8000c9c <StartPush_Button_fsm+0x8>
 8000caa:	bf00      	nop
 8000cac:	20001930 	.word	0x20001930

08000cb0 <StartLed2_Fsm_Tak>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed2_Fsm_Tak */
void StartLed2_Fsm_Tak(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed2_Fsm_Tak */
  /* Infinite loop */
  for(;;)
  {
	run_dimmer_fsm(&fsm_dimmer);
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <StartLed2_Fsm_Tak+0x18>)
 8000cba:	f7ff ff37 	bl	8000b2c <run_dimmer_fsm>
    osDelay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f004 f9fa 	bl	80050b8 <osDelay>
	run_dimmer_fsm(&fsm_dimmer);
 8000cc4:	e7f8      	b.n	8000cb8 <StartLed2_Fsm_Tak+0x8>
 8000cc6:	bf00      	nop
 8000cc8:	20001974 	.word	0x20001974

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 fa2d 	bl	800113c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM3) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d120      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x62>


	  if (fsm_button.start_countdown == TRUE) {
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x3a>
			fsm_button.counter++;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d04:	709a      	strb	r2, [r3, #2]
		}

		/* 10 mSeg elapsed*/
	  if (fsm_button.counter >= TICK_PERIOD) {
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	2b09      	cmp	r3, #9
 8000d0c:	d90f      	bls.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x62>
		 fsm_button.counter = 0;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	709a      	strb	r2, [r3, #2]
		 fsm_button.start_countdown = FALSE;
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d16:	78d3      	ldrb	r3, [r2, #3]
 8000d18:	f36f 0341 	bfc	r3, #1, #1
 8000d1c:	70d3      	strb	r3, [r2, #3]
		 fsm_button.new_event = TRUE;
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d20:	78d3      	ldrb	r3, [r2, #3]
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	70d3      	strb	r3, [r2, #3]
		 fsm_button.event = TICK_TIMEOUT;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	705a      	strb	r2, [r3, #1]

		}
  }
  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	20001930 	.word	0x20001930

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6613      	str	r3, [r2, #96]	; 0x60
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f000 faa9 	bl	80012e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dce:	e018      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_TIM_Base_MspInit+0x6c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_TIM_Base_MspInit+0x68>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2105      	movs	r1, #5
 8000df6:	201d      	movs	r0, #29
 8000df8:	f000 fa76 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dfc:	201d      	movs	r0, #29
 8000dfe:	f000 fa8f 	bl	8001320 <HAL_NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40000400 	.word	0x40000400

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d11c      	bne.n	8000e70 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_TIM_MspPostInit+0x64>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_TIM_MspPostInit+0x64>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_MspPostInit+0x64>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 faa8 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <HAL_UART_MspInit+0x8c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d130      	bne.n	8000f00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0x90>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f000 fa68 	bl	80013c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2105      	movs	r1, #5
 8000ef4:	2026      	movs	r0, #38	; 0x26
 8000ef6:	f000 f9f7 	bl	80012e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efa:	2026      	movs	r0, #38	; 0x26
 8000efc:	f000 fa10 	bl	8001320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	2019      	movs	r0, #25
 8000f26:	f000 f9df 	bl	80012e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000f2a:	2019      	movs	r0, #25
 8000f2c:	f000 f9f8 	bl	8001320 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_InitTick+0x9c>)
 8000f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <HAL_InitTick+0x9c>)
 8000f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_InitTick+0x9c>)
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fa0a 	bl	800236c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f58:	f001 f9f2 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8000f5c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <HAL_InitTick+0xa0>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_InitTick+0xa8>)
 8000f70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f8e:	f001 ff3f 	bl	8002e10 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d104      	bne.n	8000fa2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <HAL_InitTick+0xa4>)
 8000f9a:	f001 ff65 	bl	8002e68 <HAL_TIM_Base_Start_IT>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3730      	adds	r7, #48	; 0x30
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	20001a04 	.word	0x20001a04
 8000fb8:	40012c00 	.word	0x40012c00

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ff6:	f001 ffef 	bl	8002fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20001a04 	.word	0x20001a04

08001004 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM3_IRQHandler+0x10>)
 800100a:	f001 ffe5 	bl	8002fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200018f0 	.word	0x200018f0

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f003 f8ad 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20001978 	.word	0x20001978

0800102c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001030:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001034:	f000 fb84 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <SystemInit+0x64>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <SystemInit+0x64>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <SystemInit+0x68>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <SystemInit+0x68>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <SystemInit+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <SystemInit+0x68>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <SystemInit+0x68>)
 8001068:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800106c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <SystemInit+0x68>)
 8001074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001078:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <SystemInit+0x68>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <SystemInit+0x68>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <SystemInit+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SystemInit+0x64>)
 800108e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001092:	609a      	str	r2, [r3, #8]
#endif
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	40021000 	.word	0x40021000

080010a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ae:	e003      	b.n	80010b8 <LoopCopyDataInit>

080010b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010b6:	3104      	adds	r1, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80010bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c0:	d3f6      	bcc.n	80010b0 <CopyDataInit>
	ldr	r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010c4:	e002      	b.n	80010cc <LoopFillZerobss>

080010c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c8:	f842 3b04 	str.w	r3, [r2], #4

080010cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <LoopForever+0x16>)
	cmp	r2, r3
 80010ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d0:	d3f9      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010d2:	f7ff ffb3 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f006 fc19 	bl	800790c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010da:	f7ff fa13 	bl	8000504 <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80010e4:	08007ad0 	.word	0x08007ad0
	ldr	r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010ec:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80010f0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80010f4:	20001a88 	.word	0x20001a88

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>
	...

080010fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_Init+0x3c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_Init+0x3c>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001112:	2003      	movs	r0, #3
 8001114:	f000 f8dd 	bl	80012d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fef9 	bl	8000f10 <HAL_InitTick>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	e001      	b.n	800112e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800112a:	f7ff fe13 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800112e:	79fb      	ldrb	r3, [r7, #7]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x1c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x20>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4413      	add	r3, r2
 800114a:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_IncTick+0x1c>)
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20001a44 	.word	0x20001a44
 800115c:	20000008 	.word	0x20000008

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20001a44 	.word	0x20001a44

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff4c 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fa:	f7ff ff61 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 80012fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f7ff ffb1 	bl	800126c <NVIC_EncodePriority>
 800130a:	4602      	mov	r2, r0
 800130c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff80 	bl	8001218 <__NVIC_SetPriority>
}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff54 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d005      	beq.n	8001360 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2204      	movs	r2, #4
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e029      	b.n	80013b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 020e 	bic.w	r2, r2, #14
 800136e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	f003 021c 	and.w	r2, r3, #28
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f202 	lsl.w	r2, r1, r2
 8001392:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
    }
  }
  return status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e17f      	b.n	80016d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8171 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x48>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d118      	bne.n	80014a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x128>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ac 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <HAL_GPIO_Init+0x32c>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	4a5d      	ldr	r2, [pc, #372]	; (80016ec <HAL_GPIO_Init+0x32c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	; 0x60
 800157e:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_GPIO_Init+0x32c>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158a:	4a59      	ldr	r2, [pc, #356]	; (80016f0 <HAL_GPIO_Init+0x330>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b4:	d025      	beq.n	8001602 <HAL_GPIO_Init+0x242>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4e      	ldr	r2, [pc, #312]	; (80016f4 <HAL_GPIO_Init+0x334>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4d      	ldr	r2, [pc, #308]	; (80016f8 <HAL_GPIO_Init+0x338>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_GPIO_Init+0x33c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <HAL_GPIO_Init+0x340>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <HAL_GPIO_Init+0x344>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x348>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x22a>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x244>
 8001602:	2300      	movs	r3, #0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001614:	4936      	ldr	r1, [pc, #216]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001646:	4a31      	ldr	r2, [pc, #196]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_GPIO_Init+0x34c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <HAL_GPIO_Init+0x34c>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_GPIO_Init+0x34c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_GPIO_Init+0x34c>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae78 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	48001000 	.word	0x48001000
 8001704:	48001400 	.word	0x48001400
 8001708:	48001800 	.word	0x48001800
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe feb6 	bl	80004d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000

08001790 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000

080017ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ba:	d130      	bne.n	800181e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c8:	d038      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d2:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2232      	movs	r2, #50	; 0x32
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f0:	e002      	b.n	80017f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001804:	d102      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f2      	bne.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001818:	d110      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e00f      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182a:	d007      	beq.n	800183c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001834:	4a05      	ldr	r2, [pc, #20]	; (800184c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40007000 	.word	0x40007000
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e3d4      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4ba1      	ldr	r3, [pc, #644]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b9e      	ldr	r3, [pc, #632]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80e4 	beq.w	8001a54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_RCC_OscConfig+0x4a>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	f040 808b 	bne.w	80019b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b01      	cmp	r3, #1
 800189e:	f040 8087 	bne.w	80019b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e3ac      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <HAL_RCC_OscConfig+0x7c>
 80018ca:	4b89      	ldr	r3, [pc, #548]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d2:	e005      	b.n	80018e0 <HAL_RCC_OscConfig+0x88>
 80018d4:	4b86      	ldr	r3, [pc, #536]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d223      	bcs.n	800192c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd71 	bl	80023d0 <RCC_SetFlashLatencyFromMSIRange>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e38d      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f8:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4977      	ldr	r1, [pc, #476]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4972      	ldr	r1, [pc, #456]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
 800192a:	e025      	b.n	8001978 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6f      	ldr	r2, [pc, #444]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	496a      	ldr	r1, [pc, #424]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	4965      	ldr	r1, [pc, #404]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fd31 	bl	80023d0 <RCC_SetFlashLatencyFromMSIRange>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e34d      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001978:	f000 fc36 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 800197c:	4601      	mov	r1, r0
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4a5a      	ldr	r2, [pc, #360]	; (8001af4 <HAL_RCC_OscConfig+0x29c>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa21 f303 	lsr.w	r3, r1, r3
 8001994:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_RCC_OscConfig+0x2a0>)
 8001996:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001998:	4b58      	ldr	r3, [pc, #352]	; (8001afc <HAL_RCC_OscConfig+0x2a4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fab7 	bl	8000f10 <HAL_InitTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d052      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	e331      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d032      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019b8:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fbcc 	bl	8001160 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbc8 	bl	8001160 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e31a      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a40      	ldr	r2, [pc, #256]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019f0:	f043 0308 	orr.w	r3, r3, #8
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	493b      	ldr	r1, [pc, #236]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	4936      	ldr	r1, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e01a      	b.n	8001a54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fb99 	bl	8001160 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a32:	f7ff fb95 	bl	8001160 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e2e7      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a44:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1da>
 8001a50:	e000      	b.n	8001a54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d074      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x21a>
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d10e      	bne.n	8001a8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d10b      	bne.n	8001a8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d064      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d160      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e2c4      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e01d      	b.n	8001ade <HAL_RCC_OscConfig+0x286>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x26e>
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0x286>
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb3b 	bl	8001160 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aec:	e011      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08007a78 	.word	0x08007a78
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fb2e 	bl	8001160 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e280      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4baf      	ldr	r3, [pc, #700]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2a8>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fb1e 	bl	8001160 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fb1a 	bl	8001160 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e26c      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3a:	4ba5      	ldr	r3, [pc, #660]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2d0>
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d060      	beq.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x310>
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d119      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d116      	bne.n	8001b96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	4b99      	ldr	r3, [pc, #612]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x328>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e249      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b93      	ldr	r3, [pc, #588]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	4990      	ldr	r1, [pc, #576]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b94:	e040      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d023      	beq.n	8001be6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a8b      	ldr	r2, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fad9 	bl	8001160 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fad5 	bl	8001160 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e227      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	497c      	ldr	r1, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
 8001be4:	e018      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a79      	ldr	r2, [pc, #484]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fab5 	bl	8001160 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fab1 	bl	8001160 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e203      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d03c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c32:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fa90 	bl	8001160 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fa8c 	bl	8001160 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1de      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c56:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ef      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3ec>
 8001c64:	e01b      	b.n	8001c9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff fa73 	bl	8001160 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fa6f 	bl	8001160 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1c1      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ef      	bne.n	8001c7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80a6 	beq.w	8001df8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cb0:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a43      	ldr	r2, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd8:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d118      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fa36 	bl	8001160 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf8:	f7ff fa32 	bl	8001160 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e184      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x57c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d8>
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d24:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d2e:	e024      	b.n	8001d7a <HAL_RCC_OscConfig+0x522>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b05      	cmp	r3, #5
 8001d36:	d110      	bne.n	8001d5a <HAL_RCC_OscConfig+0x502>
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d58:	e00f      	b.n	8001d7a <HAL_RCC_OscConfig+0x522>
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d82:	f7ff f9ed 	bl	8001160 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f9e9 	bl	8001160 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e139      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ed      	beq.n	8001d8a <HAL_RCC_OscConfig+0x532>
 8001dae:	e01a      	b.n	8001de6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f9d6 	bl	8001160 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db6:	e00f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff f9d2 	bl	8001160 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d906      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e122      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd8:	4b90      	ldr	r3, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e8      	bne.n	8001db8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dec:	4b8b      	ldr	r3, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	4a8a      	ldr	r2, [pc, #552]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8108 	beq.w	8002012 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 80d0 	bne.w	8001fac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e0c:	4b83      	ldr	r3, [pc, #524]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d130      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d127      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d11f      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e4c:	2a07      	cmp	r2, #7
 8001e4e:	bf14      	ite	ne
 8001e50:	2201      	movne	r2, #1
 8001e52:	2200      	moveq	r2, #0
 8001e54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	085b      	lsrs	r3, r3, #1
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d06e      	beq.n	8001f60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d069      	beq.n	8001f5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e88:	4b64      	ldr	r3, [pc, #400]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e94:	4b61      	ldr	r3, [pc, #388]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b7      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a5c      	ldr	r2, [pc, #368]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eb0:	f7ff f956 	bl	8001160 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff f952 	bl	8001160 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0a4      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eca:	4b54      	ldr	r3, [pc, #336]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed6:	4b51      	ldr	r3, [pc, #324]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	4b51      	ldr	r3, [pc, #324]	; (8002020 <HAL_RCC_OscConfig+0x7c8>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ef0:	0212      	lsls	r2, r2, #8
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef8:	0852      	lsrs	r2, r2, #1
 8001efa:	3a01      	subs	r2, #1
 8001efc:	0552      	lsls	r2, r2, #21
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f04:	0852      	lsrs	r2, r2, #1
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0652      	lsls	r2, r2, #25
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f10:	0912      	lsrs	r2, r2, #4
 8001f12:	0452      	lsls	r2, r2, #17
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4941      	ldr	r1, [pc, #260]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3e      	ldr	r2, [pc, #248]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f28:	4b3c      	ldr	r3, [pc, #240]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a3b      	ldr	r2, [pc, #236]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f34:	f7ff f914 	bl	8001160 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff f910 	bl	8001160 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e062      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f5a:	e05a      	b.n	8002012 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e059      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d152      	bne.n	8002012 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2a      	ldr	r2, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f78:	4b28      	ldr	r3, [pc, #160]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f84:	f7ff f8ec 	bl	8001160 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f8e8 	bl	8001160 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e03a      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x734>
 8001faa:	e032      	b.n	8002012 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d02d      	beq.n	800200e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fd0:	f023 0303 	bic.w	r3, r3, #3
 8001fd4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8001fdc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f8bb 	bl	8001160 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff f8b7 	bl	8001160 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e009      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_OscConfig+0x7c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x796>
 800200c:	e001      	b.n	8002012 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	f99d808c 	.word	0xf99d808c

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0c8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4961      	ldr	r1, [pc, #388]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b0      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04c      	beq.n	800210e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d107      	bne.n	800208c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207c:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d121      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e09e      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d115      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e092      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ac:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e086      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e07e      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 0203 	bic.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	493f      	ldr	r1, [pc, #252]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020de:	f7ff f83f 	bl	8001160 <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7ff f83b 	bl	8001160 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e066      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 020c 	and.w	r2, r3, #12
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	429a      	cmp	r2, r3
 800210c:	d1eb      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211a:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	492c      	ldr	r1, [pc, #176]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d210      	bcs.n	800215c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4924      	ldr	r1, [pc, #144]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e036      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4910      	ldr	r1, [pc, #64]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800219a:	f000 f825 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	fa21 f303 	lsr.w	r3, r1, r3
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fea6 	bl	8000f10 <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08007a78 	.word	0x08007a78
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d121      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d11e      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002238:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d102      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e004      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d101      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800226e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d133      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0xa4>
 8002286:	2b03      	cmp	r3, #3
 8002288:	d003      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0xaa>
 800228a:	e005      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800228e:	617b      	str	r3, [r7, #20]
      break;
 8002290:	e005      	b.n	800229e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002294:	617b      	str	r3, [r7, #20]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	617b      	str	r3, [r7, #20]
      break;
 800229c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	fb02 f203 	mul.w	r2, r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_GetSysClockFreq+0x104>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0e5b      	lsrs	r3, r3, #25
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022de:	69bb      	ldr	r3, [r7, #24]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08007a90 	.word	0x08007a90
 80022f4:	00f42400 	.word	0x00f42400
 80022f8:	007a1200 	.word	0x007a1200

080022fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4601      	mov	r1, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_RCC_GetPCLK1Freq+0x28>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08007a88 	.word	0x08007a88

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002344:	f7ff ffda 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002348:	4601      	mov	r1, r0
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0adb      	lsrs	r3, r3, #11
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08007a88 	.word	0x08007a88

0800236c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	220f      	movs	r2, #15
 800237a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCC_GetClockConfig+0x60>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0207 	and.w	r2, r3, #7
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40022000 	.word	0x40022000

080023d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023e8:	f7ff f9d2 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 80023ec:	6178      	str	r0, [r7, #20]
 80023ee:	e014      	b.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	4a24      	ldr	r2, [pc, #144]	; (8002488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fa:	6593      	str	r3, [r2, #88]	; 0x58
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002408:	f7ff f9c2 	bl	8001790 <HAL_PWREx_GetVoltageRange>
 800240c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002420:	d10b      	bne.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d919      	bls.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2ba0      	cmp	r3, #160	; 0xa0
 800242c:	d902      	bls.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800242e:	2302      	movs	r3, #2
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e013      	b.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002434:	2301      	movs	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	e010      	b.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d902      	bls.n	8002446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002440:	2303      	movs	r3, #3
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	e00a      	b.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d102      	bne.n	8002452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800244c:	2302      	movs	r3, #2
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	e004      	b.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d101      	bne.n	800245c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002458:	2301      	movs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 0207 	bic.w	r2, r3, #7
 8002464:	4909      	ldr	r1, [pc, #36]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	40022000 	.word	0x40022000

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002498:	2300      	movs	r3, #0
 800249a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800249c:	2300      	movs	r3, #0
 800249e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03f      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b4:	d01c      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ba:	d802      	bhi.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024c0:	e01f      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024c6:	d003      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024cc:	d01c      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024ce:	e018      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024d0:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a84      	ldr	r2, [pc, #528]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024dc:	e015      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fac9 	bl	8002a7c <RCCEx_PLLSAI1_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ee:	e00c      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3320      	adds	r3, #32
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fbb0 	bl	8002c5c <RCCEx_PLLSAI2_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002500:	e003      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	74fb      	strb	r3, [r7, #19]
      break;
 8002506:	e000      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002510:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251e:	4972      	ldr	r1, [pc, #456]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002526:	e001      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d03f      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d01c      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002546:	d802      	bhi.n	800254e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00e      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800254c:	e01f      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800254e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002552:	d003      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002558:	d01c      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800255a:	e018      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800255c:	4b62      	ldr	r3, [pc, #392]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a61      	ldr	r2, [pc, #388]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002566:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002568:	e015      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fa83 	bl	8002a7c <RCCEx_PLLSAI1_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800257a:	e00c      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3320      	adds	r3, #32
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fb6a 	bl	8002c5c <RCCEx_PLLSAI2_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800258c:	e003      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	74fb      	strb	r3, [r7, #19]
      break;
 8002592:	e000      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800259c:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025aa:	494f      	ldr	r1, [pc, #316]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025b2:	e001      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a0 	beq.w	8002706 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00d      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	4a40      	ldr	r2, [pc, #256]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6593      	str	r3, [r2, #88]	; 0x58
 80025ec:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002608:	f7fe fdaa 	bl	8001160 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800260e:	e009      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002610:	f7fe fda6 	bl	8001160 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d902      	bls.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	74fb      	strb	r3, [r7, #19]
        break;
 8002622:	e005      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0ef      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d15c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002636:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002640:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01f      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	d019      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fd65 	bl	8001160 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002698:	e00b      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7fe fd61 	bl	8001160 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d902      	bls.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	74fb      	strb	r3, [r7, #19]
            break;
 80026b0:	e006      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ec      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d6:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026de:	e009      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	74bb      	strb	r3, [r7, #18]
 80026e4:	e006      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f4:	7c7b      	ldrb	r3, [r7, #17]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b9e      	ldr	r3, [pc, #632]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	4a9d      	ldr	r2, [pc, #628]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002712:	4b98      	ldr	r3, [pc, #608]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f023 0203 	bic.w	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	4994      	ldr	r1, [pc, #592]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002734:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f023 020c 	bic.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	498c      	ldr	r1, [pc, #560]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002756:	4b87      	ldr	r3, [pc, #540]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4983      	ldr	r1, [pc, #524]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002778:	4b7e      	ldr	r3, [pc, #504]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	497b      	ldr	r1, [pc, #492]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800279c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	4972      	ldr	r1, [pc, #456]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027bc:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	496a      	ldr	r1, [pc, #424]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	4961      	ldr	r1, [pc, #388]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002800:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280e:	4959      	ldr	r1, [pc, #356]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	4950      	ldr	r1, [pc, #320]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	4948      	ldr	r1, [pc, #288]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	493f      	ldr	r1, [pc, #252]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d028      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002888:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002896:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028a6:	d106      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b2:	60d3      	str	r3, [r2, #12]
 80028b4:	e011      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028be:	d10c      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f8d8 	bl	8002a7c <RCCEx_PLLSAI1_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d028      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	491f      	ldr	r1, [pc, #124]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002904:	d106      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800290c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002910:	60d3      	str	r3, [r2, #12]
 8002912:	e011      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800291c:	d10c      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f8a9 	bl	8002a7c <RCCEx_PLLSAI1_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02b      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002962:	d109      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a02      	ldr	r2, [pc, #8]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
 8002970:	e014      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f877 	bl	8002a7c <RCCEx_PLLSAI1_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02f      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029a8:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b6:	4928      	ldr	r1, [pc, #160]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	2102      	movs	r1, #2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f854 	bl	8002a7c <RCCEx_PLLSAI1_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d014      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	74bb      	strb	r3, [r7, #18]
 80029e2:	e011      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3320      	adds	r3, #32
 80029f2:	2102      	movs	r1, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f931 	bl	8002c5c <RCCEx_PLLSAI2_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a22:	490d      	ldr	r1, [pc, #52]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a46:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000

08002a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a8a:	4b73      	ldr	r3, [pc, #460]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a96:	4b70      	ldr	r3, [pc, #448]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0203 	and.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10d      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
       ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d044      	beq.n	8002b4c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e041      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d00c      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0x6e>
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d013      	beq.n	8002afc <RCCEx_PLLSAI1_Config+0x80>
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d120      	bne.n	8002b1a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d11d      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e01a      	b.n	8002b20 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aea:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afa:	e013      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b18:	e006      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1e:	e004      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b20:	bf00      	nop
 8002b22:	e002      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b28:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b30:	4b49      	ldr	r3, [pc, #292]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	430b      	orrs	r3, r1
 8002b46:	4944      	ldr	r1, [pc, #272]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d17d      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5e:	f7fe faff 	bl	8001160 <HAL_GetTick>
 8002b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b64:	e009      	b.n	8002b7a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b66:	f7fe fafb 	bl	8001160 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d902      	bls.n	8002b7a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	73fb      	strb	r3, [r7, #15]
        break;
 8002b78:	e005      	b.n	8002b86 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ef      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d160      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d111      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	0211      	lsls	r1, r2, #8
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68d2      	ldr	r2, [r2, #12]
 8002ba8:	0912      	lsrs	r2, r2, #4
 8002baa:	0452      	lsls	r2, r2, #17
 8002bac:	430a      	orrs	r2, r1
 8002bae:	492a      	ldr	r1, [pc, #168]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	610b      	str	r3, [r1, #16]
 8002bb4:	e027      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d112      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bbc:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	0211      	lsls	r1, r2, #8
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6912      	ldr	r2, [r2, #16]
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	491f      	ldr	r1, [pc, #124]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	610b      	str	r3, [r1, #16]
 8002be0:	e011      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	0211      	lsls	r1, r2, #8
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6952      	ldr	r2, [r2, #20]
 8002bf8:	0852      	lsrs	r2, r2, #1
 8002bfa:	3a01      	subs	r2, #1
 8002bfc:	0652      	lsls	r2, r2, #25
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	4915      	ldr	r1, [pc, #84]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe faa5 	bl	8001160 <HAL_GetTick>
 8002c16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c18:	e009      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c1a:	f7fe faa1 	bl	8001160 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d902      	bls.n	8002c2e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	73fb      	strb	r3, [r7, #15]
          break;
 8002c2c:	e005      	b.n	8002c3a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0ef      	beq.n	8002c1a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000

08002c5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c6a:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
       ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d044      	beq.n	8002d2c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e041      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d00c      	beq.n	8002cca <RCCEx_PLLSAI2_Config+0x6e>
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d013      	beq.n	8002cdc <RCCEx_PLLSAI2_Config+0x80>
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d120      	bne.n	8002cfa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cb8:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11d      	bne.n	8002d00 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc8:	e01a      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cca:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e013      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10f      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ce8:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cf8:	e006      	b.n	8002d08 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e004      	b.n	8002d0a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d00:	bf00      	nop
 8002d02:	e002      	b.n	8002d0a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d08:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	430b      	orrs	r3, r1
 8002d26:	4939      	ldr	r1, [pc, #228]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d167      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fa0f 	bl	8001160 <HAL_GetTick>
 8002d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d44:	e009      	b.n	8002d5a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d46:	f7fe fa0b 	bl	8001160 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d902      	bls.n	8002d5a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	73fb      	strb	r3, [r7, #15]
        break;
 8002d58:	e005      	b.n	8002d66 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ef      	bne.n	8002d46 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d14a      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d111      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6892      	ldr	r2, [r2, #8]
 8002d82:	0211      	lsls	r1, r2, #8
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68d2      	ldr	r2, [r2, #12]
 8002d88:	0912      	lsrs	r2, r2, #4
 8002d8a:	0452      	lsls	r2, r2, #17
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	491f      	ldr	r1, [pc, #124]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	614b      	str	r3, [r1, #20]
 8002d94:	e011      	b.n	8002dba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	0211      	lsls	r1, r2, #8
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6912      	ldr	r2, [r2, #16]
 8002dac:	0852      	lsrs	r2, r2, #1
 8002dae:	3a01      	subs	r2, #1
 8002db0:	0652      	lsls	r2, r2, #25
 8002db2:	430a      	orrs	r2, r1
 8002db4:	4915      	ldr	r1, [pc, #84]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f9cb 	bl	8001160 <HAL_GetTick>
 8002dca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dcc:	e009      	b.n	8002de2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dce:	f7fe f9c7 	bl	8001160 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d902      	bls.n	8002de2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	73fb      	strb	r3, [r7, #15]
          break;
 8002de0:	e005      	b.n	8002dee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ef      	beq.n	8002dce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e01d      	b.n	8002e5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fd ffb4 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f000 fbdc 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_TIM_Base_Start_IT+0x50>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d00b      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x42>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d007      	beq.n	8002eaa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	00010007 	.word	0x00010007

08002ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e01d      	b.n	8002f0a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f815 	bl	8002f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f000 fb86 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ff70 	bl	8003e20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_TIM_PWM_Start+0x98>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x4a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_TIM_PWM_Start+0x9c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x4a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_TIM_PWM_Start+0xa0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x4a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_TIM_PWM_Start+0xa4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_TIM_PWM_Start+0x4a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_TIM_PWM_Start+0xa8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PWM_Start+0x4e>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_TIM_PWM_Start+0x50>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_TIM_PWM_Start+0xac>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0x8e>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa4:	d007      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40013400 	.word	0x40013400
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400
 8002fd0:	40014800 	.word	0x40014800
 8002fd4:	00010007 	.word	0x00010007

08002fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d122      	bne.n	8003034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d11b      	bne.n	8003034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0202 	mvn.w	r2, #2
 8003004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fad7 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fac9 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fada 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d122      	bne.n	8003088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b04      	cmp	r3, #4
 800304e:	d11b      	bne.n	8003088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0204 	mvn.w	r2, #4
 8003058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 faad 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa9f 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fab0 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b08      	cmp	r3, #8
 8003094:	d122      	bne.n	80030dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0208 	mvn.w	r2, #8
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa83 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa75 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 fa86 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0210 	mvn.w	r2, #16
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2208      	movs	r2, #8
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa59 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa4b 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fa5c 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10e      	bne.n	800315c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fdb8 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d10e      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d107      	bne.n	8003188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 ff04 	bl	8003f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fef7 	bl	8003fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa0a 	bl	80035f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0220 	mvn.w	r2, #32
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 feb7 	bl	8003f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e105      	b.n	800343e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b14      	cmp	r3, #20
 8003246:	f200 80f0 	bhi.w	800342a <HAL_TIM_PWM_ConfigChannel+0x212>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	080032a5 	.word	0x080032a5
 8003254:	0800342b 	.word	0x0800342b
 8003258:	0800342b 	.word	0x0800342b
 800325c:	0800342b 	.word	0x0800342b
 8003260:	080032e5 	.word	0x080032e5
 8003264:	0800342b 	.word	0x0800342b
 8003268:	0800342b 	.word	0x0800342b
 800326c:	0800342b 	.word	0x0800342b
 8003270:	08003327 	.word	0x08003327
 8003274:	0800342b 	.word	0x0800342b
 8003278:	0800342b 	.word	0x0800342b
 800327c:	0800342b 	.word	0x0800342b
 8003280:	08003367 	.word	0x08003367
 8003284:	0800342b 	.word	0x0800342b
 8003288:	0800342b 	.word	0x0800342b
 800328c:	0800342b 	.word	0x0800342b
 8003290:	080033a9 	.word	0x080033a9
 8003294:	0800342b 	.word	0x0800342b
 8003298:	0800342b 	.word	0x0800342b
 800329c:	0800342b 	.word	0x0800342b
 80032a0:	080033e9 	.word	0x080033e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa48 	bl	8003740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6999      	ldr	r1, [r3, #24]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	619a      	str	r2, [r3, #24]
      break;
 80032e2:	e0a3      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fab8 	bl	8003860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
      break;
 8003324:	e082      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fb21 	bl	8003974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	61da      	str	r2, [r3, #28]
      break;
 8003364:	e062      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fb89 	bl	8003a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	021a      	lsls	r2, r3, #8
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	61da      	str	r2, [r3, #28]
      break;
 80033a6:	e041      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fbd2 	bl	8003b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0208 	orr.w	r2, r2, #8
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033e6:	e021      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fc16 	bl	8003c20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	021a      	lsls	r2, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003428:	e000      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800342a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0x18>
 800345c:	2302      	movs	r3, #2
 800345e:	e0a8      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d067      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x124>
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d80b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x70>
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d073      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x144>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d802      	bhi.n	80034ae <HAL_TIM_ConfigClockSource+0x66>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d06f      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034ac:	e078      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d06c      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x144>
 80034b2:	2b30      	cmp	r3, #48	; 0x30
 80034b4:	d06a      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x144>
      break;
 80034b6:	e073      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d00d      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x90>
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d804      	bhi.n	80034ca <HAL_TIM_ConfigClockSource+0x82>
 80034c0:	2b50      	cmp	r3, #80	; 0x50
 80034c2:	d033      	beq.n	800352c <HAL_TIM_ConfigClockSource+0xe4>
 80034c4:	2b60      	cmp	r3, #96	; 0x60
 80034c6:	d041      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80034c8:	e06a      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d066      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x156>
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d017      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80034d6:	e063      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f000 fc7a 	bl	8003de0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]
      break;
 8003504:	e04c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f000 fc63 	bl	8003de0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003528:	609a      	str	r2, [r3, #8]
      break;
 800352a:	e039      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	f000 fbd7 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2150      	movs	r1, #80	; 0x50
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fc30 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 800354a:	e029      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	f000 fbf6 	bl	8003d4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2160      	movs	r1, #96	; 0x60
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fc20 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 800356a:	e019      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	461a      	mov	r2, r3
 800357a:	f000 fbb7 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fc10 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 800358a:	e009      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 fc07 	bl	8003daa <TIM_ITRx_SetConfig>
      break;
 800359c:	e000      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800359e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00f      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3c      	ldr	r2, [pc, #240]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d01b      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <TIM_Base_SetConfig+0x124>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <TIM_Base_SetConfig+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <TIM_Base_SetConfig+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0x9a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <TIM_Base_SetConfig+0x130>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00f      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <TIM_Base_SetConfig+0x124>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00b      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <TIM_Base_SetConfig+0x128>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <TIM_Base_SetConfig+0x12c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <TIM_Base_SetConfig+0x130>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40013400 	.word	0x40013400
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800

08003740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f023 0201 	bic.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0302 	bic.w	r3, r3, #2
 800378c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a2c      	ldr	r2, [pc, #176]	; (800384c <TIM_OC1_SetConfig+0x10c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <TIM_OC1_SetConfig+0x80>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a2b      	ldr	r2, [pc, #172]	; (8003850 <TIM_OC1_SetConfig+0x110>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_OC1_SetConfig+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <TIM_OC1_SetConfig+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_OC1_SetConfig+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <TIM_OC1_SetConfig+0x118>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC1_SetConfig+0x80>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a28      	ldr	r2, [pc, #160]	; (800385c <TIM_OC1_SetConfig+0x11c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10c      	bne.n	80037da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0308 	bic.w	r3, r3, #8
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <TIM_OC1_SetConfig+0x10c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_OC1_SetConfig+0xc2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <TIM_OC1_SetConfig+0x110>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_OC1_SetConfig+0xc2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a19      	ldr	r2, [pc, #100]	; (8003854 <TIM_OC1_SetConfig+0x114>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_OC1_SetConfig+0xc2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a18      	ldr	r2, [pc, #96]	; (8003858 <TIM_OC1_SetConfig+0x118>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_OC1_SetConfig+0xc2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <TIM_OC1_SetConfig+0x11c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d111      	bne.n	8003826 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	621a      	str	r2, [r3, #32]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40013400 	.word	0x40013400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0210 	bic.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0320 	bic.w	r3, r3, #32
 80038ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a28      	ldr	r2, [pc, #160]	; (8003960 <TIM_OC2_SetConfig+0x100>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_OC2_SetConfig+0x6c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a27      	ldr	r2, [pc, #156]	; (8003964 <TIM_OC2_SetConfig+0x104>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10d      	bne.n	80038e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <TIM_OC2_SetConfig+0x100>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00f      	beq.n	8003910 <TIM_OC2_SetConfig+0xb0>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <TIM_OC2_SetConfig+0x104>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00b      	beq.n	8003910 <TIM_OC2_SetConfig+0xb0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <TIM_OC2_SetConfig+0x108>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <TIM_OC2_SetConfig+0xb0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a1a      	ldr	r2, [pc, #104]	; (800396c <TIM_OC2_SetConfig+0x10c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_OC2_SetConfig+0xb0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <TIM_OC2_SetConfig+0x110>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d113      	bne.n	8003938 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40014000 	.word	0x40014000
 800396c:	40014400 	.word	0x40014400
 8003970:	40014800 	.word	0x40014800

08003974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <TIM_OC3_SetConfig+0xfc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_OC3_SetConfig+0x6a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a26      	ldr	r2, [pc, #152]	; (8003a74 <TIM_OC3_SetConfig+0x100>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10d      	bne.n	80039fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <TIM_OC3_SetConfig+0xfc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00f      	beq.n	8003a22 <TIM_OC3_SetConfig+0xae>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <TIM_OC3_SetConfig+0x100>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_OC3_SetConfig+0xae>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <TIM_OC3_SetConfig+0x104>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_OC3_SetConfig+0xae>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <TIM_OC3_SetConfig+0x108>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_OC3_SetConfig+0xae>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <TIM_OC3_SetConfig+0x10c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d113      	bne.n	8003a4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800

08003a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	031b      	lsls	r3, r3, #12
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <TIM_OC4_SetConfig+0xc0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00f      	beq.n	8003b08 <TIM_OC4_SetConfig+0x84>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <TIM_OC4_SetConfig+0xc4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00b      	beq.n	8003b08 <TIM_OC4_SetConfig+0x84>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <TIM_OC4_SetConfig+0xc8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d007      	beq.n	8003b08 <TIM_OC4_SetConfig+0x84>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <TIM_OC4_SetConfig+0xcc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_OC4_SetConfig+0x84>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <TIM_OC4_SetConfig+0xd0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d109      	bne.n	8003b1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40013400 	.word	0x40013400
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800

08003b58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <TIM_OC5_SetConfig+0xb4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00f      	beq.n	8003bd2 <TIM_OC5_SetConfig+0x7a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <TIM_OC5_SetConfig+0xb8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <TIM_OC5_SetConfig+0x7a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <TIM_OC5_SetConfig+0xbc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <TIM_OC5_SetConfig+0x7a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <TIM_OC5_SetConfig+0xc0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_OC5_SetConfig+0x7a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <TIM_OC5_SetConfig+0xc4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d109      	bne.n	8003be6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	621a      	str	r2, [r3, #32]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40013400 	.word	0x40013400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400
 8003c1c:	40014800 	.word	0x40014800

08003c20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	051b      	lsls	r3, r3, #20
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <TIM_OC6_SetConfig+0xb8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00f      	beq.n	8003c9c <TIM_OC6_SetConfig+0x7c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <TIM_OC6_SetConfig+0xbc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_OC6_SetConfig+0x7c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <TIM_OC6_SetConfig+0xc0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_OC6_SetConfig+0x7c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <TIM_OC6_SetConfig+0xc4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC6_SetConfig+0x7c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <TIM_OC6_SetConfig+0xc8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d109      	bne.n	8003cb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	029b      	lsls	r3, r3, #10
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40013400 	.word	0x40013400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800

08003cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f023 030a 	bic.w	r3, r3, #10
 8003d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b087      	sub	sp, #28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0210 	bic.w	r2, r3, #16
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f043 0307 	orr.w	r3, r3, #7
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	2201      	movs	r2, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	401a      	ands	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e068      	b.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2e      	ldr	r2, [pc, #184]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01d      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d018      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1a      	ldr	r2, [pc, #104]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40014000 	.word	0x40014000

08003f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e040      	b.n	800404c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc ff4e 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa1a 	bl	8004430 <UART_SetConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e022      	b.n	800404c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fd80 	bl	8004b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fe07 	bl	8004c58 <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	2b20      	cmp	r3, #32
 800406a:	f040 8081 	bne.w	8004170 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Transmit+0x26>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e079      	b.n	8004172 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_UART_Transmit+0x38>
 8004088:	2302      	movs	r3, #2
 800408a:	e072      	b.n	8004172 <HAL_UART_Transmit+0x11e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	; 0x21
 800409e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd f85e 	bl	8001160 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040be:	d108      	bne.n	80040d2 <HAL_UART_Transmit+0x7e>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e003      	b.n	80040da <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80040e2:	e02d      	b.n	8004140 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2200      	movs	r2, #0
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fdf7 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e039      	b.n	8004172 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004110:	b292      	uxth	r2, r2
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	3302      	adds	r3, #2
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e008      	b.n	800412e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	b292      	uxth	r2, r2
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1cb      	bne.n	80040e4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fdc3 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e005      	b.n	8004172 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	f640 030f 	movw	r3, #2063	; 0x80f
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00e      	beq.n	80041d4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d009      	beq.n	80041d4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8114 	beq.w	80043f2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
      }
      return;
 80041d2:	e10e      	b.n	80043f2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80d6 	beq.w	8004388 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80cb 	beq.w	8004388 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <HAL_UART_IRQHandler+0x9e>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00e      	beq.n	8004242 <HAL_UART_IRQHandler+0xc6>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2202      	movs	r2, #2
 8004234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423a:	f043 0204 	orr.w	r2, r3, #4
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00e      	beq.n	800426a <HAL_UART_IRQHandler+0xee>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2204      	movs	r2, #4
 800425c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004262:	f043 0202 	orr.w	r2, r3, #2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2208      	movs	r2, #8
 800428e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004294:	f043 0208 	orr.w	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00f      	beq.n	80042c6 <HAL_UART_IRQHandler+0x14a>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8093 	beq.w	80043f6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d004      	beq.n	8004312 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800430e:	2b00      	cmp	r3, #0
 8004310:	d031      	beq.n	8004376 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fd60 	bl	8004dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d123      	bne.n	800436e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004334:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	4a30      	ldr	r2, [pc, #192]	; (8004404 <HAL_UART_IRQHandler+0x288>)
 8004344:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fff6 	bl	800133c <HAL_DMA_Abort_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004360:	4610      	mov	r0, r2
 8004362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	e00e      	b.n	8004384 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f858 	bl	800441c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e00a      	b.n	8004384 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f854 	bl	800441c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	e006      	b.n	8004384 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f850 	bl	800441c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004382:	e038      	b.n	80043f6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	bf00      	nop
    return;
 8004386:	e036      	b.n	80043f6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_UART_IRQHandler+0x232>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fd65 	bl	8004e76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043ac:	e026      	b.n	80043fc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d017      	beq.n	80043fa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
    }
    return;
 80043d2:	e012      	b.n	80043fa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <HAL_UART_IRQHandler+0x280>
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fd2b 	bl	8004e44 <UART_EndTransmit_IT>
    return;
 80043ee:	bf00      	nop
 80043f0:	e004      	b.n	80043fc <HAL_UART_IRQHandler+0x280>
      return;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_UART_IRQHandler+0x280>
    return;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_UART_IRQHandler+0x280>
    return;
 80043fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	08004e19 	.word	0x08004e19

08004408 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004430:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004434:	b08a      	sub	sp, #40	; 0x28
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4bb8      	ldr	r3, [pc, #736]	; (8004748 <UART_SetConfig+0x318>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446e:	430b      	orrs	r3, r1
 8004470:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4aae      	ldr	r2, [pc, #696]	; (800474c <UART_SetConfig+0x31c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	4313      	orrs	r3, r2
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4aa5      	ldr	r2, [pc, #660]	; (8004750 <UART_SetConfig+0x320>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d126      	bne.n	800450e <UART_SetConfig+0xde>
 80044c0:	4ba4      	ldr	r3, [pc, #656]	; (8004754 <UART_SetConfig+0x324>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d81a      	bhi.n	8004504 <UART_SetConfig+0xd4>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0xa4>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044ed 	.word	0x080044ed
 80044e0:	080044fd 	.word	0x080044fd
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e105      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e101      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e0fd      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004502:	e0f9      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450a:	bf00      	nop
 800450c:	e0f4      	b.n	80046f8 <UART_SetConfig+0x2c8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a91      	ldr	r2, [pc, #580]	; (8004758 <UART_SetConfig+0x328>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d138      	bne.n	800458a <UART_SetConfig+0x15a>
 8004518:	4b8e      	ldr	r3, [pc, #568]	; (8004754 <UART_SetConfig+0x324>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d82c      	bhi.n	8004580 <UART_SetConfig+0x150>
 8004526:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0xfc>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004561 	.word	0x08004561
 8004530:	08004581 	.word	0x08004581
 8004534:	08004581 	.word	0x08004581
 8004538:	08004581 	.word	0x08004581
 800453c:	08004571 	.word	0x08004571
 8004540:	08004581 	.word	0x08004581
 8004544:	08004581 	.word	0x08004581
 8004548:	08004581 	.word	0x08004581
 800454c:	08004569 	.word	0x08004569
 8004550:	08004581 	.word	0x08004581
 8004554:	08004581 	.word	0x08004581
 8004558:	08004581 	.word	0x08004581
 800455c:	08004579 	.word	0x08004579
 8004560:	2300      	movs	r3, #0
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e0c7      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004568:	2302      	movs	r3, #2
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e0c3      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e0bf      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e0bb      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	bf00      	nop
 8004588:	e0b6      	b.n	80046f8 <UART_SetConfig+0x2c8>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a73      	ldr	r2, [pc, #460]	; (800475c <UART_SetConfig+0x32c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d125      	bne.n	80045e0 <UART_SetConfig+0x1b0>
 8004594:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <UART_SetConfig+0x324>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d011      	beq.n	80045c6 <UART_SetConfig+0x196>
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d802      	bhi.n	80045ac <UART_SetConfig+0x17c>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <UART_SetConfig+0x186>
 80045aa:	e014      	b.n	80045d6 <UART_SetConfig+0x1a6>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d006      	beq.n	80045be <UART_SetConfig+0x18e>
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d00c      	beq.n	80045ce <UART_SetConfig+0x19e>
 80045b4:	e00f      	b.n	80045d6 <UART_SetConfig+0x1a6>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045bc:	e09c      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80045be:	2302      	movs	r3, #2
 80045c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c4:	e098      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80045c6:	2304      	movs	r3, #4
 80045c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045cc:	e094      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80045ce:	2308      	movs	r3, #8
 80045d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d4:	e090      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80045d6:	2310      	movs	r3, #16
 80045d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045dc:	bf00      	nop
 80045de:	e08b      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5e      	ldr	r2, [pc, #376]	; (8004760 <UART_SetConfig+0x330>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d125      	bne.n	8004636 <UART_SetConfig+0x206>
 80045ea:	4b5a      	ldr	r3, [pc, #360]	; (8004754 <UART_SetConfig+0x324>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d011      	beq.n	800461c <UART_SetConfig+0x1ec>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d802      	bhi.n	8004602 <UART_SetConfig+0x1d2>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <UART_SetConfig+0x1dc>
 8004600:	e014      	b.n	800462c <UART_SetConfig+0x1fc>
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d006      	beq.n	8004614 <UART_SetConfig+0x1e4>
 8004606:	2bc0      	cmp	r3, #192	; 0xc0
 8004608:	d00c      	beq.n	8004624 <UART_SetConfig+0x1f4>
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x1fc>
 800460c:	2300      	movs	r3, #0
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004612:	e071      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004614:	2302      	movs	r3, #2
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461a:	e06d      	b.n	80046f8 <UART_SetConfig+0x2c8>
 800461c:	2304      	movs	r3, #4
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004622:	e069      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004624:	2308      	movs	r3, #8
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e065      	b.n	80046f8 <UART_SetConfig+0x2c8>
 800462c:	2310      	movs	r3, #16
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	bf00      	nop
 8004634:	e060      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a4a      	ldr	r2, [pc, #296]	; (8004764 <UART_SetConfig+0x334>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d129      	bne.n	8004694 <UART_SetConfig+0x264>
 8004640:	4b44      	ldr	r3, [pc, #272]	; (8004754 <UART_SetConfig+0x324>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464e:	d014      	beq.n	800467a <UART_SetConfig+0x24a>
 8004650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004654:	d802      	bhi.n	800465c <UART_SetConfig+0x22c>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <UART_SetConfig+0x23a>
 800465a:	e016      	b.n	800468a <UART_SetConfig+0x25a>
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d007      	beq.n	8004672 <UART_SetConfig+0x242>
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d00c      	beq.n	8004682 <UART_SetConfig+0x252>
 8004668:	e00f      	b.n	800468a <UART_SetConfig+0x25a>
 800466a:	2300      	movs	r3, #0
 800466c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004670:	e042      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004672:	2302      	movs	r3, #2
 8004674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004678:	e03e      	b.n	80046f8 <UART_SetConfig+0x2c8>
 800467a:	2304      	movs	r3, #4
 800467c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004680:	e03a      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004682:	2308      	movs	r3, #8
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004688:	e036      	b.n	80046f8 <UART_SetConfig+0x2c8>
 800468a:	2310      	movs	r3, #16
 800468c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004690:	bf00      	nop
 8004692:	e031      	b.n	80046f8 <UART_SetConfig+0x2c8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2c      	ldr	r2, [pc, #176]	; (800474c <UART_SetConfig+0x31c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d129      	bne.n	80046f2 <UART_SetConfig+0x2c2>
 800469e:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <UART_SetConfig+0x324>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ac:	d014      	beq.n	80046d8 <UART_SetConfig+0x2a8>
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d802      	bhi.n	80046ba <UART_SetConfig+0x28a>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <UART_SetConfig+0x298>
 80046b8:	e016      	b.n	80046e8 <UART_SetConfig+0x2b8>
 80046ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046be:	d007      	beq.n	80046d0 <UART_SetConfig+0x2a0>
 80046c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c4:	d00c      	beq.n	80046e0 <UART_SetConfig+0x2b0>
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x2b8>
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e013      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80046d0:	2302      	movs	r3, #2
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e00f      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e00b      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e007      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <UART_SetConfig+0x2c8>
 80046f2:	2310      	movs	r3, #16
 80046f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <UART_SetConfig+0x31c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	f040 80fe 	bne.w	8004900 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004704:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004708:	2b08      	cmp	r3, #8
 800470a:	d837      	bhi.n	800477c <UART_SetConfig+0x34c>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x2e4>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004739 	.word	0x08004739
 8004718:	0800477d 	.word	0x0800477d
 800471c:	08004741 	.word	0x08004741
 8004720:	0800477d 	.word	0x0800477d
 8004724:	0800476d 	.word	0x0800476d
 8004728:	0800477d 	.word	0x0800477d
 800472c:	0800477d 	.word	0x0800477d
 8004730:	0800477d 	.word	0x0800477d
 8004734:	08004775 	.word	0x08004775
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fd fdec 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 800473c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800473e:	e020      	b.n	8004782 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <UART_SetConfig+0x338>)
 8004742:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004744:	e01d      	b.n	8004782 <UART_SetConfig+0x352>
 8004746:	bf00      	nop
 8004748:	efff69f3 	.word	0xefff69f3
 800474c:	40008000 	.word	0x40008000
 8004750:	40013800 	.word	0x40013800
 8004754:	40021000 	.word	0x40021000
 8004758:	40004400 	.word	0x40004400
 800475c:	40004800 	.word	0x40004800
 8004760:	40004c00 	.word	0x40004c00
 8004764:	40005000 	.word	0x40005000
 8004768:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800476c:	f7fd fd3c 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8004770:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004772:	e006      	b.n	8004782 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004778:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800477a:	e002      	b.n	8004782 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	76fb      	strb	r3, [r7, #27]
        break;
 8004780:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 81b9 	beq.w	8004afc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	429a      	cmp	r2, r3
 8004798:	d305      	bcc.n	80047a6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d902      	bls.n	80047ac <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	76fb      	strb	r3, [r7, #27]
 80047aa:	e1a7      	b.n	8004afc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80047ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 8092 	bhi.w	80048da <UART_SetConfig+0x4aa>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <UART_SetConfig+0x38c>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080048db 	.word	0x080048db
 80047c4:	0800482f 	.word	0x0800482f
 80047c8:	080048db 	.word	0x080048db
 80047cc:	08004863 	.word	0x08004863
 80047d0:	080048db 	.word	0x080048db
 80047d4:	080048db 	.word	0x080048db
 80047d8:	080048db 	.word	0x080048db
 80047dc:	080048b1 	.word	0x080048b1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fd fd98 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 80047e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4619      	mov	r1, r3
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f04f 0400 	mov.w	r4, #0
 80047f6:	0214      	lsls	r4, r2, #8
 80047f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047fc:	020b      	lsls	r3, r1, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6852      	ldr	r2, [r2, #4]
 8004802:	0852      	lsrs	r2, r2, #1
 8004804:	4611      	mov	r1, r2
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	eb13 0b01 	adds.w	fp, r3, r1
 800480e:	eb44 0c02 	adc.w	ip, r4, r2
 8004812:	4658      	mov	r0, fp
 8004814:	4661      	mov	r1, ip
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	461a      	mov	r2, r3
 8004820:	4623      	mov	r3, r4
 8004822:	f7fb fcd5 	bl	80001d0 <__aeabi_uldivmod>
 8004826:	4603      	mov	r3, r0
 8004828:	460c      	mov	r4, r1
 800482a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800482c:	e058      	b.n	80048e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	f04f 0400 	mov.w	r4, #0
 8004838:	49ae      	ldr	r1, [pc, #696]	; (8004af4 <UART_SetConfig+0x6c4>)
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	eb13 0b01 	adds.w	fp, r3, r1
 8004842:	eb44 0c02 	adc.w	ip, r4, r2
 8004846:	4658      	mov	r0, fp
 8004848:	4661      	mov	r1, ip
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f04f 0400 	mov.w	r4, #0
 8004852:	461a      	mov	r2, r3
 8004854:	4623      	mov	r3, r4
 8004856:	f7fb fcbb 	bl	80001d0 <__aeabi_uldivmod>
 800485a:	4603      	mov	r3, r0
 800485c:	460c      	mov	r4, r1
 800485e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004860:	e03e      	b.n	80048e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fd fcc1 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8004866:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	f04f 0400 	mov.w	r4, #0
 8004878:	0214      	lsls	r4, r2, #8
 800487a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800487e:	020b      	lsls	r3, r1, #8
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	0852      	lsrs	r2, r2, #1
 8004886:	4611      	mov	r1, r2
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	eb13 0b01 	adds.w	fp, r3, r1
 8004890:	eb44 0c02 	adc.w	ip, r4, r2
 8004894:	4658      	mov	r0, fp
 8004896:	4661      	mov	r1, ip
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f04f 0400 	mov.w	r4, #0
 80048a0:	461a      	mov	r2, r3
 80048a2:	4623      	mov	r3, r4
 80048a4:	f7fb fc94 	bl	80001d0 <__aeabi_uldivmod>
 80048a8:	4603      	mov	r3, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80048ae:	e017      	b.n	80048e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	f04f 0400 	mov.w	r4, #0
 80048ba:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80048be:	f144 0100 	adc.w	r1, r4, #0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	461a      	mov	r2, r3
 80048cc:	4623      	mov	r3, r4
 80048ce:	f7fb fc7f 	bl	80001d0 <__aeabi_uldivmod>
 80048d2:	4603      	mov	r3, r0
 80048d4:	460c      	mov	r4, r1
 80048d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80048d8:	e002      	b.n	80048e0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	76fb      	strb	r3, [r7, #27]
            break;
 80048de:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e6:	d308      	bcc.n	80048fa <UART_SetConfig+0x4ca>
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ee:	d204      	bcs.n	80048fa <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e100      	b.n	8004afc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	76fb      	strb	r3, [r7, #27]
 80048fe:	e0fd      	b.n	8004afc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	f040 8084 	bne.w	8004a14 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800490c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004910:	2b08      	cmp	r3, #8
 8004912:	d85f      	bhi.n	80049d4 <UART_SetConfig+0x5a4>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0x4ec>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	08004961 	.word	0x08004961
 8004924:	08004981 	.word	0x08004981
 8004928:	080049d5 	.word	0x080049d5
 800492c:	0800499d 	.word	0x0800499d
 8004930:	080049d5 	.word	0x080049d5
 8004934:	080049d5 	.word	0x080049d5
 8004938:	080049d5 	.word	0x080049d5
 800493c:	080049bd 	.word	0x080049bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7fd fce8 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8004944:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800495e:	e03c      	b.n	80049da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004960:	f7fd fcee 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8004964:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	005a      	lsls	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	b29b      	uxth	r3, r3
 800497c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800497e:	e02c      	b.n	80049da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800498a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6852      	ldr	r2, [r2, #4]
 8004992:	fbb3 f3f2 	udiv	r3, r3, r2
 8004996:	b29b      	uxth	r3, r3
 8004998:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800499a:	e01e      	b.n	80049da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499c:	f7fd fc24 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80049a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	005a      	lsls	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	085b      	lsrs	r3, r3, #1
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049ba:	e00e      	b.n	80049da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049d2:	e002      	b.n	80049da <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	76fb      	strb	r3, [r7, #27]
        break;
 80049d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b0f      	cmp	r3, #15
 80049de:	d916      	bls.n	8004a0e <UART_SetConfig+0x5de>
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e6:	d212      	bcs.n	8004a0e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f023 030f 	bic.w	r3, r3, #15
 80049f0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	89fb      	ldrh	r3, [r7, #14]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	89fa      	ldrh	r2, [r7, #14]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	e076      	b.n	8004afc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	76fb      	strb	r3, [r7, #27]
 8004a12:	e073      	b.n	8004afc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d85c      	bhi.n	8004ad6 <UART_SetConfig+0x6a6>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x5f4>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a67 	.word	0x08004a67
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004ad7 	.word	0x08004ad7
 8004a34:	08004aa1 	.word	0x08004aa1
 8004a38:	08004ad7 	.word	0x08004ad7
 8004a3c:	08004ad7 	.word	0x08004ad7
 8004a40:	08004ad7 	.word	0x08004ad7
 8004a44:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fd fc64 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085a      	lsrs	r2, r3, #1
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	441a      	add	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a64:	e03a      	b.n	8004adc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a66:	f7fd fc6b 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8004a6a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	085a      	lsrs	r2, r3, #1
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a82:	e02b      	b.n	8004adc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004a8e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6852      	ldr	r2, [r2, #4]
 8004a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a9e:	e01d      	b.n	8004adc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa0:	f7fd fba2 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8004aa4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	085a      	lsrs	r2, r3, #1
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	441a      	add	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004abc:	e00e      	b.n	8004adc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ad4:	e002      	b.n	8004adc <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	76fb      	strb	r3, [r7, #27]
        break;
 8004ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d90a      	bls.n	8004af8 <UART_SetConfig+0x6c8>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d206      	bcs.n	8004af8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e003      	b.n	8004afc <UART_SetConfig+0x6cc>
 8004af4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004b08:	7efb      	ldrb	r3, [r7, #27]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3728      	adds	r7, #40	; 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c12:	d10a      	bne.n	8004c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c66:	f7fc fa7b 	bl	8001160 <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d10e      	bne.n	8004c98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f82a 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e020      	b.n	8004cda <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d10e      	bne.n	8004cc4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f814 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e00a      	b.n	8004cda <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e05d      	b.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d059      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fc fa30 	bl	8001160 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11b      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e042      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02b      	beq.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d66:	d123      	bne.n	8004db0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d70:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d80:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e00f      	b.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d092      	beq.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff faf0 	bl	800441c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff facd 	bl	8004408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004e8e:	bf00      	nop
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9e:	f3ef 8305 	mrs	r3, IPSR
 8004ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8004eae:	607b      	str	r3, [r7, #4]
  return(result);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eba:	603b      	str	r3, [r7, #0]
  return(result);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <osKernelInitialize+0x3a>
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <osKernelInitialize+0x64>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d103      	bne.n	8004ed2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004eca:	f06f 0305 	mvn.w	r3, #5
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e00c      	b.n	8004eec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <osKernelInitialize+0x64>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d105      	bne.n	8004ee6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <osKernelInitialize+0x64>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e002      	b.n	8004eec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	2000002c 	.word	0x2000002c

08004f00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f06:	f3ef 8305 	mrs	r3, IPSR
 8004f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f12:	f3ef 8310 	mrs	r3, PRIMASK
 8004f16:	607b      	str	r3, [r7, #4]
  return(result);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f22:	603b      	str	r3, [r7, #0]
  return(result);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <osKernelStart+0x3a>
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <osKernelStart+0x68>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d103      	bne.n	8004f3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004f32:	f06f 0305 	mvn.w	r3, #5
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e010      	b.n	8004f5c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <osKernelStart+0x68>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d109      	bne.n	8004f56 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f42:	f7ff ffa2 	bl	8004e8a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <osKernelStart+0x68>)
 8004f48:	2202      	movs	r2, #2
 8004f4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f4c:	f001 f870 	bl	8006030 <vTaskStartScheduler>
      stat = osOK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e002      	b.n	8004f5c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2000002c 	.word	0x2000002c

08004f6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b090      	sub	sp, #64	; 0x40
 8004f70:	af04      	add	r7, sp, #16
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f7c:	f3ef 8305 	mrs	r3, IPSR
 8004f80:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f82:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 808f 	bne.w	80050a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f96:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <osThreadNew+0x3e>
 8004fa2:	4b44      	ldr	r3, [pc, #272]	; (80050b4 <osThreadNew+0x148>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d07e      	beq.n	80050a8 <osThreadNew+0x13c>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d07b      	beq.n	80050a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004fb4:	2318      	movs	r3, #24
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d045      	beq.n	8005054 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <osThreadNew+0x6a>
        name = attr->name;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <osThreadNew+0x90>
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	2b38      	cmp	r3, #56	; 0x38
 8004fee:	d805      	bhi.n	8004ffc <osThreadNew+0x90>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <osThreadNew+0x94>
        return (NULL);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e054      	b.n	80050aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00e      	beq.n	8005036 <osThreadNew+0xca>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b5b      	cmp	r3, #91	; 0x5b
 800501e:	d90a      	bls.n	8005036 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <osThreadNew+0xca>
        mem = 1;
 8005030:	2301      	movs	r3, #1
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	e010      	b.n	8005058 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10c      	bne.n	8005058 <osThreadNew+0xec>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d108      	bne.n	8005058 <osThreadNew+0xec>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <osThreadNew+0xec>
          mem = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	e001      	b.n	8005058 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d110      	bne.n	8005080 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005066:	9202      	str	r2, [sp, #8]
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fe09 	bl	8005c8c <xTaskCreateStatic>
 800507a:	4603      	mov	r3, r0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e013      	b.n	80050a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d110      	bne.n	80050a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	b29a      	uxth	r2, r3
 800508a:	f107 0310 	add.w	r3, r7, #16
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fe51 	bl	8005d40 <xTaskCreate>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <osThreadNew+0x13c>
          hTask = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050a8:	693b      	ldr	r3, [r7, #16]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3730      	adds	r7, #48	; 0x30
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	2000002c 	.word	0x2000002c

080050b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c0:	f3ef 8305 	mrs	r3, IPSR
 80050c4:	613b      	str	r3, [r7, #16]
  return(result);
 80050c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10f      	bne.n	80050ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050cc:	f3ef 8310 	mrs	r3, PRIMASK
 80050d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d105      	bne.n	80050e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050d8:	f3ef 8311 	mrs	r3, BASEPRI
 80050dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <osDelay+0x3c>
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <osDelay+0x58>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d103      	bne.n	80050f4 <osDelay+0x3c>
    stat = osErrorISR;
 80050ec:	f06f 0305 	mvn.w	r3, #5
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e007      	b.n	8005104 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <osDelay+0x4c>
      vTaskDelay(ticks);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 ff62 	bl	8005fc8 <vTaskDelay>
    }
  }

  return (stat);
 8005104:	697b      	ldr	r3, [r7, #20]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000002c 	.word	0x2000002c

08005114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4a07      	ldr	r2, [pc, #28]	; (8005140 <vApplicationGetIdleTaskMemory+0x2c>)
 8005124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4a06      	ldr	r2, [pc, #24]	; (8005144 <vApplicationGetIdleTaskMemory+0x30>)
 800512a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000030 	.word	0x20000030
 8005144:	2000008c 	.word	0x2000008c

08005148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <vApplicationGetTimerTaskMemory+0x2c>)
 8005158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4a06      	ldr	r2, [pc, #24]	; (8005178 <vApplicationGetTimerTaskMemory+0x30>)
 800515e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005166:	601a      	str	r2, [r3, #0]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	2000028c 	.word	0x2000028c
 8005178:	200002e8 	.word	0x200002e8

0800517c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f103 0208 	add.w	r2, r3, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f04f 32ff 	mov.w	r2, #4294967295
 8005194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f103 0208 	add.w	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f103 0208 	add.w	r2, r3, #8
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d103      	bne.n	800523e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e00c      	b.n	8005258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3308      	adds	r3, #8
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e002      	b.n	800524c <vListInsert+0x2e>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	429a      	cmp	r2, r3
 8005256:	d2f6      	bcs.n	8005246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6852      	ldr	r2, [r2, #4]
 80052b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d103      	bne.n	80052c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d109      	bne.n	800530c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	e7fe      	b.n	800530a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800530c:	f002 f80e 	bl	800732c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533c:	3b01      	subs	r3, #1
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005342:	fb01 f303 	mul.w	r3, r1, r3
 8005346:	441a      	add	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	22ff      	movs	r2, #255	; 0xff
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d114      	bne.n	800538c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01a      	beq.n	80053a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3310      	adds	r3, #16
 800536e:	4618      	mov	r0, r3
 8005370:	f001 f8de 	bl	8006530 <xTaskRemoveFromEventList>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d012      	beq.n	80053a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <xQueueGenericReset+0xcc>)
 800537c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	e009      	b.n	80053a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3310      	adds	r3, #16
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fef3 	bl	800517c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3324      	adds	r3, #36	; 0x24
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff feee 	bl	800517c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053a0:	f001 fff2 	bl	8007388 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053a4:	2301      	movs	r3, #1
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08e      	sub	sp, #56	; 0x38
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <xQueueGenericCreateStatic+0x28>
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053da:	e7fe      	b.n	80053da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <xQueueGenericCreateStatic+0x42>
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <xQueueGenericCreateStatic+0x4e>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <xQueueGenericCreateStatic+0x52>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <xQueueGenericCreateStatic+0x54>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <xQueueGenericCreateStatic+0x6c>
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	e7fe      	b.n	800541e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <xQueueGenericCreateStatic+0x78>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <xQueueGenericCreateStatic+0x7c>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <xQueueGenericCreateStatic+0x7e>
 8005430:	2300      	movs	r3, #0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <xQueueGenericCreateStatic+0x96>
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e7fe      	b.n	8005448 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800544a:	2350      	movs	r3, #80	; 0x50
 800544c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b50      	cmp	r3, #80	; 0x50
 8005452:	d009      	beq.n	8005468 <xQueueGenericCreateStatic+0xb4>
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e7fe      	b.n	8005466 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005468:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800547c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f805 	bl	800549a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005492:	4618      	mov	r0, r3
 8005494:	3730      	adds	r7, #48	; 0x30
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e002      	b.n	80054bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054c8:	2101      	movs	r1, #1
 80054ca:	69b8      	ldr	r0, [r7, #24]
 80054cc:	f7ff ff0a 	bl	80052e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	; 0x38
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <xQueueGenericSend+0x30>
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
 800550e:	e7fe      	b.n	800550e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <xQueueGenericSend+0x3e>
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <xQueueGenericSend+0x42>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <xQueueGenericSend+0x44>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <xQueueGenericSend+0x5c>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
 800553a:	e7fe      	b.n	800553a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d103      	bne.n	800554a <xQueueGenericSend+0x6a>
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <xQueueGenericSend+0x6e>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueGenericSend+0x70>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d109      	bne.n	8005568 <xQueueGenericSend+0x88>
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	623b      	str	r3, [r7, #32]
 8005566:	e7fe      	b.n	8005566 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005568:	f001 f998 	bl	800689c <xTaskGetSchedulerState>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <xQueueGenericSend+0x98>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <xQueueGenericSend+0x9c>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <xQueueGenericSend+0x9e>
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <xQueueGenericSend+0xb6>
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e7fe      	b.n	8005594 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005596:	f001 fec9 	bl	800732c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d302      	bcc.n	80055ac <xQueueGenericSend+0xcc>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d129      	bne.n	8005600 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055b2:	f000 f9ff 	bl	80059b4 <prvCopyDataToQueue>
 80055b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	3324      	adds	r3, #36	; 0x24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 ffb3 	bl	8006530 <xTaskRemoveFromEventList>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055d0:	4b3f      	ldr	r3, [pc, #252]	; (80056d0 <xQueueGenericSend+0x1f0>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	e00a      	b.n	80055f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055e8:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <xQueueGenericSend+0x1f0>)
 80055ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055f8:	f001 fec6 	bl	8007388 <vPortExitCritical>
				return pdPASS;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e063      	b.n	80056c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005606:	f001 febf 	bl	8007388 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800560a:	2300      	movs	r3, #0
 800560c:	e05c      	b.n	80056c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	4618      	mov	r0, r3
 800561a:	f000 ffeb 	bl	80065f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800561e:	2301      	movs	r3, #1
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005622:	f001 feb1 	bl	8007388 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005626:	f000 fd67 	bl	80060f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800562a:	f001 fe7f 	bl	800732c <vPortEnterCritical>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005634:	b25b      	sxtb	r3, r3
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d103      	bne.n	8005644 <xQueueGenericSend+0x164>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800564a:	b25b      	sxtb	r3, r3
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x17a>
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800565a:	f001 fe95 	bl	8007388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800565e:	1d3a      	adds	r2, r7, #4
 8005660:	f107 0314 	add.w	r3, r7, #20
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ffda 	bl	8006620 <xTaskCheckForTimeOut>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d124      	bne.n	80056bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005674:	f000 fa96 	bl	8005ba4 <prvIsQueueFull>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d018      	beq.n	80056b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	3310      	adds	r3, #16
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 ff04 	bl	8006494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800568c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800568e:	f000 fa21 	bl	8005ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005692:	f000 fd3f 	bl	8006114 <xTaskResumeAll>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	f47f af7c 	bne.w	8005596 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <xQueueGenericSend+0x1f0>)
 80056a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	e772      	b.n	8005596 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056b2:	f000 fa0f 	bl	8005ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056b6:	f000 fd2d 	bl	8006114 <xTaskResumeAll>
 80056ba:	e76c      	b.n	8005596 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056be:	f000 fa09 	bl	8005ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056c2:	f000 fd27 	bl	8006114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3738      	adds	r7, #56	; 0x38
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08e      	sub	sp, #56	; 0x38
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <xQueueGenericSendFromISR+0x2c>
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	e7fe      	b.n	80056fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d103      	bne.n	800570e <xQueueGenericSendFromISR+0x3a>
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueGenericSendFromISR+0x3e>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueGenericSendFromISR+0x40>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <xQueueGenericSendFromISR+0x58>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	e7fe      	b.n	800572a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d103      	bne.n	800573a <xQueueGenericSendFromISR+0x66>
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <xQueueGenericSendFromISR+0x6a>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <xQueueGenericSendFromISR+0x6c>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <xQueueGenericSendFromISR+0x84>
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e7fe      	b.n	8005756 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005758:	f001 fec4 	bl	80074e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800575c:	f3ef 8211 	mrs	r2, BASEPRI
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61ba      	str	r2, [r7, #24]
 8005772:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005774:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <xQueueGenericSendFromISR+0xb6>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d12c      	bne.n	80057e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579a:	f000 f90b 	bl	80059b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800579e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d112      	bne.n	80057ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d016      	beq.n	80057de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	3324      	adds	r3, #36	; 0x24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 febb 	bl	8006530 <xTaskRemoveFromEventList>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00e      	beq.n	80057de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e007      	b.n	80057de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057d2:	3301      	adds	r3, #1
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	b25a      	sxtb	r2, r3
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057de:	2301      	movs	r3, #1
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80057e2:	e001      	b.n	80057e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	637b      	str	r3, [r7, #52]	; 0x34
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3738      	adds	r7, #56	; 0x38
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005808:	2300      	movs	r3, #0
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <xQueueReceive+0x2e>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	e7fe      	b.n	8005828 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <xQueueReceive+0x3c>
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <xQueueReceive+0x40>
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <xQueueReceive+0x42>
 800583c:	2300      	movs	r3, #0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <xQueueReceive+0x5a>
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e7fe      	b.n	8005854 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005856:	f001 f821 	bl	800689c <xTaskGetSchedulerState>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <xQueueReceive+0x6a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <xQueueReceive+0x6e>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueReceive+0x70>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <xQueueReceive+0x88>
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e7fe      	b.n	8005882 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005884:	f001 fd52 	bl	800732c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01f      	beq.n	80058d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005898:	f000 f8f6 	bl	8005a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	1e5a      	subs	r2, r3, #1
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	3310      	adds	r3, #16
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fe3d 	bl	8006530 <xTaskRemoveFromEventList>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058bc:	4b3c      	ldr	r3, [pc, #240]	; (80059b0 <xQueueReceive+0x1b4>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058cc:	f001 fd5c 	bl	8007388 <vPortExitCritical>
				return pdPASS;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e069      	b.n	80059a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058da:	f001 fd55 	bl	8007388 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058de:	2300      	movs	r3, #0
 80058e0:	e062      	b.n	80059a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fe81 	bl	80065f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058f2:	2301      	movs	r3, #1
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058f6:	f001 fd47 	bl	8007388 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058fa:	f000 fbfd 	bl	80060f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058fe:	f001 fd15 	bl	800732c <vPortEnterCritical>
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005908:	b25b      	sxtb	r3, r3
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d103      	bne.n	8005918 <xQueueReceive+0x11c>
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800591e:	b25b      	sxtb	r3, r3
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d103      	bne.n	800592e <xQueueReceive+0x132>
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800592e:	f001 fd2b 	bl	8007388 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005932:	1d3a      	adds	r2, r7, #4
 8005934:	f107 0310 	add.w	r3, r7, #16
 8005938:	4611      	mov	r1, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fe70 	bl	8006620 <xTaskCheckForTimeOut>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d123      	bne.n	800598e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005948:	f000 f916 	bl	8005b78 <prvIsQueueEmpty>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	3324      	adds	r3, #36	; 0x24
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fd9a 	bl	8006494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005962:	f000 f8b7 	bl	8005ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005966:	f000 fbd5 	bl	8006114 <xTaskResumeAll>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d189      	bne.n	8005884 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <xQueueReceive+0x1b4>)
 8005972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	e780      	b.n	8005884 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005984:	f000 f8a6 	bl	8005ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005988:	f000 fbc4 	bl	8006114 <xTaskResumeAll>
 800598c:	e77a      	b.n	8005884 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800598e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005990:	f000 f8a0 	bl	8005ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005994:	f000 fbbe 	bl	8006114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599a:	f000 f8ed 	bl	8005b78 <prvIsQueueEmpty>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f43f af6f 	beq.w	8005884 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3730      	adds	r7, #48	; 0x30
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d14d      	bne.n	8005a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 ff7a 	bl	80068d8 <xTaskPriorityDisinherit>
 80059e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	e043      	b.n	8005a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d119      	bne.n	8005a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6858      	ldr	r0, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	461a      	mov	r2, r3
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	f001 ffa8 	bl	8007954 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d32b      	bcc.n	8005a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	e026      	b.n	8005a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68d8      	ldr	r0, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	461a      	mov	r2, r3
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	f001 ff8e 	bl	8007954 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	425b      	negs	r3, r3
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d207      	bcs.n	8005a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	441a      	add	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d105      	bne.n	8005a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a7e:	697b      	ldr	r3, [r7, #20]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	441a      	add	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d303      	bcc.n	8005abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68d9      	ldr	r1, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6838      	ldr	r0, [r7, #0]
 8005ac8:	f001 ff44 	bl	8007954 <memcpy>
	}
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005adc:	f001 fc26 	bl	800732c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae8:	e011      	b.n	8005b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3324      	adds	r3, #36	; 0x24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fd1a 	bl	8006530 <xTaskRemoveFromEventList>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b02:	f000 fded 	bl	80066e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dce9      	bgt.n	8005aea <prvUnlockQueue+0x16>
 8005b16:	e000      	b.n	8005b1a <prvUnlockQueue+0x46>
					break;
 8005b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	22ff      	movs	r2, #255	; 0xff
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b22:	f001 fc31 	bl	8007388 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b26:	f001 fc01 	bl	800732c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b32:	e011      	b.n	8005b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3310      	adds	r3, #16
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fcf5 	bl	8006530 <xTaskRemoveFromEventList>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b4c:	f000 fdc8 	bl	80066e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dce9      	bgt.n	8005b34 <prvUnlockQueue+0x60>
 8005b60:	e000      	b.n	8005b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	22ff      	movs	r2, #255	; 0xff
 8005b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b6c:	f001 fc0c 	bl	8007388 <vPortExitCritical>
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b80:	f001 fbd4 	bl	800732c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e001      	b.n	8005b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b96:	f001 fbf7 	bl	8007388 <vPortExitCritical>

	return xReturn;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bac:	f001 fbbe 	bl	800732c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d102      	bne.n	8005bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e001      	b.n	8005bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bc6:	f001 fbdf 	bl	8007388 <vPortExitCritical>

	return xReturn;
 8005bca:	68fb      	ldr	r3, [r7, #12]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e014      	b.n	8005c0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005be4:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <vQueueAddToRegistry+0x4c>)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bf0:	490b      	ldr	r1, [pc, #44]	; (8005c20 <vQueueAddToRegistry+0x4c>)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <vQueueAddToRegistry+0x4c>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c06:	e005      	b.n	8005c14 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b07      	cmp	r3, #7
 8005c12:	d9e7      	bls.n	8005be4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20001a48 	.word	0x20001a48

08005c24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c34:	f001 fb7a 	bl	800732c <vPortEnterCritical>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d103      	bne.n	8005c4e <vQueueWaitForMessageRestricted+0x2a>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d103      	bne.n	8005c64 <vQueueWaitForMessageRestricted+0x40>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c64:	f001 fb90 	bl	8007388 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fc2f 	bl	80064dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c7e:	6978      	ldr	r0, [r7, #20]
 8005c80:	f7ff ff28 	bl	8005ad4 <prvUnlockQueue>
	}
 8005c84:	bf00      	nop
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08e      	sub	sp, #56	; 0x38
 8005c90:	af04      	add	r7, sp, #16
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <xTaskCreateStatic+0x28>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	e7fe      	b.n	8005cb2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <xTaskCreateStatic+0x42>
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e7fe      	b.n	8005ccc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cce:	235c      	movs	r3, #92	; 0x5c
 8005cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b5c      	cmp	r3, #92	; 0x5c
 8005cd6:	d009      	beq.n	8005cec <xTaskCreateStatic+0x60>
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e7fe      	b.n	8005cea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01e      	beq.n	8005d32 <xTaskCreateStatic+0xa6>
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01b      	beq.n	8005d32 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9303      	str	r3, [sp, #12]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	9302      	str	r3, [sp, #8]
 8005d14:	f107 0314 	add.w	r3, r7, #20
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f850 	bl	8005dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d2c:	f000 f8dc 	bl	8005ee8 <prvAddNewTaskToReadyList>
 8005d30:	e001      	b.n	8005d36 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d36:	697b      	ldr	r3, [r7, #20]
	}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3728      	adds	r7, #40	; 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08c      	sub	sp, #48	; 0x30
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fc03 	bl	8007560 <pvPortMalloc>
 8005d5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d62:	205c      	movs	r0, #92	; 0x5c
 8005d64:	f001 fbfc 	bl	8007560 <pvPortMalloc>
 8005d68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
 8005d76:	e005      	b.n	8005d84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f001 fcb3 	bl	80076e4 <vPortFree>
 8005d7e:	e001      	b.n	8005d84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d017      	beq.n	8005dba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9303      	str	r3, [sp, #12]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f80e 	bl	8005dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dae:	69f8      	ldr	r0, [r7, #28]
 8005db0:	f000 f89a 	bl	8005ee8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005db4:	2301      	movs	r3, #1
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	e002      	b.n	8005dc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	461a      	mov	r2, r3
 8005de2:	21a5      	movs	r1, #165	; 0xa5
 8005de4:	f001 fdc1 	bl	800796a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005df2:	3b01      	subs	r3, #1
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	f023 0307 	bic.w	r3, r3, #7
 8005e00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <prvInitialiseNewTask+0x56>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e7fe      	b.n	8005e1e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01f      	beq.n	8005e66 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	e012      	b.n	8005e52 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	7819      	ldrb	r1, [r3, #0]
 8005e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3334      	adds	r3, #52	; 0x34
 8005e3c:	460a      	mov	r2, r1
 8005e3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d006      	beq.n	8005e5a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	2b0f      	cmp	r3, #15
 8005e56:	d9e9      	bls.n	8005e2c <prvInitialiseNewTask+0x62>
 8005e58:	e000      	b.n	8005e5c <prvInitialiseNewTask+0x92>
			{
				break;
 8005e5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e64:	e003      	b.n	8005e6e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	2b37      	cmp	r3, #55	; 0x37
 8005e72:	d901      	bls.n	8005e78 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e74:	2337      	movs	r3, #55	; 0x37
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	2200      	movs	r2, #0
 8005e88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff f994 	bl	80051bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff f98f 	bl	80051bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	69b8      	ldr	r0, [r7, #24]
 8005ec8:	f001 f90c 	bl	80070e4 <pxPortInitialiseStack>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ede:	bf00      	nop
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ef0:	f001 fa1c 	bl	800732c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <prvAddNewTaskToReadyList+0xc4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	4a2c      	ldr	r2, [pc, #176]	; (8005fac <prvAddNewTaskToReadyList+0xc4>)
 8005efc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005efe:	4b2c      	ldr	r3, [pc, #176]	; (8005fb0 <prvAddNewTaskToReadyList+0xc8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f06:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <prvAddNewTaskToReadyList+0xc8>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f0c:	4b27      	ldr	r3, [pc, #156]	; (8005fac <prvAddNewTaskToReadyList+0xc4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d110      	bne.n	8005f36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f14:	f000 fc08 	bl	8006728 <prvInitialiseTaskLists>
 8005f18:	e00d      	b.n	8005f36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f1a:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <prvAddNewTaskToReadyList+0xcc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f22:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <prvAddNewTaskToReadyList+0xc8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d802      	bhi.n	8005f36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f30:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <prvAddNewTaskToReadyList+0xc8>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f36:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <prvAddNewTaskToReadyList+0xd0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a1e      	ldr	r2, [pc, #120]	; (8005fb8 <prvAddNewTaskToReadyList+0xd0>)
 8005f3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f40:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <prvAddNewTaskToReadyList+0xd0>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <prvAddNewTaskToReadyList+0xd4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <prvAddNewTaskToReadyList+0x74>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <prvAddNewTaskToReadyList+0xd4>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <prvAddNewTaskToReadyList+0xd8>)
 8005f6a:	441a      	add	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f7ff f92f 	bl	80051d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f78:	f001 fa06 	bl	8007388 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <prvAddNewTaskToReadyList+0xcc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvAddNewTaskToReadyList+0xc8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d207      	bcs.n	8005fa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <prvAddNewTaskToReadyList+0xdc>)
 8005f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000bbc 	.word	0x20000bbc
 8005fb0:	200006e8 	.word	0x200006e8
 8005fb4:	20000bc8 	.word	0x20000bc8
 8005fb8:	20000bd8 	.word	0x20000bd8
 8005fbc:	20000bc4 	.word	0x20000bc4
 8005fc0:	200006ec 	.word	0x200006ec
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <vTaskDelay+0x60>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <vTaskDelay+0x2e>
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	e7fe      	b.n	8005ff4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005ff6:	f000 f87f 	bl	80060f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fcd7 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006002:	f000 f887 	bl	8006114 <xTaskResumeAll>
 8006006:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <vTaskDelay+0x64>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000be4 	.word	0x20000be4
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800603a:	2300      	movs	r3, #0
 800603c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800603e:	463a      	mov	r2, r7
 8006040:	1d39      	adds	r1, r7, #4
 8006042:	f107 0308 	add.w	r3, r7, #8
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff f864 	bl	8005114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	9202      	str	r2, [sp, #8]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	2300      	movs	r3, #0
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	2300      	movs	r3, #0
 800605c:	460a      	mov	r2, r1
 800605e:	4920      	ldr	r1, [pc, #128]	; (80060e0 <vTaskStartScheduler+0xb0>)
 8006060:	4820      	ldr	r0, [pc, #128]	; (80060e4 <vTaskStartScheduler+0xb4>)
 8006062:	f7ff fe13 	bl	8005c8c <xTaskCreateStatic>
 8006066:	4602      	mov	r2, r0
 8006068:	4b1f      	ldr	r3, [pc, #124]	; (80060e8 <vTaskStartScheduler+0xb8>)
 800606a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800606c:	4b1e      	ldr	r3, [pc, #120]	; (80060e8 <vTaskStartScheduler+0xb8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e001      	b.n	800607e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d102      	bne.n	800608a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006084:	f000 fce8 	bl	8006a58 <xTimerCreateTimerTask>
 8006088:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d115      	bne.n	80060bc <vTaskStartScheduler+0x8c>
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <vTaskStartScheduler+0xbc>)
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295
 80060a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060aa:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <vTaskStartScheduler+0xc0>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060b0:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <vTaskStartScheduler+0xc4>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060b6:	f001 f89b 	bl	80071f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060ba:	e00d      	b.n	80060d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d109      	bne.n	80060d8 <vTaskStartScheduler+0xa8>
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e7fe      	b.n	80060d6 <vTaskStartScheduler+0xa6>
}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	08007a18 	.word	0x08007a18
 80060e4:	080066f9 	.word	0x080066f9
 80060e8:	20000be0 	.word	0x20000be0
 80060ec:	20000bdc 	.word	0x20000bdc
 80060f0:	20000bc8 	.word	0x20000bc8
 80060f4:	20000bc0 	.word	0x20000bc0

080060f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <vTaskSuspendAll+0x18>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	4a03      	ldr	r2, [pc, #12]	; (8006110 <vTaskSuspendAll+0x18>)
 8006104:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006106:	bf00      	nop
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000be4 	.word	0x20000be4

08006114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006122:	4b41      	ldr	r3, [pc, #260]	; (8006228 <xTaskResumeAll+0x114>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <xTaskResumeAll+0x2a>
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	e7fe      	b.n	800613c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800613e:	f001 f8f5 	bl	800732c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006142:	4b39      	ldr	r3, [pc, #228]	; (8006228 <xTaskResumeAll+0x114>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3b01      	subs	r3, #1
 8006148:	4a37      	ldr	r2, [pc, #220]	; (8006228 <xTaskResumeAll+0x114>)
 800614a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800614c:	4b36      	ldr	r3, [pc, #216]	; (8006228 <xTaskResumeAll+0x114>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d162      	bne.n	800621a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006154:	4b35      	ldr	r3, [pc, #212]	; (800622c <xTaskResumeAll+0x118>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d05e      	beq.n	800621a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800615c:	e02f      	b.n	80061be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800615e:	4b34      	ldr	r3, [pc, #208]	; (8006230 <xTaskResumeAll+0x11c>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3318      	adds	r3, #24
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff f890 	bl	8005290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff f88b 	bl	8005290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <xTaskResumeAll+0x120>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d903      	bls.n	800618e <xTaskResumeAll+0x7a>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <xTaskResumeAll+0x120>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a27      	ldr	r2, [pc, #156]	; (8006238 <xTaskResumeAll+0x124>)
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7ff f816 	bl	80051d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4b23      	ldr	r3, [pc, #140]	; (800623c <xTaskResumeAll+0x128>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <xTaskResumeAll+0x12c>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061be:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <xTaskResumeAll+0x11c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1cb      	bne.n	800615e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061cc:	f000 fb46 	bl	800685c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80061d0:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <xTaskResumeAll+0x130>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d010      	beq.n	80061fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061dc:	f000 f846 	bl	800626c <xTaskIncrementTick>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <xTaskResumeAll+0x12c>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f1      	bne.n	80061dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <xTaskResumeAll+0x130>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <xTaskResumeAll+0x12c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006206:	2301      	movs	r3, #1
 8006208:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <xTaskResumeAll+0x134>)
 800620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800621a:	f001 f8b5 	bl	8007388 <vPortExitCritical>

	return xAlreadyYielded;
 800621e:	68bb      	ldr	r3, [r7, #8]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000be4 	.word	0x20000be4
 800622c:	20000bbc 	.word	0x20000bbc
 8006230:	20000b7c 	.word	0x20000b7c
 8006234:	20000bc4 	.word	0x20000bc4
 8006238:	200006ec 	.word	0x200006ec
 800623c:	200006e8 	.word	0x200006e8
 8006240:	20000bd0 	.word	0x20000bd0
 8006244:	20000bcc 	.word	0x20000bcc
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <xTaskGetTickCount+0x1c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006258:	687b      	ldr	r3, [r7, #4]
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000bc0 	.word	0x20000bc0

0800626c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006276:	4b4e      	ldr	r3, [pc, #312]	; (80063b0 <xTaskIncrementTick+0x144>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 8088 	bne.w	8006390 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006280:	4b4c      	ldr	r3, [pc, #304]	; (80063b4 <xTaskIncrementTick+0x148>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006288:	4a4a      	ldr	r2, [pc, #296]	; (80063b4 <xTaskIncrementTick+0x148>)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11f      	bne.n	80062d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006294:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <xTaskIncrementTick+0x14c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <xTaskIncrementTick+0x46>
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	e7fe      	b.n	80062b0 <xTaskIncrementTick+0x44>
 80062b2:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <xTaskIncrementTick+0x14c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	4b40      	ldr	r3, [pc, #256]	; (80063bc <xTaskIncrementTick+0x150>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3e      	ldr	r2, [pc, #248]	; (80063b8 <xTaskIncrementTick+0x14c>)
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4a3e      	ldr	r2, [pc, #248]	; (80063bc <xTaskIncrementTick+0x150>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <xTaskIncrementTick+0x154>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	4a3c      	ldr	r2, [pc, #240]	; (80063c0 <xTaskIncrementTick+0x154>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	f000 fac4 	bl	800685c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <xTaskIncrementTick+0x158>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d349      	bcc.n	8006372 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062de:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <xTaskIncrementTick+0x14c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e8:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <xTaskIncrementTick+0x158>)
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	601a      	str	r2, [r3, #0]
					break;
 80062f0:	e03f      	b.n	8006372 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <xTaskIncrementTick+0x14c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	d203      	bcs.n	8006312 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800630a:	4a2e      	ldr	r2, [pc, #184]	; (80063c4 <xTaskIncrementTick+0x158>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006310:	e02f      	b.n	8006372 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	3304      	adds	r3, #4
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe ffba 	bl	8005290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	3318      	adds	r3, #24
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe ffb1 	bl	8005290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <xTaskIncrementTick+0x15c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d903      	bls.n	8006342 <xTaskIncrementTick+0xd6>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <xTaskIncrementTick+0x15c>)
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <xTaskIncrementTick+0x160>)
 8006350:	441a      	add	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fe ff3c 	bl	80051d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <xTaskIncrementTick+0x164>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	429a      	cmp	r2, r3
 800636a:	d3b8      	bcc.n	80062de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800636c:	2301      	movs	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006370:	e7b5      	b.n	80062de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006372:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <xTaskIncrementTick+0x164>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4914      	ldr	r1, [pc, #80]	; (80063cc <xTaskIncrementTick+0x160>)
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d907      	bls.n	800639a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800638a:	2301      	movs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e004      	b.n	800639a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006390:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <xTaskIncrementTick+0x168>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a0f      	ldr	r2, [pc, #60]	; (80063d4 <xTaskIncrementTick+0x168>)
 8006398:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <xTaskIncrementTick+0x16c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80063a2:	2301      	movs	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063a6:	697b      	ldr	r3, [r7, #20]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20000be4 	.word	0x20000be4
 80063b4:	20000bc0 	.word	0x20000bc0
 80063b8:	20000b74 	.word	0x20000b74
 80063bc:	20000b78 	.word	0x20000b78
 80063c0:	20000bd4 	.word	0x20000bd4
 80063c4:	20000bdc 	.word	0x20000bdc
 80063c8:	20000bc4 	.word	0x20000bc4
 80063cc:	200006ec 	.word	0x200006ec
 80063d0:	200006e8 	.word	0x200006e8
 80063d4:	20000bcc 	.word	0x20000bcc
 80063d8:	20000bd0 	.word	0x20000bd0

080063dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063e2:	4b27      	ldr	r3, [pc, #156]	; (8006480 <vTaskSwitchContext+0xa4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ea:	4b26      	ldr	r3, [pc, #152]	; (8006484 <vTaskSwitchContext+0xa8>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063f0:	e040      	b.n	8006474 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80063f2:	4b24      	ldr	r3, [pc, #144]	; (8006484 <vTaskSwitchContext+0xa8>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f8:	4b23      	ldr	r3, [pc, #140]	; (8006488 <vTaskSwitchContext+0xac>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e00f      	b.n	8006420 <vTaskSwitchContext+0x44>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <vTaskSwitchContext+0x3e>
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e7fe      	b.n	8006418 <vTaskSwitchContext+0x3c>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b01      	subs	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	491a      	ldr	r1, [pc, #104]	; (800648c <vTaskSwitchContext+0xb0>)
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0e5      	beq.n	8006400 <vTaskSwitchContext+0x24>
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <vTaskSwitchContext+0xb0>)
 8006440:	4413      	add	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	3308      	adds	r3, #8
 8006456:	429a      	cmp	r2, r3
 8006458:	d104      	bne.n	8006464 <vTaskSwitchContext+0x88>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	605a      	str	r2, [r3, #4]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	4a09      	ldr	r2, [pc, #36]	; (8006490 <vTaskSwitchContext+0xb4>)
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4a06      	ldr	r2, [pc, #24]	; (8006488 <vTaskSwitchContext+0xac>)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6013      	str	r3, [r2, #0]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000be4 	.word	0x20000be4
 8006484:	20000bd0 	.word	0x20000bd0
 8006488:	20000bc4 	.word	0x20000bc4
 800648c:	200006ec 	.word	0x200006ec
 8006490:	200006e8 	.word	0x200006e8

08006494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <vTaskPlaceOnEventList+0x24>
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	e7fe      	b.n	80064b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <vTaskPlaceOnEventList+0x44>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3318      	adds	r3, #24
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fe feac 	bl	800521e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064c6:	2101      	movs	r1, #1
 80064c8:	6838      	ldr	r0, [r7, #0]
 80064ca:	f000 fa71 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
}
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200006e8 	.word	0x200006e8

080064dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <vTaskPlaceOnEventListRestricted+0x26>
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e7fe      	b.n	8006500 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <vTaskPlaceOnEventListRestricted+0x50>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3318      	adds	r3, #24
 8006508:	4619      	mov	r1, r3
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7fe fe63 	bl	80051d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	68b8      	ldr	r0, [r7, #8]
 8006520:	f000 fa46 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
	}
 8006524:	bf00      	nop
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	200006e8 	.word	0x200006e8

08006530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <xTaskRemoveFromEventList+0x2a>
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e7fe      	b.n	8006558 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3318      	adds	r3, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fe96 	bl	8005290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006564:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <xTaskRemoveFromEventList+0xac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11d      	bne.n	80065a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fe8d 	bl	8005290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657a:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <xTaskRemoveFromEventList+0xb0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d903      	bls.n	800658a <xTaskRemoveFromEventList+0x5a>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <xTaskRemoveFromEventList+0xb0>)
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4a13      	ldr	r2, [pc, #76]	; (80065e4 <xTaskRemoveFromEventList+0xb4>)
 8006598:	441a      	add	r2, r3
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe fe18 	bl	80051d6 <vListInsertEnd>
 80065a6:	e005      	b.n	80065b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3318      	adds	r3, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	480e      	ldr	r0, [pc, #56]	; (80065e8 <xTaskRemoveFromEventList+0xb8>)
 80065b0:	f7fe fe11 	bl	80051d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <xTaskRemoveFromEventList+0xbc>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d905      	bls.n	80065ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <xTaskRemoveFromEventList+0xc0>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	e001      	b.n	80065d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065d2:	697b      	ldr	r3, [r7, #20]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000be4 	.word	0x20000be4
 80065e0:	20000bc4 	.word	0x20000bc4
 80065e4:	200006ec 	.word	0x200006ec
 80065e8:	20000b7c 	.word	0x20000b7c
 80065ec:	200006e8 	.word	0x200006e8
 80065f0:	20000bd0 	.word	0x20000bd0

080065f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <vTaskInternalSetTimeOutState+0x24>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <vTaskInternalSetTimeOutState+0x28>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	605a      	str	r2, [r3, #4]
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20000bd4 	.word	0x20000bd4
 800661c:	20000bc0 	.word	0x20000bc0

08006620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <xTaskCheckForTimeOut+0x24>
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e7fe      	b.n	8006642 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <xTaskCheckForTimeOut+0x3e>
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e7fe      	b.n	800665c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800665e:	f000 fe65 	bl	800732c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <xTaskCheckForTimeOut+0xb8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d102      	bne.n	8006682 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	e023      	b.n	80066ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <xTaskCheckForTimeOut+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d007      	beq.n	800669e <xTaskCheckForTimeOut+0x7e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	e015      	b.n	80066ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d20b      	bcs.n	80066c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff9d 	bl	80065f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e004      	b.n	80066ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066ca:	f000 fe5d 	bl	8007388 <vPortExitCritical>

	return xReturn;
 80066ce:	69fb      	ldr	r3, [r7, #28]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000bc0 	.word	0x20000bc0
 80066dc:	20000bd4 	.word	0x20000bd4

080066e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <vTaskMissedYield+0x14>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
}
 80066ea:	bf00      	nop
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	20000bd0 	.word	0x20000bd0

080066f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006700:	f000 f852 	bl	80067a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <prvIdleTask+0x28>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d9f9      	bls.n	8006700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <prvIdleTask+0x2c>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800671c:	e7f0      	b.n	8006700 <prvIdleTask+0x8>
 800671e:	bf00      	nop
 8006720:	200006ec 	.word	0x200006ec
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
 8006732:	e00c      	b.n	800674e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4a12      	ldr	r2, [pc, #72]	; (8006788 <prvInitialiseTaskLists+0x60>)
 8006740:	4413      	add	r3, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fd1a 	bl	800517c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3301      	adds	r3, #1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b37      	cmp	r3, #55	; 0x37
 8006752:	d9ef      	bls.n	8006734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006754:	480d      	ldr	r0, [pc, #52]	; (800678c <prvInitialiseTaskLists+0x64>)
 8006756:	f7fe fd11 	bl	800517c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800675a:	480d      	ldr	r0, [pc, #52]	; (8006790 <prvInitialiseTaskLists+0x68>)
 800675c:	f7fe fd0e 	bl	800517c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006760:	480c      	ldr	r0, [pc, #48]	; (8006794 <prvInitialiseTaskLists+0x6c>)
 8006762:	f7fe fd0b 	bl	800517c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006766:	480c      	ldr	r0, [pc, #48]	; (8006798 <prvInitialiseTaskLists+0x70>)
 8006768:	f7fe fd08 	bl	800517c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800676c:	480b      	ldr	r0, [pc, #44]	; (800679c <prvInitialiseTaskLists+0x74>)
 800676e:	f7fe fd05 	bl	800517c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <prvInitialiseTaskLists+0x78>)
 8006774:	4a05      	ldr	r2, [pc, #20]	; (800678c <prvInitialiseTaskLists+0x64>)
 8006776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <prvInitialiseTaskLists+0x7c>)
 800677a:	4a05      	ldr	r2, [pc, #20]	; (8006790 <prvInitialiseTaskLists+0x68>)
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200006ec 	.word	0x200006ec
 800678c:	20000b4c 	.word	0x20000b4c
 8006790:	20000b60 	.word	0x20000b60
 8006794:	20000b7c 	.word	0x20000b7c
 8006798:	20000b90 	.word	0x20000b90
 800679c:	20000ba8 	.word	0x20000ba8
 80067a0:	20000b74 	.word	0x20000b74
 80067a4:	20000b78 	.word	0x20000b78

080067a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ae:	e019      	b.n	80067e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067b0:	f000 fdbc 	bl	800732c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b4:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <prvCheckTasksWaitingTermination+0x4c>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe fd65 	bl	8005290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <prvCheckTasksWaitingTermination+0x50>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <prvCheckTasksWaitingTermination+0x50>)
 80067ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <prvCheckTasksWaitingTermination+0x54>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	4a09      	ldr	r2, [pc, #36]	; (80067fc <prvCheckTasksWaitingTermination+0x54>)
 80067d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067da:	f000 fdd5 	bl	8007388 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f80e 	bl	8006800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <prvCheckTasksWaitingTermination+0x54>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e1      	bne.n	80067b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000b90 	.word	0x20000b90
 80067f8:	20000bbc 	.word	0x20000bbc
 80067fc:	20000ba4 	.word	0x20000ba4

08006800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800680e:	2b00      	cmp	r3, #0
 8006810:	d108      	bne.n	8006824 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	4618      	mov	r0, r3
 8006818:	f000 ff64 	bl	80076e4 <vPortFree>
				vPortFree( pxTCB );
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 ff61 	bl	80076e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006822:	e017      	b.n	8006854 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800682a:	2b01      	cmp	r3, #1
 800682c:	d103      	bne.n	8006836 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 ff58 	bl	80076e4 <vPortFree>
	}
 8006834:	e00e      	b.n	8006854 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800683c:	2b02      	cmp	r3, #2
 800683e:	d009      	beq.n	8006854 <prvDeleteTCB+0x54>
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e7fe      	b.n	8006852 <prvDeleteTCB+0x52>
	}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006862:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <prvResetNextTaskUnblockTime+0x38>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <prvResetNextTaskUnblockTime+0x3c>)
 800686e:	f04f 32ff 	mov.w	r2, #4294967295
 8006872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006874:	e008      	b.n	8006888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <prvResetNextTaskUnblockTime+0x38>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4a04      	ldr	r2, [pc, #16]	; (8006898 <prvResetNextTaskUnblockTime+0x3c>)
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000b74 	.word	0x20000b74
 8006898:	20000bdc 	.word	0x20000bdc

0800689c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068a2:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <xTaskGetSchedulerState+0x34>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068aa:	2301      	movs	r3, #1
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	e008      	b.n	80068c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b0:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <xTaskGetSchedulerState+0x38>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068b8:	2302      	movs	r3, #2
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	e001      	b.n	80068c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068be:	2300      	movs	r3, #0
 80068c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068c2:	687b      	ldr	r3, [r7, #4]
	}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	20000bc8 	.word	0x20000bc8
 80068d4:	20000be4 	.word	0x20000be4

080068d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d054      	beq.n	8006998 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068ee:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <xTaskPriorityDisinherit+0xcc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d009      	beq.n	800690c <xTaskPriorityDisinherit+0x34>
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e7fe      	b.n	800690a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <xTaskPriorityDisinherit+0x50>
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	e7fe      	b.n	8006926 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	429a      	cmp	r2, r3
 800693c:	d02c      	beq.n	8006998 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006942:	2b00      	cmp	r3, #0
 8006944:	d128      	bne.n	8006998 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fca0 	bl	8005290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <xTaskPriorityDisinherit+0xd0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d903      	bls.n	8006978 <xTaskPriorityDisinherit+0xa0>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <xTaskPriorityDisinherit+0xd0>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4a09      	ldr	r2, [pc, #36]	; (80069ac <xTaskPriorityDisinherit+0xd4>)
 8006986:	441a      	add	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fe fc21 	bl	80051d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006998:	697b      	ldr	r3, [r7, #20]
	}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200006e8 	.word	0x200006e8
 80069a8:	20000bc4 	.word	0x20000bc4
 80069ac:	200006ec 	.word	0x200006ec

080069b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x90>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069c0:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fc62 	bl	8005290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d10a      	bne.n	80069ea <prvAddCurrentTaskToDelayedList+0x3a>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x98>)
 80069e4:	f7fe fbf7 	bl	80051d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069e8:	e026      	b.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d209      	bcs.n	8006a16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7fe fc05 	bl	800521e <vListInsert>
}
 8006a14:	e010      	b.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f7fe fbfb 	bl	800521e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d202      	bcs.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a32:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6013      	str	r3, [r2, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000bc0 	.word	0x20000bc0
 8006a44:	200006e8 	.word	0x200006e8
 8006a48:	20000ba8 	.word	0x20000ba8
 8006a4c:	20000b78 	.word	0x20000b78
 8006a50:	20000b74 	.word	0x20000b74
 8006a54:	20000bdc 	.word	0x20000bdc

08006a58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a62:	f000 faff 	bl	8007064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTimerCreateTimerTask+0x80>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d021      	beq.n	8006ab2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a76:	1d3a      	adds	r2, r7, #4
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	f107 030c 	add.w	r3, r7, #12
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fb61 	bl	8005148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	2302      	movs	r3, #2
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	460a      	mov	r2, r1
 8006a98:	4910      	ldr	r1, [pc, #64]	; (8006adc <xTimerCreateTimerTask+0x84>)
 8006a9a:	4811      	ldr	r0, [pc, #68]	; (8006ae0 <xTimerCreateTimerTask+0x88>)
 8006a9c:	f7ff f8f6 	bl	8005c8c <xTaskCreateStatic>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <xTimerCreateTimerTask+0x8c>)
 8006aa4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <xTimerCreateTimerTask+0x8c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <xTimerCreateTimerTask+0x74>
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	e7fe      	b.n	8006aca <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006acc:	697b      	ldr	r3, [r7, #20]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000c18 	.word	0x20000c18
 8006adc:	08007a20 	.word	0x08007a20
 8006ae0:	08006c19 	.word	0x08006c19
 8006ae4:	20000c1c 	.word	0x20000c1c

08006ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d109      	bne.n	8006b14 <xTimerGenericCommand+0x2c>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	e7fe      	b.n	8006b12 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b14:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <xTimerGenericCommand+0x94>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02a      	beq.n	8006b72 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	dc18      	bgt.n	8006b60 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b2e:	f7ff feb5 	bl	800689c <xTaskGetSchedulerState>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d109      	bne.n	8006b4c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b38:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <xTimerGenericCommand+0x94>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	f107 0110 	add.w	r1, r7, #16
 8006b40:	2300      	movs	r3, #0
 8006b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b44:	f7fe fccc 	bl	80054e0 <xQueueGenericSend>
 8006b48:	6278      	str	r0, [r7, #36]	; 0x24
 8006b4a:	e012      	b.n	8006b72 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <xTimerGenericCommand+0x94>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	f107 0110 	add.w	r1, r7, #16
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	f7fe fcc2 	bl	80054e0 <xQueueGenericSend>
 8006b5c:	6278      	str	r0, [r7, #36]	; 0x24
 8006b5e:	e008      	b.n	8006b72 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <xTimerGenericCommand+0x94>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	f107 0110 	add.w	r1, r7, #16
 8006b68:	2300      	movs	r3, #0
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	f7fe fdb2 	bl	80056d4 <xQueueGenericSendFromISR>
 8006b70:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000c18 	.word	0x20000c18

08006b80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8a:	4b22      	ldr	r3, [pc, #136]	; (8006c14 <prvProcessExpiredTimer+0x94>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fb79 	bl	8005290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d021      	beq.n	8006bf0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	18d1      	adds	r1, r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	6978      	ldr	r0, [r7, #20]
 8006bba:	f000 f8d1 	bl	8006d60 <prvInsertTimerInActiveList>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01e      	beq.n	8006c02 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f7ff ff8a 	bl	8006ae8 <xTimerGenericCommand>
 8006bd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d112      	bne.n	8006c02 <prvProcessExpiredTimer+0x82>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e7fe      	b.n	8006bee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	6978      	ldr	r0, [r7, #20]
 8006c08:	4798      	blx	r3
}
 8006c0a:	bf00      	nop
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000c10 	.word	0x20000c10

08006c18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f857 	bl	8006cd8 <prvGetNextExpireTime>
 8006c2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f803 	bl	8006c3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c36:	f000 f8d5 	bl	8006de4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c3a:	e7f1      	b.n	8006c20 <prvTimerTask+0x8>

08006c3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c46:	f7ff fa57 	bl	80060f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c4a:	f107 0308 	add.w	r3, r7, #8
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f866 	bl	8006d20 <prvSampleTimeNow>
 8006c54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d130      	bne.n	8006cbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <prvProcessTimerOrBlockTask+0x3c>
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d806      	bhi.n	8006c78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c6a:	f7ff fa53 	bl	8006114 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff ff85 	bl	8006b80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c76:	e024      	b.n	8006cc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <prvProcessTimerOrBlockTask+0x90>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <prvProcessTimerOrBlockTask+0x50>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <prvProcessTimerOrBlockTask+0x52>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <prvProcessTimerOrBlockTask+0x94>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f7fe ffc1 	bl	8005c24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ca2:	f7ff fa37 	bl	8006114 <xTaskResumeAll>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvProcessTimerOrBlockTask+0x98>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
}
 8006cbc:	e001      	b.n	8006cc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cbe:	f7ff fa29 	bl	8006114 <xTaskResumeAll>
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000c14 	.word	0x20000c14
 8006cd0:	20000c18 	.word	0x20000c18
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <prvGetNextExpireTime+0x44>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <prvGetNextExpireTime+0x16>
 8006cea:	2201      	movs	r2, #1
 8006cec:	e000      	b.n	8006cf0 <prvGetNextExpireTime+0x18>
 8006cee:	2200      	movs	r2, #0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <prvGetNextExpireTime+0x44>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e001      	b.n	8006d0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000c10 	.word	0x20000c10

08006d20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d28:	f7ff fa90 	bl	800624c <xTaskGetTickCount>
 8006d2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <prvSampleTimeNow+0x3c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d205      	bcs.n	8006d44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d38:	f000 f930 	bl	8006f9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d4a:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <prvSampleTimeNow+0x3c>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000c20 	.word	0x20000c20

08006d60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d812      	bhi.n	8006dac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d302      	bcc.n	8006d9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	e01b      	b.n	8006dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d9a:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <prvInsertTimerInActiveList+0x7c>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fe fa3a 	bl	800521e <vListInsert>
 8006daa:	e012      	b.n	8006dd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d206      	bcs.n	8006dc2 <prvInsertTimerInActiveList+0x62>
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e007      	b.n	8006dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dc2:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <prvInsertTimerInActiveList+0x80>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7fe fa26 	bl	800521e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dd2:	697b      	ldr	r3, [r7, #20]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20000c14 	.word	0x20000c14
 8006de0:	20000c10 	.word	0x20000c10

08006de4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08e      	sub	sp, #56	; 0x38
 8006de8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dea:	e0c6      	b.n	8006f7a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da17      	bge.n	8006e22 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	3304      	adds	r3, #4
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <prvProcessReceivedCommands+0x2e>
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e7fe      	b.n	8006e10 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e18:	6850      	ldr	r0, [r2, #4]
 8006e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1c:	6892      	ldr	r2, [r2, #8]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f2c0 80a7 	blt.w	8006f78 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fa28 	bl	8005290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e40:	463b      	mov	r3, r7
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff ff6c 	bl	8006d20 <prvSampleTimeNow>
 8006e48:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b09      	cmp	r3, #9
 8006e4e:	f200 8094 	bhi.w	8006f7a <prvProcessReceivedCommands+0x196>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <prvProcessReceivedCommands+0x74>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e81 	.word	0x08006e81
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006e81 	.word	0x08006e81
 8006e64:	08006ef3 	.word	0x08006ef3
 8006e68:	08006f07 	.word	0x08006f07
 8006e6c:	08006f4f 	.word	0x08006f4f
 8006e70:	08006e81 	.word	0x08006e81
 8006e74:	08006e81 	.word	0x08006e81
 8006e78:	08006ef3 	.word	0x08006ef3
 8006e7c:	08006f07 	.word	0x08006f07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	18d1      	adds	r1, r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea0:	f7ff ff5e 	bl	8006d60 <prvInsertTimerInActiveList>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d067      	beq.n	8006f7a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d05c      	beq.n	8006f7a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	441a      	add	r2, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2100      	movs	r1, #0
 8006ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed2:	f7ff fe09 	bl	8006ae8 <xTimerGenericCommand>
 8006ed6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d14d      	bne.n	8006f7a <prvProcessReceivedCommands+0x196>
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	e7fe      	b.n	8006ef0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f04:	e039      	b.n	8006f7a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <prvProcessReceivedCommands+0x156>
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e7fe      	b.n	8006f38 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	699a      	ldr	r2, [r3, #24]
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	18d1      	adds	r1, r2, r3
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f48:	f7ff ff0a 	bl	8006d60 <prvInsertTimerInActiveList>
					break;
 8006f4c:	e015      	b.n	8006f7a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5e:	f000 fbc1 	bl	80076e4 <vPortFree>
 8006f62:	e00a      	b.n	8006f7a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f6a:	f023 0301 	bic.w	r3, r3, #1
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f76:	e000      	b.n	8006f7a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <prvProcessReceivedCommands+0x1b4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	1d39      	adds	r1, r7, #4
 8006f80:	2200      	movs	r2, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fc3a 	bl	80057fc <xQueueReceive>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f47f af2e 	bne.w	8006dec <prvProcessReceivedCommands+0x8>
	}
}
 8006f90:	bf00      	nop
 8006f92:	3730      	adds	r7, #48	; 0x30
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	20000c18 	.word	0x20000c18

08006f9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fa2:	e047      	b.n	8007034 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fa4:	4b2d      	ldr	r3, [pc, #180]	; (800705c <prvSwitchTimerLists+0xc0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fae:	4b2b      	ldr	r3, [pc, #172]	; (800705c <prvSwitchTimerLists+0xc0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe f967 	bl	8005290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d02d      	beq.n	8007034 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4413      	add	r3, r2
 8006fe0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d90e      	bls.n	8007008 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ff6:	4b19      	ldr	r3, [pc, #100]	; (800705c <prvSwitchTimerLists+0xc0>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7fe f90c 	bl	800521e <vListInsert>
 8007006:	e015      	b.n	8007034 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007008:	2300      	movs	r3, #0
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	2100      	movs	r1, #0
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff fd68 	bl	8006ae8 <xTimerGenericCommand>
 8007018:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d109      	bne.n	8007034 <prvSwitchTimerLists+0x98>
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	e7fe      	b.n	8007032 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007034:	4b09      	ldr	r3, [pc, #36]	; (800705c <prvSwitchTimerLists+0xc0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1b2      	bne.n	8006fa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <prvSwitchTimerLists+0xc0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <prvSwitchTimerLists+0xc4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a04      	ldr	r2, [pc, #16]	; (800705c <prvSwitchTimerLists+0xc0>)
 800704a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800704c:	4a04      	ldr	r2, [pc, #16]	; (8007060 <prvSwitchTimerLists+0xc4>)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6013      	str	r3, [r2, #0]
}
 8007052:	bf00      	nop
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000c10 	.word	0x20000c10
 8007060:	20000c14 	.word	0x20000c14

08007064 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800706a:	f000 f95f 	bl	800732c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <prvCheckForValidListAndQueue+0x60>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d120      	bne.n	80070b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007076:	4814      	ldr	r0, [pc, #80]	; (80070c8 <prvCheckForValidListAndQueue+0x64>)
 8007078:	f7fe f880 	bl	800517c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800707c:	4813      	ldr	r0, [pc, #76]	; (80070cc <prvCheckForValidListAndQueue+0x68>)
 800707e:	f7fe f87d 	bl	800517c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007082:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <prvCheckForValidListAndQueue+0x6c>)
 8007084:	4a10      	ldr	r2, [pc, #64]	; (80070c8 <prvCheckForValidListAndQueue+0x64>)
 8007086:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007088:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <prvCheckForValidListAndQueue+0x70>)
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <prvCheckForValidListAndQueue+0x68>)
 800708c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800708e:	2300      	movs	r3, #0
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <prvCheckForValidListAndQueue+0x74>)
 8007094:	4a11      	ldr	r2, [pc, #68]	; (80070dc <prvCheckForValidListAndQueue+0x78>)
 8007096:	2110      	movs	r1, #16
 8007098:	200a      	movs	r0, #10
 800709a:	f7fe f98b 	bl	80053b4 <xQueueGenericCreateStatic>
 800709e:	4602      	mov	r2, r0
 80070a0:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <prvCheckForValidListAndQueue+0x60>)
 80070a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <prvCheckForValidListAndQueue+0x60>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <prvCheckForValidListAndQueue+0x60>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	490b      	ldr	r1, [pc, #44]	; (80070e0 <prvCheckForValidListAndQueue+0x7c>)
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fd8e 	bl	8005bd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b8:	f000 f966 	bl	8007388 <vPortExitCritical>
}
 80070bc:	bf00      	nop
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000c18 	.word	0x20000c18
 80070c8:	20000be8 	.word	0x20000be8
 80070cc:	20000bfc 	.word	0x20000bfc
 80070d0:	20000c10 	.word	0x20000c10
 80070d4:	20000c14 	.word	0x20000c14
 80070d8:	20000cc4 	.word	0x20000cc4
 80070dc:	20000c24 	.word	0x20000c24
 80070e0:	08007a28 	.word	0x08007a28

080070e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3b04      	subs	r3, #4
 80070f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3b04      	subs	r3, #4
 8007102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0201 	bic.w	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b04      	subs	r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007114:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <pxPortInitialiseStack+0x64>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b14      	subs	r3, #20
 800711e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3b04      	subs	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f06f 0202 	mvn.w	r2, #2
 8007132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3b20      	subs	r3, #32
 8007138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800713a:	68fb      	ldr	r3, [r7, #12]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	0800714d 	.word	0x0800714d

0800714c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007156:	4b11      	ldr	r3, [pc, #68]	; (800719c <prvTaskExitError+0x50>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d009      	beq.n	8007174 <prvTaskExitError+0x28>
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e7fe      	b.n	8007172 <prvTaskExitError+0x26>
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007186:	bf00      	nop
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0fc      	beq.n	8007188 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800718e:	bf00      	nop
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	2000000c 	.word	0x2000000c

080071a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <pxCurrentTCBConst2>)
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	6808      	ldr	r0, [r1, #0]
 80071a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071aa:	f380 8809 	msr	PSP, r0
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8811 	msr	BASEPRI, r0
 80071ba:	4770      	bx	lr
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst2>:
 80071c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071c8:	4808      	ldr	r0, [pc, #32]	; (80071ec <prvPortStartFirstTask+0x24>)
 80071ca:	6800      	ldr	r0, [r0, #0]
 80071cc:	6800      	ldr	r0, [r0, #0]
 80071ce:	f380 8808 	msr	MSP, r0
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8814 	msr	CONTROL, r0
 80071da:	b662      	cpsie	i
 80071dc:	b661      	cpsie	f
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	df00      	svc	0
 80071e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ea:	bf00      	nop
 80071ec:	e000ed08 	.word	0xe000ed08

080071f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071f6:	4b44      	ldr	r3, [pc, #272]	; (8007308 <xPortStartScheduler+0x118>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a44      	ldr	r2, [pc, #272]	; (800730c <xPortStartScheduler+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <xPortStartScheduler+0x24>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	e7fe      	b.n	8007212 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007214:	4b3c      	ldr	r3, [pc, #240]	; (8007308 <xPortStartScheduler+0x118>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a3d      	ldr	r2, [pc, #244]	; (8007310 <xPortStartScheduler+0x120>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d109      	bne.n	8007232 <xPortStartScheduler+0x42>
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e7fe      	b.n	8007230 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <xPortStartScheduler+0x124>)
 8007234:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	22ff      	movs	r2, #255	; 0xff
 8007242:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007254:	b2da      	uxtb	r2, r3
 8007256:	4b30      	ldr	r3, [pc, #192]	; (8007318 <xPortStartScheduler+0x128>)
 8007258:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800725a:	4b30      	ldr	r3, [pc, #192]	; (800731c <xPortStartScheduler+0x12c>)
 800725c:	2207      	movs	r2, #7
 800725e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007260:	e009      	b.n	8007276 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007262:	4b2e      	ldr	r3, [pc, #184]	; (800731c <xPortStartScheduler+0x12c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a2c      	ldr	r2, [pc, #176]	; (800731c <xPortStartScheduler+0x12c>)
 800726a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	b2db      	uxtb	r3, r3
 8007274:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d0ef      	beq.n	8007262 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007282:	4b26      	ldr	r3, [pc, #152]	; (800731c <xPortStartScheduler+0x12c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f1c3 0307 	rsb	r3, r3, #7
 800728a:	2b04      	cmp	r3, #4
 800728c:	d009      	beq.n	80072a2 <xPortStartScheduler+0xb2>
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	e7fe      	b.n	80072a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072a2:	4b1e      	ldr	r3, [pc, #120]	; (800731c <xPortStartScheduler+0x12c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <xPortStartScheduler+0x12c>)
 80072aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072ac:	4b1b      	ldr	r3, [pc, #108]	; (800731c <xPortStartScheduler+0x12c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <xPortStartScheduler+0x12c>)
 80072b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072c0:	4b17      	ldr	r3, [pc, #92]	; (8007320 <xPortStartScheduler+0x130>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <xPortStartScheduler+0x130>)
 80072c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072cc:	4b14      	ldr	r3, [pc, #80]	; (8007320 <xPortStartScheduler+0x130>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a13      	ldr	r2, [pc, #76]	; (8007320 <xPortStartScheduler+0x130>)
 80072d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072d8:	f000 f8d6 	bl	8007488 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <xPortStartScheduler+0x134>)
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072e2:	f000 f8f5 	bl	80074d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <xPortStartScheduler+0x138>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <xPortStartScheduler+0x138>)
 80072ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072f2:	f7ff ff69 	bl	80071c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072f6:	f7ff f871 	bl	80063dc <vTaskSwitchContext>
	prvTaskExitError();
 80072fa:	f7ff ff27 	bl	800714c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	e000ed00 	.word	0xe000ed00
 800730c:	410fc271 	.word	0x410fc271
 8007310:	410fc270 	.word	0x410fc270
 8007314:	e000e400 	.word	0xe000e400
 8007318:	20000d14 	.word	0x20000d14
 800731c:	20000d18 	.word	0x20000d18
 8007320:	e000ed20 	.word	0xe000ed20
 8007324:	2000000c 	.word	0x2000000c
 8007328:	e000ef34 	.word	0xe000ef34

0800732c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <vPortEnterCritical+0x54>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3301      	adds	r3, #1
 800734a:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <vPortEnterCritical+0x54>)
 800734c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <vPortEnterCritical+0x54>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10e      	bne.n	8007374 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <vPortEnterCritical+0x58>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <vPortEnterCritical+0x48>
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	e7fe      	b.n	8007372 <vPortEnterCritical+0x46>
	}
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	2000000c 	.word	0x2000000c
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <vPortExitCritical+0x4c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <vPortExitCritical+0x22>
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	e7fe      	b.n	80073a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <vPortExitCritical+0x4c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <vPortExitCritical+0x4c>)
 80073b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073b4:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <vPortExitCritical+0x4c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <vPortExitCritical+0x3e>
 80073bc:	2300      	movs	r3, #0
 80073be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2000000c 	.word	0x2000000c
	...

080073e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073e0:	f3ef 8009 	mrs	r0, PSP
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <pxCurrentTCBConst>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	f01e 0f10 	tst.w	lr, #16
 80073f0:	bf08      	it	eq
 80073f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007404:	f380 8811 	msr	BASEPRI, r0
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f7fe ffe4 	bl	80063dc <vTaskSwitchContext>
 8007414:	f04f 0000 	mov.w	r0, #0
 8007418:	f380 8811 	msr	BASEPRI, r0
 800741c:	bc09      	pop	{r0, r3}
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	6808      	ldr	r0, [r1, #0]
 8007422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007426:	f01e 0f10 	tst.w	lr, #16
 800742a:	bf08      	it	eq
 800742c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007430:	f380 8809 	msr	PSP, r0
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	f3af 8000 	nop.w

08007440 <pxCurrentTCBConst>:
 8007440:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007460:	f7fe ff04 	bl	800626c <xTaskIncrementTick>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <SysTick_Handler+0x3c>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800748c:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <vPortSetupTimerInterrupt+0x34>)
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <vPortSetupTimerInterrupt+0x38>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <vPortSetupTimerInterrupt+0x3c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <vPortSetupTimerInterrupt+0x40>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	099b      	lsrs	r3, r3, #6
 80074a4:	4a09      	ldr	r2, [pc, #36]	; (80074cc <vPortSetupTimerInterrupt+0x44>)
 80074a6:	3b01      	subs	r3, #1
 80074a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074aa:	4b04      	ldr	r3, [pc, #16]	; (80074bc <vPortSetupTimerInterrupt+0x34>)
 80074ac:	2207      	movs	r2, #7
 80074ae:	601a      	str	r2, [r3, #0]
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	e000e010 	.word	0xe000e010
 80074c0:	e000e018 	.word	0xe000e018
 80074c4:	20000000 	.word	0x20000000
 80074c8:	10624dd3 	.word	0x10624dd3
 80074cc:	e000e014 	.word	0xe000e014

080074d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074e0 <vPortEnableVFP+0x10>
 80074d4:	6801      	ldr	r1, [r0, #0]
 80074d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074da:	6001      	str	r1, [r0, #0]
 80074dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074de:	bf00      	nop
 80074e0:	e000ed88 	.word	0xe000ed88

080074e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074ea:	f3ef 8305 	mrs	r3, IPSR
 80074ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b0f      	cmp	r3, #15
 80074f4:	d913      	bls.n	800751e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <vPortValidateInterruptPriority+0x6c>)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <vPortValidateInterruptPriority+0x70>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	7afa      	ldrb	r2, [r7, #11]
 8007506:	429a      	cmp	r2, r3
 8007508:	d209      	bcs.n	800751e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	e7fe      	b.n	800751c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800751e:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <vPortValidateInterruptPriority+0x74>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007526:	4b0d      	ldr	r3, [pc, #52]	; (800755c <vPortValidateInterruptPriority+0x78>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d909      	bls.n	8007542 <vPortValidateInterruptPriority+0x5e>
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	e7fe      	b.n	8007540 <vPortValidateInterruptPriority+0x5c>
	}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	e000e3f0 	.word	0xe000e3f0
 8007554:	20000d14 	.word	0x20000d14
 8007558:	e000ed0c 	.word	0xe000ed0c
 800755c:	20000d18 	.word	0x20000d18

08007560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	; 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800756c:	f7fe fdc4 	bl	80060f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007570:	4b57      	ldr	r3, [pc, #348]	; (80076d0 <pvPortMalloc+0x170>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007578:	f000 f90c 	bl	8007794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800757c:	4b55      	ldr	r3, [pc, #340]	; (80076d4 <pvPortMalloc+0x174>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	f040 808c 	bne.w	80076a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01c      	beq.n	80075ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007590:	2208      	movs	r2, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4413      	add	r3, r2
 8007596:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d013      	beq.n	80075ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	3308      	adds	r3, #8
 80075aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <pvPortMalloc+0x6a>
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e7fe      	b.n	80075c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d068      	beq.n	80076a2 <pvPortMalloc+0x142>
 80075d0:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <pvPortMalloc+0x178>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d863      	bhi.n	80076a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075da:	4b40      	ldr	r3, [pc, #256]	; (80076dc <pvPortMalloc+0x17c>)
 80075dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075de:	4b3f      	ldr	r3, [pc, #252]	; (80076dc <pvPortMalloc+0x17c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075e4:	e004      	b.n	80075f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d903      	bls.n	8007602 <pvPortMalloc+0xa2>
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f1      	bne.n	80075e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007602:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <pvPortMalloc+0x170>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	429a      	cmp	r2, r3
 800760a:	d04a      	beq.n	80076a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2208      	movs	r2, #8
 8007612:	4413      	add	r3, r2
 8007614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1ad2      	subs	r2, r2, r3
 8007626:	2308      	movs	r3, #8
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	429a      	cmp	r2, r3
 800762c:	d91e      	bls.n	800766c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800762e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <pvPortMalloc+0xf4>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	e7fe      	b.n	8007652 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007666:	69b8      	ldr	r0, [r7, #24]
 8007668:	f000 f8f6 	bl	8007858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <pvPortMalloc+0x178>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <pvPortMalloc+0x178>)
 8007678:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800767a:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <pvPortMalloc+0x178>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <pvPortMalloc+0x180>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d203      	bcs.n	800768e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <pvPortMalloc+0x178>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <pvPortMalloc+0x180>)
 800768c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <pvPortMalloc+0x174>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	431a      	orrs	r2, r3
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076a2:	f7fe fd37 	bl	8006114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d009      	beq.n	80076c4 <pvPortMalloc+0x164>
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e7fe      	b.n	80076c2 <pvPortMalloc+0x162>
	return pvReturn;
 80076c4:	69fb      	ldr	r3, [r7, #28]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	; 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200018dc 	.word	0x200018dc
 80076d4:	200018e8 	.word	0x200018e8
 80076d8:	200018e0 	.word	0x200018e0
 80076dc:	200018d4 	.word	0x200018d4
 80076e0:	200018e4 	.word	0x200018e4

080076e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d046      	beq.n	8007784 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076f6:	2308      	movs	r3, #8
 80076f8:	425b      	negs	r3, r3
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	4b20      	ldr	r3, [pc, #128]	; (800778c <vPortFree+0xa8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <vPortFree+0x42>
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e7fe      	b.n	8007724 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <vPortFree+0x5e>
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	60bb      	str	r3, [r7, #8]
 8007740:	e7fe      	b.n	8007740 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <vPortFree+0xa8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d019      	beq.n	8007784 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d115      	bne.n	8007784 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <vPortFree+0xa8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	43db      	mvns	r3, r3
 8007762:	401a      	ands	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007768:	f7fe fcc6 	bl	80060f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	4b07      	ldr	r3, [pc, #28]	; (8007790 <vPortFree+0xac>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4413      	add	r3, r2
 8007776:	4a06      	ldr	r2, [pc, #24]	; (8007790 <vPortFree+0xac>)
 8007778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800777a:	6938      	ldr	r0, [r7, #16]
 800777c:	f000 f86c 	bl	8007858 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007780:	f7fe fcc8 	bl	8006114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007784:	bf00      	nop
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	200018e8 	.word	0x200018e8
 8007790:	200018e0 	.word	0x200018e0

08007794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800779a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800779e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077a0:	4b27      	ldr	r3, [pc, #156]	; (8007840 <prvHeapInit+0xac>)
 80077a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3307      	adds	r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <prvHeapInit+0xac>)
 80077c4:	4413      	add	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <prvHeapInit+0xb0>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077d2:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <prvHeapInit+0xb0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077e0:	2208      	movs	r2, #8
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0307 	bic.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a15      	ldr	r2, [pc, #84]	; (8007848 <prvHeapInit+0xb4>)
 80077f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <prvHeapInit+0xb4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <prvHeapInit+0xb4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <prvHeapInit+0xb4>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <prvHeapInit+0xb8>)
 8007822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <prvHeapInit+0xbc>)
 800782a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800782c:	4b09      	ldr	r3, [pc, #36]	; (8007854 <prvHeapInit+0xc0>)
 800782e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007832:	601a      	str	r2, [r3, #0]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000d1c 	.word	0x20000d1c
 8007844:	200018d4 	.word	0x200018d4
 8007848:	200018dc 	.word	0x200018dc
 800784c:	200018e4 	.word	0x200018e4
 8007850:	200018e0 	.word	0x200018e0
 8007854:	200018e8 	.word	0x200018e8

08007858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007860:	4b28      	ldr	r3, [pc, #160]	; (8007904 <prvInsertBlockIntoFreeList+0xac>)
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e002      	b.n	800786c <prvInsertBlockIntoFreeList+0x14>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d8f7      	bhi.n	8007866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d108      	bne.n	800789a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	441a      	add	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d118      	bne.n	80078e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <prvInsertBlockIntoFreeList+0xb0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d00d      	beq.n	80078d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	441a      	add	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e008      	b.n	80078e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <prvInsertBlockIntoFreeList+0xb0>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e003      	b.n	80078e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d002      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	200018d4 	.word	0x200018d4
 8007908:	200018dc 	.word	0x200018dc

0800790c <__libc_init_array>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4e0d      	ldr	r6, [pc, #52]	; (8007944 <__libc_init_array+0x38>)
 8007910:	4c0d      	ldr	r4, [pc, #52]	; (8007948 <__libc_init_array+0x3c>)
 8007912:	1ba4      	subs	r4, r4, r6
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	2500      	movs	r5, #0
 8007918:	42a5      	cmp	r5, r4
 800791a:	d109      	bne.n	8007930 <__libc_init_array+0x24>
 800791c:	4e0b      	ldr	r6, [pc, #44]	; (800794c <__libc_init_array+0x40>)
 800791e:	4c0c      	ldr	r4, [pc, #48]	; (8007950 <__libc_init_array+0x44>)
 8007920:	f000 f82c 	bl	800797c <_init>
 8007924:	1ba4      	subs	r4, r4, r6
 8007926:	10a4      	asrs	r4, r4, #2
 8007928:	2500      	movs	r5, #0
 800792a:	42a5      	cmp	r5, r4
 800792c:	d105      	bne.n	800793a <__libc_init_array+0x2e>
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007934:	4798      	blx	r3
 8007936:	3501      	adds	r5, #1
 8007938:	e7ee      	b.n	8007918 <__libc_init_array+0xc>
 800793a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800793e:	4798      	blx	r3
 8007940:	3501      	adds	r5, #1
 8007942:	e7f2      	b.n	800792a <__libc_init_array+0x1e>
 8007944:	08007ac8 	.word	0x08007ac8
 8007948:	08007ac8 	.word	0x08007ac8
 800794c:	08007ac8 	.word	0x08007ac8
 8007950:	08007acc 	.word	0x08007acc

08007954 <memcpy>:
 8007954:	b510      	push	{r4, lr}
 8007956:	1e43      	subs	r3, r0, #1
 8007958:	440a      	add	r2, r1
 800795a:	4291      	cmp	r1, r2
 800795c:	d100      	bne.n	8007960 <memcpy+0xc>
 800795e:	bd10      	pop	{r4, pc}
 8007960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007968:	e7f7      	b.n	800795a <memcpy+0x6>

0800796a <memset>:
 800796a:	4402      	add	r2, r0
 800796c:	4603      	mov	r3, r0
 800796e:	4293      	cmp	r3, r2
 8007970:	d100      	bne.n	8007974 <memset+0xa>
 8007972:	4770      	bx	lr
 8007974:	f803 1b01 	strb.w	r1, [r3], #1
 8007978:	e7f9      	b.n	800796e <memset+0x4>
	...

0800797c <_init>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr

08007988 <_fini>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr
