
Dimmer_Multitasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007970  08007970  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007978  08007978  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007978  08007978  00017978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800797c  0800797c  0001797c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a78  20000010  08007990  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a88  08007990  00021a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb6a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003518  00000000  00000000  0003cbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  000400c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001598  00000000  00000000  000417e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000374d  00000000  00000000  00042d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012065  00000000  00000000  000464cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc0b2  00000000  00000000  00058532  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001545e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c0  00000000  00000000  00154660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800782c 	.word	0x0800782c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800782c 	.word	0x0800782c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	if ( fsm_button.state == WAITING ) {
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d107      	bne.n	80004f2 <HAL_GPIO_EXTI_Callback+0x22>
		fsm_button.event = BUTTON_ON;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	705a      	strb	r2, [r3, #1]
		fsm_button.new_event = TRUE;
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <HAL_GPIO_EXTI_Callback+0x30>)
 80004ea:	78d3      	ldrb	r3, [r2, #3]
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	70d3      	strb	r3, [r2, #3]
	}
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20001930 	.word	0x20001930

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  init_led_struct(&led2);
 8000508:	4819      	ldr	r0, [pc, #100]	; (8000570 <main+0x6c>)
 800050a:	f000 fa21 	bl	8000950 <init_led_struct>
  init_fsm(&fsm_button);
 800050e:	4819      	ldr	r0, [pc, #100]	; (8000574 <main+0x70>)
 8000510:	f000 fa32 	bl	8000978 <init_fsm>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fd94 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f840 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f9a8 	bl	8000870 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000520:	f000 f8b2 	bl	8000688 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000524:	f000 f8fe 	bl	8000724 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f972 	bl	8000810 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_Base_Start_IT(&htim2);
 800052c:	4812      	ldr	r0, [pc, #72]	; (8000578 <main+0x74>)
 800052e:	f002 fc6f 	bl	8002e10 <HAL_TIM_Base_Start_IT>
 //HAL_TIM_Base_Start_IT(&htim3);
 HAL_UART_Transmit(&huart2, (uint8_t *)"Initializing fsm...\n", sizeof("Initializing fsm...\n")-1, 100);
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	2214      	movs	r2, #20
 8000536:	4911      	ldr	r1, [pc, #68]	; (800057c <main+0x78>)
 8000538:	4811      	ldr	r0, [pc, #68]	; (8000580 <main+0x7c>)
 800053a:	f003 fcdf 	bl	8003efc <HAL_UART_Transmit>
 print_current_state(&fsm_button);
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <main+0x70>)
 8000540:	f000 faf6 	bl	8000b30 <print_current_state>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000544:	f004 fbfc 	bl	8004d40 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Push_Button_fsm */
  Push_Button_fsmHandle = osThreadNew(StartPush_Button_fsm, NULL, &Push_Button_fsm_attributes);
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <main+0x80>)
 800054a:	2100      	movs	r1, #0
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <main+0x84>)
 800054e:	f004 fc61 	bl	8004e14 <osThreadNew>
 8000552:	4602      	mov	r2, r0
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <main+0x88>)
 8000556:	601a      	str	r2, [r3, #0]

  /* creation of Led2_Fsm_Task */
  Led2_Fsm_TaskHandle = osThreadNew(StartLed2_Fsm_Tak, NULL, &Led2_Fsm_Task_attributes);
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <main+0x8c>)
 800055a:	2100      	movs	r1, #0
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <main+0x90>)
 800055e:	f004 fc59 	bl	8004e14 <osThreadNew>
 8000562:	4602      	mov	r2, r0
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x94>)
 8000566:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000568:	f004 fc1e 	bl	8004da8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x68>
 800056e:	bf00      	nop
 8000570:	200019fc 	.word	0x200019fc
 8000574:	20001930 	.word	0x20001930
 8000578:	20001934 	.word	0x20001934
 800057c:	08007864 	.word	0x08007864
 8000580:	20001978 	.word	0x20001978
 8000584:	080078e0 	.word	0x080078e0
 8000588:	08000bc1 	.word	0x08000bc1
 800058c:	200018ec 	.word	0x200018ec
 8000590:	08007904 	.word	0x08007904
 8000594:	08000bdd 	.word	0x08000bdd
 8000598:	200019f8 	.word	0x200019f8

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b8      	sub	sp, #224	; 0xe0
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005a6:	2244      	movs	r2, #68	; 0x44
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 f935 	bl	800781a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2288      	movs	r2, #136	; 0x88
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 f927 	bl	800781a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005cc:	f001 f8a4 	bl	8001718 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <SystemClock_Config+0xe8>)
 80005d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d6:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <SystemClock_Config+0xe8>)
 80005d8:	f023 0318 	bic.w	r3, r3, #24
 80005dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005e0:	2314      	movs	r3, #20
 80005e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fe:	2300      	movs	r3, #0
 8000600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f8f9 	bl	8001800 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000614:	f000 fb24 	bl	8000c60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800061e:	2300      	movs	r3, #0
 8000620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000636:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fcc5 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000648:	f000 fb0a 	bl	8000c60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800064c:	2302      	movs	r3, #2
 800064e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4618      	mov	r0, r3
 8000658:	f001 feee 	bl	8002438 <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000662:	f000 fafd 	bl	8000c60 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f001 f873 	bl	8001754 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000674:	f000 faf4 	bl	8000c60 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000678:	f002 f9c4 	bl	8002a04 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067c:	bf00      	nop
 800067e:	37e0      	adds	r7, #224	; 0xe0
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_TIM2_Init+0x98>)
 80006a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_TIM2_Init+0x98>)
 80006b0:	2210      	movs	r2, #16
 80006b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_TIM2_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_TIM2_Init+0x98>)
 80006bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_TIM2_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_TIM2_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ce:	4814      	ldr	r0, [pc, #80]	; (8000720 <MX_TIM2_Init+0x98>)
 80006d0:	f002 fb72 	bl	8002db8 <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006da:	f000 fac1 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_TIM2_Init+0x98>)
 80006ec:	f002 fe26 	bl	800333c <HAL_TIM_ConfigClockSource>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006f6:	f000 fab3 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_TIM2_Init+0x98>)
 8000708:	f003 fb04 	bl	8003d14 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000712:	f000 faa5 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20001934 	.word	0x20001934

08000724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000758:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_TIM3_Init+0xe8>)
 800075a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 800075c:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_TIM3_Init+0xe4>)
 800075e:	22a0      	movs	r2, #160	; 0xa0
 8000760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_TIM3_Init+0xe4>)
 800076a:	2263      	movs	r2, #99	; 0x63
 800076c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <MX_TIM3_Init+0xe4>)
 800077c:	f002 fb1c 	bl	8002db8 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000786:	f000 fa6b 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000794:	4619      	mov	r1, r3
 8000796:	481c      	ldr	r0, [pc, #112]	; (8000808 <MX_TIM3_Init+0xe4>)
 8000798:	f002 fdd0 	bl	800333c <HAL_TIM_ConfigClockSource>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007a2:	f000 fa5d 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007a8:	f002 fb5c 	bl	8002e64 <HAL_TIM_PWM_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007b2:	f000 fa55 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4810      	ldr	r0, [pc, #64]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007c6:	f003 faa5 	bl	8003d14 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007d0:	f000 fa46 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007ec:	f002 fc8e 	bl	800310c <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007f6:	f000 fa33 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <MX_TIM3_Init+0xe4>)
 80007fc:	f000 faa0 	bl	8000d40 <HAL_TIM_MspPostInit>

}
 8000800:	bf00      	nop
 8000802:	3738      	adds	r7, #56	; 0x38
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200018f0 	.word	0x200018f0
 800080c:	40000400 	.word	0x40000400

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f003 fb04 	bl	8003e60 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f9ff 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20001978 	.word	0x20001978
 800086c:	40004400 	.word	0x40004400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a2e      	ldr	r2, [pc, #184]	; (8000944 <MX_GPIO_Init+0xd4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_GPIO_Init+0xd4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a28      	ldr	r2, [pc, #160]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fec9 	bl	8001684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_GPIO_Init+0xd8>)
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4811      	ldr	r0, [pc, #68]	; (800094c <MX_GPIO_Init+0xdc>)
 8000908:	f000 fcfc 	bl	8001304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090c:	2320      	movs	r3, #32
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fced 	bl	8001304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2028      	movs	r0, #40	; 0x28
 8000930:	f000 fc7c 	bl	800122c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000934:	2028      	movs	r0, #40	; 0x28
 8000936:	f000 fc95 	bl	8001264 <HAL_NVIC_EnableIRQ>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000
 8000948:	10210000 	.word	0x10210000
 800094c:	48000800 	.word	0x48000800

08000950 <init_led_struct>:

/* USER CODE BEGIN 4 */
void init_led_struct ( led_t *led ) {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	led->counter = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	805a      	strh	r2, [r3, #2]
	led->period = PERIOD;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000964:	801a      	strh	r2, [r3, #0]
	led->start = 0;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <init_fsm>:

void init_fsm ( fsm_t *sm ) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	sm->state = WAITING;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	sm->event = NON_EVENT;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	705a      	strb	r2, [r3, #1]
	sm->new_event = FALSE;
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	78d3      	ldrb	r3, [r2, #3]
 8000990:	f36f 0300 	bfc	r3, #0, #1
 8000994:	70d3      	strb	r3, [r2, #3]
	sm->counter = 0;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	709a      	strb	r2, [r3, #2]
	sm->start_countdown = 0;
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	78d3      	ldrb	r3, [r2, #3]
 80009a0:	f36f 0341 	bfc	r3, #1, #1
 80009a4:	70d3      	strb	r3, [r2, #3]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <run_fsm>:

void run_fsm ( fsm_t *sm ) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if (sm->new_event == TRUE) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	78db      	ldrb	r3, [r3, #3]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 8086 	beq.w	8000ad8 <run_fsm+0x124>
		sm->new_event = FALSE;
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	78d3      	ldrb	r3, [r2, #3]
 80009d0:	f36f 0300 	bfc	r3, #0, #1
 80009d4:	70d3      	strb	r3, [r2, #3]
		switch (sm->state) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d872      	bhi.n	8000ac4 <run_fsm+0x110>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <run_fsm+0x30>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	080009f5 	.word	0x080009f5
 80009e8:	08000a15 	.word	0x08000a15
 80009ec:	08000a4d 	.word	0x08000a4d
 80009f0:	08000a8f 	.word	0x08000a8f
		case WAITING:
			print_current_state(sm);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 f89b 	bl	8000b30 <print_current_state>
			if ( sm->event == BUTTON_ON ) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d16c      	bne.n	8000adc <run_fsm+0x128>
				sm->start_countdown = TRUE; /* init countdown of timer ISR */
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	78d3      	ldrb	r3, [r2, #3]
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	70d3      	strb	r3, [r2, #3]
				sm->state = DETECTED; /* next state of fsm */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a12:	e063      	b.n	8000adc <run_fsm+0x128>
		case DETECTED:
			print_current_state(sm);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f88b 	bl	8000b30 <print_current_state>
			if ( sm->event == TICK_TIMEOUT ) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d15e      	bne.n	8000ae0 <run_fsm+0x12c>
				if (button_pressed(B1_GPIO_Port, B1_Pin)) {
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <run_fsm+0x140>)
 8000a28:	f000 f86a 	bl	8000b00 <button_pressed>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d008      	beq.n	8000a44 <run_fsm+0x90>
					sm->state = WAIT_RELEASE; /* next state */
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2202      	movs	r2, #2
 8000a36:	701a      	strb	r2, [r3, #0]
					sm->start_countdown = TRUE;
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	78d3      	ldrb	r3, [r2, #3]
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	70d3      	strb	r3, [r2, #3]
				} else {
					sm->state = WAITING;
				}
			}
			break;
 8000a42:	e04d      	b.n	8000ae0 <run_fsm+0x12c>
					sm->state = WAITING;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
			break;
 8000a4a:	e049      	b.n	8000ae0 <run_fsm+0x12c>
		case WAIT_RELEASE:
			print_current_state(sm);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f86f 	bl	8000b30 <print_current_state>
			if ( sm->event == TICK_TIMEOUT ) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d144      	bne.n	8000ae4 <run_fsm+0x130>
				if (!button_pressed(B1_GPIO_Port, B1_Pin)) {
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4825      	ldr	r0, [pc, #148]	; (8000af4 <run_fsm+0x140>)
 8000a60:	f000 f84e 	bl	8000b00 <button_pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d108      	bne.n	8000a7c <run_fsm+0xc8>
					sm->state = UPDATE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	701a      	strb	r2, [r3, #0]
					sm->start_countdown = TRUE;
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	78d3      	ldrb	r3, [r2, #3]
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	70d3      	strb	r3, [r2, #3]
				} else {
					sm->state = WAIT_RELEASE;
					sm->start_countdown = TRUE;
				}
			}
			break;
 8000a7a:	e033      	b.n	8000ae4 <run_fsm+0x130>
					sm->state = WAIT_RELEASE;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	701a      	strb	r2, [r3, #0]
					sm->start_countdown = TRUE;
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	78d3      	ldrb	r3, [r2, #3]
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	70d3      	strb	r3, [r2, #3]
			break;
 8000a8c:	e02a      	b.n	8000ae4 <run_fsm+0x130>
		case UPDATE:
			print_current_state(sm);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f84e 	bl	8000b30 <print_current_state>
			if ( sm->event == TICK_TIMEOUT ) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d125      	bne.n	8000ae8 <run_fsm+0x134>
				sm->state = WAITING;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
				sm->event = NON_EVENT;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	705a      	strb	r2, [r3, #1]
				sm->new_event = FALSE;
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	78d3      	ldrb	r3, [r2, #3]
 8000aac:	f36f 0300 	bfc	r3, #0, #1
 8000ab0:	70d3      	strb	r3, [r2, #3]
				print_current_state(sm);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f83c 	bl	8000b30 <print_current_state>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ab8:	2120      	movs	r1, #32
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fdf9 	bl	80016b4 <HAL_GPIO_TogglePin>
				//flagDimmer=TRUE;
				//flagTransition=TRUE;
			}
			break;
 8000ac2:	e011      	b.n	8000ae8 <run_fsm+0x134>
		default:
			print_current_state(sm);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f833 	bl	8000b30 <print_current_state>
			HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown State", sizeof("Unknown State"), 100);
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	220e      	movs	r2, #14
 8000ace:	490a      	ldr	r1, [pc, #40]	; (8000af8 <run_fsm+0x144>)
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <run_fsm+0x148>)
 8000ad2:	f003 fa13 	bl	8003efc <HAL_UART_Transmit>
			while (1);
 8000ad6:	e7fe      	b.n	8000ad6 <run_fsm+0x122>
			break;
		}
	}
 8000ad8:	bf00      	nop
 8000ada:	e006      	b.n	8000aea <run_fsm+0x136>
			break;
 8000adc:	bf00      	nop
 8000ade:	e004      	b.n	8000aea <run_fsm+0x136>
			break;
 8000ae0:	bf00      	nop
 8000ae2:	e002      	b.n	8000aea <run_fsm+0x136>
			break;
 8000ae4:	bf00      	nop
 8000ae6:	e000      	b.n	8000aea <run_fsm+0x136>
			break;
 8000ae8:	bf00      	nop
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	48000800 	.word	0x48000800
 8000af8:	0800787c 	.word	0x0800787c
 8000afc:	20001978 	.word	0x20001978

08000b00 <button_pressed>:





GPIO_PinState button_pressed ( GPIO_TypeDef *port, uint16_t pin ) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
	return !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <button_pressed+0x2c>)
 8000b12:	f000 fd9f 	bl	8001654 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf0c      	ite	eq
 8000b1c:	2301      	moveq	r3, #1
 8000b1e:	2300      	movne	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	48000800 	.word	0x48000800

08000b30 <print_current_state>:

void print_current_state ( fsm_t *fsm ) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	switch (fsm->state) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d827      	bhi.n	8000b90 <print_current_state+0x60>
 8000b40:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <print_current_state+0x18>)
 8000b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b46:	bf00      	nop
 8000b48:	08000b59 	.word	0x08000b59
 8000b4c:	08000b67 	.word	0x08000b67
 8000b50:	08000b75 	.word	0x08000b75
 8000b54:	08000b83 	.word	0x08000b83
	case WAITING:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAITING\n", sizeof("WAITING\n")-1, 100);
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	4912      	ldr	r1, [pc, #72]	; (8000ba8 <print_current_state+0x78>)
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <print_current_state+0x7c>)
 8000b60:	f003 f9cc 	bl	8003efc <HAL_UART_Transmit>
		break;
 8000b64:	e01b      	b.n	8000b9e <print_current_state+0x6e>
	case DETECTED:
		HAL_UART_Transmit(&huart2, (uint8_t*)"DETECTED\n", sizeof("DETECTED\n")-1, 100);
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	2209      	movs	r2, #9
 8000b6a:	4911      	ldr	r1, [pc, #68]	; (8000bb0 <print_current_state+0x80>)
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <print_current_state+0x7c>)
 8000b6e:	f003 f9c5 	bl	8003efc <HAL_UART_Transmit>
		break;
 8000b72:	e014      	b.n	8000b9e <print_current_state+0x6e>
	case WAIT_RELEASE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAIT FOR RELEASE\n", sizeof("WAIT FOR RELEASE\n")-1, 100);
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2211      	movs	r2, #17
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <print_current_state+0x84>)
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <print_current_state+0x7c>)
 8000b7c:	f003 f9be 	bl	8003efc <HAL_UART_Transmit>
		break;
 8000b80:	e00d      	b.n	8000b9e <print_current_state+0x6e>
	case UPDATE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"UPDATE\n", sizeof("UPDATE\n")-1, 100);
 8000b82:	2364      	movs	r3, #100	; 0x64
 8000b84:	2207      	movs	r2, #7
 8000b86:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <print_current_state+0x88>)
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <print_current_state+0x7c>)
 8000b8a:	f003 f9b7 	bl	8003efc <HAL_UART_Transmit>
		break;
 8000b8e:	e006      	b.n	8000b9e <print_current_state+0x6e>
	default:
		HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\n", sizeof("ERROR\n")-1, 100);
 8000b90:	2364      	movs	r3, #100	; 0x64
 8000b92:	2206      	movs	r2, #6
 8000b94:	4909      	ldr	r1, [pc, #36]	; (8000bbc <print_current_state+0x8c>)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <print_current_state+0x7c>)
 8000b98:	f003 f9b0 	bl	8003efc <HAL_UART_Transmit>
		break;
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	0800788c 	.word	0x0800788c
 8000bac:	20001978 	.word	0x20001978
 8000bb0:	08007898 	.word	0x08007898
 8000bb4:	080078a4 	.word	0x080078a4
 8000bb8:	080078b8 	.word	0x080078b8
 8000bbc:	080078c0 	.word	0x080078c0

08000bc0 <StartPush_Button_fsm>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartPush_Button_fsm */
void StartPush_Button_fsm(void *argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	run_fsm(&fsm_button);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <StartPush_Button_fsm+0x18>)
 8000bca:	f7ff fef3 	bl	80009b4 <run_fsm>
    osDelay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f004 f9c6 	bl	8004f60 <osDelay>
	run_fsm(&fsm_button);
 8000bd4:	e7f8      	b.n	8000bc8 <StartPush_Button_fsm+0x8>
 8000bd6:	bf00      	nop
 8000bd8:	20001930 	.word	0x20001930

08000bdc <StartLed2_Fsm_Tak>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed2_Fsm_Tak */
void StartLed2_Fsm_Tak(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed2_Fsm_Tak */
  /* Infinite loop */
  for(;;)
  {
	 //run_fsmled(&fsm_Dimmer);
    osDelay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f004 f9bb 	bl	8004f60 <osDelay>
 8000bea:	e7fb      	b.n	8000be4 <StartLed2_Fsm_Tak+0x8>

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfe:	f000 fa3f 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0a:	d120      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x62>
	 // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  if (fsm_button.start_countdown == TRUE) {
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x3a>
			fsm_button.counter++;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c24:	709a      	strb	r2, [r3, #2]
		}

		/* 10 mSeg elapsed*/
	  if (fsm_button.counter >= TICK_PERIOD) {
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	2b09      	cmp	r3, #9
 8000c2c:	d90f      	bls.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x62>
		 fsm_button.counter = 0;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	709a      	strb	r2, [r3, #2]
		 fsm_button.start_countdown = FALSE;
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c36:	78d3      	ldrb	r3, [r2, #3]
 8000c38:	f36f 0341 	bfc	r3, #1, #1
 8000c3c:	70d3      	strb	r3, [r2, #3]
		 fsm_button.new_event = TRUE;
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c40:	78d3      	ldrb	r3, [r2, #3]
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	70d3      	strb	r3, [r2, #3]
		 fsm_button.event = TICK_TIMEOUT;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	705a      	strb	r2, [r3, #1]

		}
  }
  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40012c00 	.word	0x40012c00
 8000c5c:	20001930 	.word	0x20001930

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fabd 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d114      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_TIM_Base_MspInit+0x78>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_TIM_Base_MspInit+0x78>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_TIM_Base_MspInit+0x78>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f000 fa9c 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f000 fab5 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cfa:	e018      	b.n	8000d2e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_TIM_Base_MspInit+0x7c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d113      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_TIM_Base_MspInit+0x78>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <HAL_TIM_Base_MspInit+0x78>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_TIM_Base_MspInit+0x78>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	201d      	movs	r0, #29
 8000d24:	f000 fa82 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d28:	201d      	movs	r0, #29
 8000d2a:	f000 fa9b 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40000400 	.word	0x40000400

08000d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_TIM_MspPostInit+0x64>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d11c      	bne.n	8000d9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_TIM_MspPostInit+0x68>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f000 fab4 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40000400 	.word	0x40000400
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0x8c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d130      	bne.n	8000e30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_UART_MspInit+0x90>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <HAL_UART_MspInit+0x90>)
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_UART_MspInit+0x90>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0x90>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0x90>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_MspInit+0x90>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f000 fa72 	bl	8001304 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2105      	movs	r1, #5
 8000e24:	2026      	movs	r0, #38	; 0x26
 8000e26:	f000 fa01 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e2a:	2026      	movs	r0, #38	; 0x26
 8000e2c:	f000 fa1a 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	2019      	movs	r0, #25
 8000e56:	f000 f9e9 	bl	800122c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000e5a:	2019      	movs	r0, #25
 8000e5c:	f000 fa02 	bl	8001264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_InitTick+0x9c>)
 8000e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_InitTick+0x9c>)
 8000e66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_InitTick+0x9c>)
 8000e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e78:	f107 0210 	add.w	r2, r7, #16
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fa46 	bl	8002314 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e88:	f001 fa2e 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8000e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_InitTick+0xa0>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9b      	lsrs	r3, r3, #18
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_InitTick+0xa8>)
 8000ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000ebe:	f001 ff7b 	bl	8002db8 <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d104      	bne.n	8000ed2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eca:	f001 ffa1 	bl	8002e10 <HAL_TIM_Base_Start_IT>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3730      	adds	r7, #48	; 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	20001a04 	.word	0x20001a04
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f26:	f001 ffd2 	bl	8002ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20001a04 	.word	0x20001a04

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f001 ffc8 	bl	8002ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20001934 	.word	0x20001934

08000f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM3_IRQHandler+0x10>)
 8000f4e:	f001 ffbe 	bl	8002ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200018f0 	.word	0x200018f0

08000f5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <USART2_IRQHandler+0x10>)
 8000f62:	f003 f85f 	bl	8004024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20001978 	.word	0x20001978

08000f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f78:	f000 fbb6 	bl	80016e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <SystemInit+0x64>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <SystemInit+0x64>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <SystemInit+0x68>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <SystemInit+0x68>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <SystemInit+0x68>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <SystemInit+0x68>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <SystemInit+0x68>)
 8000fac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fb0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <SystemInit+0x68>)
 8000fb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <SystemInit+0x68>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <SystemInit+0x68>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <SystemInit+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SystemInit+0x64>)
 8000fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	40021000 	.word	0x40021000

08000fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ff0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ff2:	e003      	b.n	8000ffc <LoopCopyDataInit>

08000ff4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ff6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ff8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ffa:	3104      	adds	r1, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001000:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001002:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001004:	d3f6      	bcc.n	8000ff4 <CopyDataInit>
	ldr	r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001008:	e002      	b.n	8001010 <LoopFillZerobss>

0800100a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800100a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800100c:	f842 3b04 	str.w	r3, [r2], #4

08001010 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <LoopForever+0x16>)
	cmp	r2, r3
 8001012:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001014:	d3f9      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001016:	f7ff ffb3 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f006 fbcf 	bl	80077bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101e:	f7ff fa71 	bl	8000504 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001028:	08007980 	.word	0x08007980
	ldr	r0, =_sdata
 800102c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001030:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001034:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001038:	20001a88 	.word	0x20001a88

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>
	...

08001040 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_Init+0x3c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x3c>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 f8dd 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff feef 	bl	8000e40 <HAL_InitTick>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	e001      	b.n	8001072 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800106e:	f7ff fdff 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001072:	79fb      	ldrb	r3, [r7, #7]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4413      	add	r3, r2
 800108e:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_IncTick+0x1c>)
 8001090:	6013      	str	r3, [r2, #0]
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20001a44 	.word	0x20001a44
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20001a44 	.word	0x20001a44

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff4c 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff61 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff54 	bl	8001120 <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d005      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e029      	b.n	80012f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020e 	bic.w	r2, r2, #14
 80012b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f003 021c 	and.w	r2, r3, #28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
    }
  }
  return status;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	e17f      	b.n	8001614 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8171 	beq.w	800160e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d00b      	beq.n	800134c <HAL_GPIO_Init+0x48>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001340:	2b11      	cmp	r3, #17
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b12      	cmp	r3, #18
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d118      	bne.n	80013ec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x128>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b12      	cmp	r3, #18
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	6939      	ldr	r1, [r7, #16]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80ac 	beq.w	800160e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b5e      	ldr	r3, [pc, #376]	; (8001630 <HAL_GPIO_Init+0x32c>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	4a5d      	ldr	r2, [pc, #372]	; (8001630 <HAL_GPIO_Init+0x32c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6613      	str	r3, [r2, #96]	; 0x60
 80014c2:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_GPIO_Init+0x32c>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014ce:	4a59      	ldr	r2, [pc, #356]	; (8001634 <HAL_GPIO_Init+0x330>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x242>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x334>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x23e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x338>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x23a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x33c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x236>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x340>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x232>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x344>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x22e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a49      	ldr	r2, [pc, #292]	; (800164c <HAL_GPIO_Init+0x348>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x22a>
 800152a:	2306      	movs	r3, #6
 800152c:	e00c      	b.n	8001548 <HAL_GPIO_Init+0x244>
 800152e:	2307      	movs	r3, #7
 8001530:	e00a      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001532:	2305      	movs	r3, #5
 8001534:	e008      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001536:	2304      	movs	r3, #4
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x244>
 800153a:	2303      	movs	r3, #3
 800153c:	e004      	b.n	8001548 <HAL_GPIO_Init+0x244>
 800153e:	2302      	movs	r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x244>
 8001546:	2300      	movs	r3, #0
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	f002 0203 	and.w	r2, r2, #3
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	4093      	lsls	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001558:	4936      	ldr	r1, [pc, #216]	; (8001634 <HAL_GPIO_Init+0x330>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <HAL_GPIO_Init+0x34c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800158a:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_GPIO_Init+0x34c>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_GPIO_Init+0x34c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_GPIO_Init+0x34c>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_GPIO_Init+0x34c>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_GPIO_Init+0x34c>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_GPIO_Init+0x34c>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_GPIO_Init+0x34c>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f47f ae78 	bne.w	8001314 <HAL_GPIO_Init+0x10>
  }
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000
 8001634:	40010000 	.word	0x40010000
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800
 8001640:	48000c00 	.word	0x48000c00
 8001644:	48001000 	.word	0x48001000
 8001648:	48001400 	.word	0x48001400
 800164c:	48001800 	.word	0x48001800
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
 8001690:	4613      	mov	r3, r2
 8001692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001694:	787b      	ldrb	r3, [r7, #1]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80016d2:	e002      	b.n	80016da <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d4:	887a      	ldrh	r2, [r7, #2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fee2 	bl	80004d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40007000 	.word	0x40007000

08001738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_PWREx_GetVoltageRange+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001762:	d130      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001770:	d038      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2232      	movs	r2, #50	; 0x32
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001798:	e002      	b.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b01      	subs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d102      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f2      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c0:	d110      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e00f      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d007      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40007000 	.word	0x40007000
 80017f8:	20000000 	.word	0x20000000
 80017fc:	431bde83 	.word	0x431bde83

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3d4      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4ba1      	ldr	r3, [pc, #644]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181c:	4b9e      	ldr	r3, [pc, #632]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80e4 	beq.w	80019fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_RCC_OscConfig+0x4a>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	f040 808b 	bne.w	8001958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b01      	cmp	r3, #1
 8001846:	f040 8087 	bne.w	8001958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184a:	4b93      	ldr	r3, [pc, #588]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e3ac      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_RCC_OscConfig+0x7c>
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187a:	e005      	b.n	8001888 <HAL_RCC_OscConfig+0x88>
 800187c:	4b86      	ldr	r3, [pc, #536]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001888:	4293      	cmp	r3, r2
 800188a:	d223      	bcs.n	80018d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fd71 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e38d      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a0:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4977      	ldr	r1, [pc, #476]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4972      	ldr	r1, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e025      	b.n	8001920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6f      	ldr	r2, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	496a      	ldr	r1, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f2:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	4965      	ldr	r1, [pc, #404]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fd31 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e34d      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001920:	f000 fc36 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8001924:	4601      	mov	r1, r0
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_RCC_OscConfig+0x29c>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa21 f303 	lsr.w	r3, r1, r3
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_OscConfig+0x2a0>)
 800193e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x2a4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fa7b 	bl	8000e40 <HAL_InitTick>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d052      	beq.n	80019fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	e331      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d032      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001960:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196c:	f7ff fb9a 	bl	80010a4 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff fb96 	bl	80010a4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e31a      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a40      	ldr	r2, [pc, #256]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	493b      	ldr	r1, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	4936      	ldr	r1, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e01a      	b.n	80019fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a33      	ldr	r2, [pc, #204]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fb67 	bl	80010a4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019da:	f7ff fb63 	bl	80010a4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e2e7      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x1da>
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d074      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x21a>
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d064      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d160      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2c4      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x24a>
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e01d      	b.n	8001a86 <HAL_RCC_OscConfig+0x286>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x26e>
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCC_OscConfig+0x286>
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x298>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb09 	bl	80010a4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a94:	e011      	b.n	8001aba <HAL_RCC_OscConfig+0x2ba>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08007928 	.word	0x08007928
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fafc 	bl	80010a4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e280      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	4baf      	ldr	r3, [pc, #700]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff faec 	bl	80010a4 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fae8 	bl	80010a4 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e26c      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	4ba5      	ldr	r3, [pc, #660]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2d0>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d060      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x310>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	4b99      	ldr	r3, [pc, #612]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x328>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e249      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b93      	ldr	r3, [pc, #588]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4990      	ldr	r1, [pc, #576]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3c:	e040      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a8b      	ldr	r2, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff faa7 	bl	80010a4 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff faa3 	bl	80010a4 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e227      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	497c      	ldr	r1, [pc, #496]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a79      	ldr	r2, [pc, #484]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fa83 	bl	80010a4 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fa7f 	bl	80010a4 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e203      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb4:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	4a67      	ldr	r2, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa5e 	bl	80010a4 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fa5a 	bl	80010a4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1de      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ef      	beq.n	8001bec <HAL_RCC_OscConfig+0x3ec>
 8001c0c:	e01b      	b.n	8001c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa41 	bl	80010a4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7ff fa3d 	bl	80010a4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1c1      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a6 	beq.w	8001da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a43      	ldr	r2, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fa04 	bl	80010a4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff fa00 	bl	80010a4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e184      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <HAL_RCC_OscConfig+0x57c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4d8>
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd6:	e024      	b.n	8001d22 <HAL_RCC_OscConfig+0x522>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d110      	bne.n	8001d02 <HAL_RCC_OscConfig+0x502>
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	e00f      	b.n	8001d22 <HAL_RCC_OscConfig+0x522>
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d016      	beq.n	8001d58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f9bb 	bl	80010a4 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f9b7 	bl	80010a4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e139      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ed      	beq.n	8001d32 <HAL_RCC_OscConfig+0x532>
 8001d56:	e01a      	b.n	8001d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f9a4 	bl	80010a4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff f9a0 	bl	80010a4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d906      	bls.n	8001d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e122      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b90      	ldr	r3, [pc, #576]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1e8      	bne.n	8001d60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8108 	beq.w	8001fba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	f040 80d0 	bne.w	8001f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001db4:	4b83      	ldr	r3, [pc, #524]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d130      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d127      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d11f      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df4:	2a07      	cmp	r2, #7
 8001df6:	bf14      	ite	ne
 8001df8:	2201      	movne	r2, #1
 8001dfa:	2200      	moveq	r2, #0
 8001dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d113      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d06e      	beq.n	8001f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d069      	beq.n	8001f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b7      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e58:	f7ff f924 	bl	80010a4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff f920 	bl	80010a4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0a4      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b51      	ldr	r3, [pc, #324]	; (8001fc8 <HAL_RCC_OscConfig+0x7c8>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e98:	0212      	lsls	r2, r2, #8
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ea0:	0852      	lsrs	r2, r2, #1
 8001ea2:	3a01      	subs	r2, #1
 8001ea4:	0552      	lsls	r2, r2, #21
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0652      	lsls	r2, r2, #25
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb8:	0912      	lsrs	r2, r2, #4
 8001eba:	0452      	lsls	r2, r2, #17
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4941      	ldr	r1, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001edc:	f7ff f8e2 	bl	80010a4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f8de 	bl	80010a4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e062      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f02:	e05a      	b.n	8001fba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e059      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d152      	bne.n	8001fba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2c:	f7ff f8ba 	bl	80010a4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f8b6 	bl	80010a4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e03a      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x734>
 8001f52:	e032      	b.n	8001fba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d02d      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f78:	f023 0303 	bic.w	r3, r3, #3
 8001f7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001f84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f889 	bl	80010a4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f885 	bl	80010a4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_OscConfig+0x7c4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x796>
 8001fb4:	e001      	b.n	8001fba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	f99d808c 	.word	0xf99d808c

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0c8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4961      	ldr	r1, [pc, #388]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b0      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d04c      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d121      	bne.n	8002074 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e09e      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d107      	bne.n	800204c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d115      	bne.n	8002074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e092      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e086      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e07e      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 0203 	bic.w	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	493f      	ldr	r1, [pc, #252]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002086:	f7ff f80d 	bl	80010a4 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7ff f809 	bl	80010a4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e066      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 020c 	and.w	r2, r3, #12
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d1eb      	bne.n	800208e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	492c      	ldr	r1, [pc, #176]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d210      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4924      	ldr	r1, [pc, #144]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x1b0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e036      	b.n	8002172 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4918      	ldr	r1, [pc, #96]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4910      	ldr	r1, [pc, #64]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002142:	f000 f825 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002146:	4601      	mov	r1, r0
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_RCC_ClockConfig+0x1b4>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	fa21 f303 	lsr.w	r3, r1, r3
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fe6a 	bl	8000e40 <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
 800216e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002170:	7afb      	ldrb	r3, [r7, #11]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000
 8002180:	40021000 	.word	0x40021000
 8002184:	08007928 	.word	0x08007928
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x34>
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d121      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d11e      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e005      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021ec:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10d      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d102      	bne.n	800220e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_GetSysClockFreq+0x10c>)
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e004      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d101      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d133      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0xa4>
 800222e:	2b03      	cmp	r3, #3
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0xaa>
 8002232:	e005      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002236:	617b      	str	r3, [r7, #20]
      break;
 8002238:	e005      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800223c:	617b      	str	r3, [r7, #20]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	617b      	str	r3, [r7, #20]
      break;
 8002244:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	3301      	adds	r3, #1
 8002252:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	fb02 f203 	mul.w	r2, r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_GetSysClockFreq+0x104>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0e5b      	lsrs	r3, r3, #25
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002286:	69bb      	ldr	r3, [r7, #24]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3724      	adds	r7, #36	; 0x24
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	08007940 	.word	0x08007940
 800229c:	00f42400 	.word	0x00f42400
 80022a0:	007a1200 	.word	0x007a1200

080022a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022c0:	f7ff fff0 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022c4:	4601      	mov	r1, r0
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08007938 	.word	0x08007938

080022e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022ec:	f7ff ffda 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4601      	mov	r1, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0adb      	lsrs	r3, r3, #11
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08007938 	.word	0x08007938

08002314 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	220f      	movs	r2, #15
 8002322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_GetClockConfig+0x5c>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCC_GetClockConfig+0x5c>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_GetClockConfig+0x5c>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_GetClockConfig+0x5c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_RCC_GetClockConfig+0x60>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0207 	and.w	r2, r3, #7
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40022000 	.word	0x40022000

08002378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002384:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002390:	f7ff f9d2 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 8002394:	6178      	str	r0, [r7, #20]
 8002396:	e014      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a24      	ldr	r2, [pc, #144]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f9c2 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d10b      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d919      	bls.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2ba0      	cmp	r3, #160	; 0xa0
 80023d4:	d902      	bls.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e013      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e010      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d902      	bls.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023e8:	2303      	movs	r3, #3
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e00a      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d102      	bne.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f4:	2302      	movs	r3, #2
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e004      	b.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b70      	cmp	r3, #112	; 0x70
 80023fe:	d101      	bne.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 0207 	bic.w	r2, r3, #7
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002440:	2300      	movs	r3, #0
 8002442:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002444:	2300      	movs	r3, #0
 8002446:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03f      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245c:	d01c      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002462:	d802      	bhi.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002468:	e01f      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x72>
 800246a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800246e:	d003      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002474:	d01c      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002476:	e018      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002478:	4b85      	ldr	r3, [pc, #532]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a84      	ldr	r2, [pc, #528]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002484:	e015      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fac9 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002492:	4603      	mov	r3, r0
 8002494:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002496:	e00c      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3320      	adds	r3, #32
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fbb0 	bl	8002c04 <RCCEx_PLLSAI2_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a8:	e003      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	74fb      	strb	r3, [r7, #19]
      break;
 80024ae:	e000      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80024b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b8:	4b75      	ldr	r3, [pc, #468]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c6:	4972      	ldr	r1, [pc, #456]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ce:	e001      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d01c      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ee:	d802      	bhi.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80024f4:	e01f      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024fa:	d003      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80024fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002500:	d01c      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002502:	e018      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a61      	ldr	r2, [pc, #388]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002510:	e015      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fa83 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002522:	e00c      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3320      	adds	r3, #32
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fb6a 	bl	8002c04 <RCCEx_PLLSAI2_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002534:	e003      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	74fb      	strb	r3, [r7, #19]
      break;
 800253a:	e000      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800253c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002544:	4b52      	ldr	r3, [pc, #328]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002552:	494f      	ldr	r1, [pc, #316]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800255a:	e001      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a0 	beq.w	80026ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4a40      	ldr	r2, [pc, #256]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	6593      	str	r3, [r2, #88]	; 0x58
 8002594:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a3a      	ldr	r2, [pc, #232]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fd78 	bl	80010a4 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b6:	e009      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fd74 	bl	80010a4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	74fb      	strb	r3, [r7, #19]
        break;
 80025ca:	e005      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d15c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01f      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d019      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fd33 	bl	80010a4 <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	e00b      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe fd2f 	bl	80010a4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d902      	bls.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	74fb      	strb	r3, [r7, #19]
            break;
 8002658:	e006      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ec      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267e:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002686:	e009      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7c7b      	ldrb	r3, [r7, #17]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b9e      	ldr	r3, [pc, #632]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	4a9d      	ldr	r2, [pc, #628]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	4b98      	ldr	r3, [pc, #608]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	4994      	ldr	r1, [pc, #592]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026dc:	4b8f      	ldr	r3, [pc, #572]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f023 020c 	bic.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	498c      	ldr	r1, [pc, #560]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fe:	4b87      	ldr	r3, [pc, #540]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4983      	ldr	r1, [pc, #524]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	497b      	ldr	r1, [pc, #492]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	4972      	ldr	r1, [pc, #456]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002764:	4b6d      	ldr	r3, [pc, #436]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	496a      	ldr	r1, [pc, #424]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002786:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	4961      	ldr	r1, [pc, #388]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a8:	4b5c      	ldr	r3, [pc, #368]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	4959      	ldr	r1, [pc, #356]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ca:	4b54      	ldr	r3, [pc, #336]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d8:	4950      	ldr	r1, [pc, #320]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ec:	4b4b      	ldr	r3, [pc, #300]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	4948      	ldr	r1, [pc, #288]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	493f      	ldr	r1, [pc, #252]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d028      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002830:	4b3a      	ldr	r3, [pc, #232]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283e:	4937      	ldr	r1, [pc, #220]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284e:	d106      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a31      	ldr	r2, [pc, #196]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285a:	60d3      	str	r3, [r2, #12]
 800285c:	e011      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002866:	d10c      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f8d8 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	491f      	ldr	r1, [pc, #124]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ac:	d106      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b8:	60d3      	str	r3, [r2, #12]
 80028ba:	e011      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f8a9 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02b      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800290a:	d109      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a02      	ldr	r2, [pc, #8]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
 8002918:	e014      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002928:	d10c      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f877 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02f      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800295e:	4928      	ldr	r1, [pc, #160]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800296e:	d10d      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f854 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d014      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	74bb      	strb	r3, [r7, #18]
 800298a:	e011      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3320      	adds	r3, #32
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f931 	bl	8002c04 <RCCEx_PLLSAI2_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ca:	490d      	ldr	r1, [pc, #52]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ee:	4904      	ldr	r1, [pc, #16]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a32:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a3e:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0203 	and.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d10d      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
       ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a56:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
       ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d044      	beq.n	8002af4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	e041      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d00c      	beq.n	8002a92 <RCCEx_PLLSAI1_Config+0x6e>
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d013      	beq.n	8002aa4 <RCCEx_PLLSAI1_Config+0x80>
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d120      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a80:	4b5f      	ldr	r3, [pc, #380]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11d      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e01a      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a92:	4b5b      	ldr	r3, [pc, #364]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d116      	bne.n	8002acc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e013      	b.n	8002acc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aa4:	4b56      	ldr	r3, [pc, #344]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ac0:	e006      	b.n	8002ad0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac6:	e004      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e002      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ad0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	430b      	orrs	r3, r1
 8002aee:	4944      	ldr	r1, [pc, #272]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d17d      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b06:	f7fe facd 	bl	80010a4 <HAL_GetTick>
 8002b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b0c:	e009      	b.n	8002b22 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b0e:	f7fe fac9 	bl	80010a4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8002b20:	e005      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ef      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d160      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d111      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b3a:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	0211      	lsls	r1, r2, #8
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68d2      	ldr	r2, [r2, #12]
 8002b50:	0912      	lsrs	r2, r2, #4
 8002b52:	0452      	lsls	r2, r2, #17
 8002b54:	430a      	orrs	r2, r1
 8002b56:	492a      	ldr	r1, [pc, #168]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	610b      	str	r3, [r1, #16]
 8002b5c:	e027      	b.n	8002bae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d112      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	0211      	lsls	r1, r2, #8
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6912      	ldr	r2, [r2, #16]
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0552      	lsls	r2, r2, #21
 8002b80:	430a      	orrs	r2, r1
 8002b82:	491f      	ldr	r1, [pc, #124]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	610b      	str	r3, [r1, #16]
 8002b88:	e011      	b.n	8002bae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	0211      	lsls	r1, r2, #8
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6952      	ldr	r2, [r2, #20]
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	4915      	ldr	r1, [pc, #84]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fa73 	bl	80010a4 <HAL_GetTick>
 8002bbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bc0:	e009      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bc2:	f7fe fa6f 	bl	80010a4 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d902      	bls.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bd4:	e005      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ef      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000

08002c04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c12:	4b68      	ldr	r3, [pc, #416]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0203 	and.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d10d      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
       ||
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
       ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d044      	beq.n	8002cd4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e041      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d00c      	beq.n	8002c72 <RCCEx_PLLSAI2_Config+0x6e>
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d013      	beq.n	8002c84 <RCCEx_PLLSAI2_Config+0x80>
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d120      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c60:	4b54      	ldr	r3, [pc, #336]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11d      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e01a      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c72:	4b50      	ldr	r3, [pc, #320]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e013      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ca0:	e006      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca6:	e004      	b.n	8002cb2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e002      	b.n	8002cb2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002cac:	bf00      	nop
 8002cae:	e000      	b.n	8002cb2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002cb0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cb8:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4939      	ldr	r1, [pc, #228]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d167      	bne.n	8002daa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cda:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a35      	ldr	r2, [pc, #212]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce6:	f7fe f9dd 	bl	80010a4 <HAL_GetTick>
 8002cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cec:	e009      	b.n	8002d02 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cee:	f7fe f9d9 	bl	80010a4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d902      	bls.n	8002d02 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	73fb      	strb	r3, [r7, #15]
        break;
 8002d00:	e005      	b.n	8002d0e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ef      	bne.n	8002cee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d14a      	bne.n	8002daa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d111      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	0211      	lsls	r1, r2, #8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68d2      	ldr	r2, [r2, #12]
 8002d30:	0912      	lsrs	r2, r2, #4
 8002d32:	0452      	lsls	r2, r2, #17
 8002d34:	430a      	orrs	r2, r1
 8002d36:	491f      	ldr	r1, [pc, #124]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	614b      	str	r3, [r1, #20]
 8002d3c:	e011      	b.n	8002d62 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	0211      	lsls	r1, r2, #8
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6912      	ldr	r2, [r2, #16]
 8002d54:	0852      	lsrs	r2, r2, #1
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0652      	lsls	r2, r2, #25
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	4915      	ldr	r1, [pc, #84]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f999 	bl	80010a4 <HAL_GetTick>
 8002d72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d74:	e009      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d76:	f7fe f995 	bl	80010a4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d902      	bls.n	8002d8a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	73fb      	strb	r3, [r7, #15]
          break;
 8002d88:	e005      	b.n	8002d96 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ef      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01d      	b.n	8002e06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd ff6e 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 fb82 	bl	8003500 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_TIM_Base_Start_IT+0x50>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d00b      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x42>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d007      	beq.n	8002e52 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	00010007 	.word	0x00010007

08002e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e01d      	b.n	8002eb2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f815 	bl	8002eba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 fb2c 	bl	8003500 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d122      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d11b      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f06f 0202 	mvn.w	r2, #2
 8002efa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fad6 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 8002f16:	e005      	b.n	8002f24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fac8 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fad9 	bl	80034d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d122      	bne.n	8002f7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d11b      	bne.n	8002f7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f06f 0204 	mvn.w	r2, #4
 8002f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 faac 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 8002f6a:	e005      	b.n	8002f78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fa9e 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 faaf 	bl	80034d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d122      	bne.n	8002fd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11b      	bne.n	8002fd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f06f 0208 	mvn.w	r2, #8
 8002fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fa82 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 8002fbe:	e005      	b.n	8002fcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fa74 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa85 	bl	80034d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d122      	bne.n	8003026 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d11b      	bne.n	8003026 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f06f 0210 	mvn.w	r2, #16
 8002ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fa58 	bl	80034c2 <HAL_TIM_IC_CaptureCallback>
 8003012:	e005      	b.n	8003020 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa4a 	bl	80034ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa5b 	bl	80034d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10e      	bne.n	8003052 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0201 	mvn.w	r2, #1
 800304a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fdcd 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d10e      	bne.n	800307e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b80      	cmp	r3, #128	; 0x80
 800306c:	d107      	bne.n	800307e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fedd 	bl	8003e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308c:	d10e      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b80      	cmp	r3, #128	; 0x80
 800309a:	d107      	bne.n	80030ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fed0 	bl	8003e4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d10e      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d107      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa09 	bl	80034ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0220 	mvn.w	r2, #32
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fe90 	bl	8003e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003122:	2302      	movs	r3, #2
 8003124:	e105      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b14      	cmp	r3, #20
 800313a:	f200 80f0 	bhi.w	800331e <HAL_TIM_PWM_ConfigChannel+0x212>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003199 	.word	0x08003199
 8003148:	0800331f 	.word	0x0800331f
 800314c:	0800331f 	.word	0x0800331f
 8003150:	0800331f 	.word	0x0800331f
 8003154:	080031d9 	.word	0x080031d9
 8003158:	0800331f 	.word	0x0800331f
 800315c:	0800331f 	.word	0x0800331f
 8003160:	0800331f 	.word	0x0800331f
 8003164:	0800321b 	.word	0x0800321b
 8003168:	0800331f 	.word	0x0800331f
 800316c:	0800331f 	.word	0x0800331f
 8003170:	0800331f 	.word	0x0800331f
 8003174:	0800325b 	.word	0x0800325b
 8003178:	0800331f 	.word	0x0800331f
 800317c:	0800331f 	.word	0x0800331f
 8003180:	0800331f 	.word	0x0800331f
 8003184:	0800329d 	.word	0x0800329d
 8003188:	0800331f 	.word	0x0800331f
 800318c:	0800331f 	.word	0x0800331f
 8003190:	0800331f 	.word	0x0800331f
 8003194:	080032dd 	.word	0x080032dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa48 	bl	8003634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0208 	orr.w	r2, r2, #8
 80031b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	619a      	str	r2, [r3, #24]
      break;
 80031d6:	e0a3      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fab8 	bl	8003754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6999      	ldr	r1, [r3, #24]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	021a      	lsls	r2, r3, #8
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	619a      	str	r2, [r3, #24]
      break;
 8003218:	e082      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fb21 	bl	8003868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69da      	ldr	r2, [r3, #28]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0208 	orr.w	r2, r2, #8
 8003234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0204 	bic.w	r2, r2, #4
 8003244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69d9      	ldr	r1, [r3, #28]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
      break;
 8003258:	e062      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fb89 	bl	8003978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
      break;
 800329a:	e041      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fbd2 	bl	8003a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032da:	e021      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fc16 	bl	8003b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800331c:	e000      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800331e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop

0800333c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIM_ConfigClockSource+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e0a8      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x16a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d067      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0x124>
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d80b      	bhi.n	80033ac <HAL_TIM_ConfigClockSource+0x70>
 8003394:	2b10      	cmp	r3, #16
 8003396:	d073      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x144>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d802      	bhi.n	80033a2 <HAL_TIM_ConfigClockSource+0x66>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d06f      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033a0:	e078      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d06c      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x144>
 80033a6:	2b30      	cmp	r3, #48	; 0x30
 80033a8:	d06a      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80033aa:	e073      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033ac:	2b70      	cmp	r3, #112	; 0x70
 80033ae:	d00d      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x90>
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d804      	bhi.n	80033be <HAL_TIM_ConfigClockSource+0x82>
 80033b4:	2b50      	cmp	r3, #80	; 0x50
 80033b6:	d033      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xe4>
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d041      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80033bc:	e06a      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d066      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0x156>
 80033c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c8:	d017      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80033ca:	e063      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 fc7a 	bl	8003cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e04c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f000 fc63 	bl	8003cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e039      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	461a      	mov	r2, r3
 800342e:	f000 fbd7 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2150      	movs	r1, #80	; 0x50
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fc30 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 800343e:	e029      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	461a      	mov	r2, r3
 800344e:	f000 fbf6 	bl	8003c3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2160      	movs	r1, #96	; 0x60
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fc20 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 800345e:	e019      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	461a      	mov	r2, r3
 800346e:	f000 fbb7 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fc10 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 800347e:	e009      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 fc07 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 8003490:	e000      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a40      	ldr	r2, [pc, #256]	; (8003614 <TIM_Base_SetConfig+0x114>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351e:	d00f      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3d      	ldr	r2, [pc, #244]	; (8003618 <TIM_Base_SetConfig+0x118>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00b      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3c      	ldr	r2, [pc, #240]	; (800361c <TIM_Base_SetConfig+0x11c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <TIM_Base_SetConfig+0x120>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <TIM_Base_SetConfig+0x124>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d108      	bne.n	8003552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <TIM_Base_SetConfig+0x114>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2c      	ldr	r2, [pc, #176]	; (8003618 <TIM_Base_SetConfig+0x118>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2b      	ldr	r2, [pc, #172]	; (800361c <TIM_Base_SetConfig+0x11c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <TIM_Base_SetConfig+0x120>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <TIM_Base_SetConfig+0x124>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a28      	ldr	r2, [pc, #160]	; (8003628 <TIM_Base_SetConfig+0x128>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <TIM_Base_SetConfig+0x12c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a26      	ldr	r2, [pc, #152]	; (8003630 <TIM_Base_SetConfig+0x130>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <TIM_Base_SetConfig+0x114>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0xf8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <TIM_Base_SetConfig+0x124>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0xf8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a11      	ldr	r2, [pc, #68]	; (8003628 <TIM_Base_SetConfig+0x128>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0xf8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <TIM_Base_SetConfig+0x12c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0xf8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <TIM_Base_SetConfig+0x130>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40013400 	.word	0x40013400
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400
 8003630:	40014800 	.word	0x40014800

08003634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0201 	bic.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 0302 	bic.w	r3, r3, #2
 8003680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <TIM_OC1_SetConfig+0x10c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00f      	beq.n	80036b4 <TIM_OC1_SetConfig+0x80>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <TIM_OC1_SetConfig+0x110>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_OC1_SetConfig+0x80>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a2a      	ldr	r2, [pc, #168]	; (8003748 <TIM_OC1_SetConfig+0x114>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_OC1_SetConfig+0x80>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <TIM_OC1_SetConfig+0x118>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_OC1_SetConfig+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <TIM_OC1_SetConfig+0x11c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10c      	bne.n	80036ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f023 0308 	bic.w	r3, r3, #8
 80036ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 0304 	bic.w	r3, r3, #4
 80036cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <TIM_OC1_SetConfig+0x10c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <TIM_OC1_SetConfig+0xc2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1a      	ldr	r2, [pc, #104]	; (8003744 <TIM_OC1_SetConfig+0x110>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_OC1_SetConfig+0xc2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <TIM_OC1_SetConfig+0x114>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_OC1_SetConfig+0xc2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <TIM_OC1_SetConfig+0x118>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_OC1_SetConfig+0xc2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <TIM_OC1_SetConfig+0x11c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40013400 	.word	0x40013400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800

08003754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0210 	bic.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a28      	ldr	r2, [pc, #160]	; (8003854 <TIM_OC2_SetConfig+0x100>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC2_SetConfig+0x6c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_OC2_SetConfig+0x104>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10d      	bne.n	80037dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <TIM_OC2_SetConfig+0x100>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00f      	beq.n	8003804 <TIM_OC2_SetConfig+0xb0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <TIM_OC2_SetConfig+0x104>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_OC2_SetConfig+0xb0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <TIM_OC2_SetConfig+0x108>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_OC2_SetConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <TIM_OC2_SetConfig+0x10c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_OC2_SetConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a19      	ldr	r2, [pc, #100]	; (8003864 <TIM_OC2_SetConfig+0x110>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d113      	bne.n	800382c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800380a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800

08003868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <TIM_OC3_SetConfig+0xfc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC3_SetConfig+0x6a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a26      	ldr	r2, [pc, #152]	; (8003968 <TIM_OC3_SetConfig+0x100>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10d      	bne.n	80038ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <TIM_OC3_SetConfig+0xfc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00f      	beq.n	8003916 <TIM_OC3_SetConfig+0xae>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <TIM_OC3_SetConfig+0x100>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_OC3_SetConfig+0xae>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1a      	ldr	r2, [pc, #104]	; (800396c <TIM_OC3_SetConfig+0x104>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_OC3_SetConfig+0xae>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a19      	ldr	r2, [pc, #100]	; (8003970 <TIM_OC3_SetConfig+0x108>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_OC3_SetConfig+0xae>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a18      	ldr	r2, [pc, #96]	; (8003974 <TIM_OC3_SetConfig+0x10c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d113      	bne.n	800393e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800391c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40013400 	.word	0x40013400
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800

08003978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <TIM_OC4_SetConfig+0xc0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00f      	beq.n	80039fc <TIM_OC4_SetConfig+0x84>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <TIM_OC4_SetConfig+0xc4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00b      	beq.n	80039fc <TIM_OC4_SetConfig+0x84>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <TIM_OC4_SetConfig+0xc8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_OC4_SetConfig+0x84>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <TIM_OC4_SetConfig+0xcc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_OC4_SetConfig+0x84>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <TIM_OC4_SetConfig+0xd0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d109      	bne.n	8003a10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	621a      	str	r2, [r3, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40013400 	.word	0x40013400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800

08003a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <TIM_OC5_SetConfig+0xb4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <TIM_OC5_SetConfig+0x7a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <TIM_OC5_SetConfig+0xb8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <TIM_OC5_SetConfig+0x7a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <TIM_OC5_SetConfig+0xbc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_OC5_SetConfig+0x7a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <TIM_OC5_SetConfig+0xc0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_OC5_SetConfig+0x7a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <TIM_OC5_SetConfig+0xc4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d109      	bne.n	8003ada <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800

08003b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	021b      	lsls	r3, r3, #8
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	051b      	lsls	r3, r3, #20
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a18      	ldr	r2, [pc, #96]	; (8003bcc <TIM_OC6_SetConfig+0xb8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00f      	beq.n	8003b90 <TIM_OC6_SetConfig+0x7c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <TIM_OC6_SetConfig+0xbc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <TIM_OC6_SetConfig+0x7c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <TIM_OC6_SetConfig+0xc0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <TIM_OC6_SetConfig+0x7c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <TIM_OC6_SetConfig+0xc4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_OC6_SetConfig+0x7c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <TIM_OC6_SetConfig+0xc8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40013400 	.word	0x40013400
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800

08003be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 030a 	bic.w	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0210 	bic.w	r2, r3, #16
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	031b      	lsls	r3, r3, #12
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f043 0307 	orr.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e068      	b.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d108      	bne.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d018      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00e      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10c      	bne.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40014000 	.word	0x40014000

08003e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e040      	b.n	8003ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fc ff92 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	; 0x24
 8003e8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa1a 	bl	80042d8 <UART_SetConfig>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e022      	b.n	8003ef4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fd80 	bl	80049bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fe07 	bl	8004b00 <UART_CheckIdleState>
 8003ef2:	4603      	mov	r3, r0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	f040 8081 	bne.w	8004018 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_Transmit+0x26>
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e079      	b.n	800401a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Transmit+0x38>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e072      	b.n	800401a <HAL_UART_Transmit+0x11e>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd f8ac 	bl	80010a4 <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d108      	bne.n	8003f7a <HAL_UART_Transmit+0x7e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	e003      	b.n	8003f82 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003f8a:	e02d      	b.n	8003fe8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fdf7 	bl	8004b8a <UART_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e039      	b.n	800401a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	b292      	uxth	r2, r2
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e008      	b.n	8003fd6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1cb      	bne.n	8003f8c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fdc3 	bl	8004b8a <UART_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e005      	b.n	800401a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	f640 030f 	movw	r3, #2063	; 0x80f
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00e      	beq.n	800407c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8114 	beq.w	800429a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
      }
      return;
 800407a:	e10e      	b.n	800429a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80d6 	beq.w	8004230 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d105      	bne.n	800409a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80cb 	beq.w	8004230 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <HAL_UART_IRQHandler+0x9e>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ba:	f043 0201 	orr.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <HAL_UART_IRQHandler+0xc6>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2202      	movs	r2, #2
 80040dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <HAL_UART_IRQHandler+0xee>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2204      	movs	r2, #4
 8004104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410a:	f043 0202 	orr.w	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2208      	movs	r2, #8
 8004136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413c:	f043 0208 	orr.w	r2, r3, #8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00f      	beq.n	800416e <HAL_UART_IRQHandler+0x14a>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8093 	beq.w	800429e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d004      	beq.n	80041ba <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d031      	beq.n	800421e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fd60 	bl	8004c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d123      	bne.n	8004216 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ea:	4a30      	ldr	r2, [pc, #192]	; (80042ac <HAL_UART_IRQHandler+0x288>)
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd f844 	bl	8001280 <HAL_DMA_Abort_IT>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00e      	b.n	800422c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f858 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e00a      	b.n	800422c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f854 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e006      	b.n	800422c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f850 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800422a:	e038      	b.n	800429e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	bf00      	nop
    return;
 800422e:	e036      	b.n	800429e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <HAL_UART_IRQHandler+0x232>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800424c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fd65 	bl	8004d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004254:	e026      	b.n	80042a4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	2b00      	cmp	r3, #0
 8004270:	d017      	beq.n	80042a2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
    }
    return;
 800427a:	e012      	b.n	80042a2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <HAL_UART_IRQHandler+0x280>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fd2b 	bl	8004cec <UART_EndTransmit_IT>
    return;
 8004296:	bf00      	nop
 8004298:	e004      	b.n	80042a4 <HAL_UART_IRQHandler+0x280>
      return;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <HAL_UART_IRQHandler+0x280>
    return;
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <HAL_UART_IRQHandler+0x280>
    return;
 80042a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	08004cc1 	.word	0x08004cc1

080042b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042dc:	b08a      	sub	sp, #40	; 0x28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4313      	orrs	r3, r2
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4bb8      	ldr	r3, [pc, #736]	; (80045f0 <UART_SetConfig+0x318>)
 800430e:	4013      	ands	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004316:	430b      	orrs	r3, r1
 8004318:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4aae      	ldr	r2, [pc, #696]	; (80045f4 <UART_SetConfig+0x31c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	4313      	orrs	r3, r2
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4aa5      	ldr	r2, [pc, #660]	; (80045f8 <UART_SetConfig+0x320>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d126      	bne.n	80043b6 <UART_SetConfig+0xde>
 8004368:	4ba4      	ldr	r3, [pc, #656]	; (80045fc <UART_SetConfig+0x324>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b03      	cmp	r3, #3
 8004374:	d81a      	bhi.n	80043ac <UART_SetConfig+0xd4>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <UART_SetConfig+0xa4>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	0800438d 	.word	0x0800438d
 8004380:	0800439d 	.word	0x0800439d
 8004384:	08004395 	.word	0x08004395
 8004388:	080043a5 	.word	0x080043a5
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e105      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004394:	2302      	movs	r3, #2
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e101      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e0fd      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e0f9      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	bf00      	nop
 80043b4:	e0f4      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a91      	ldr	r2, [pc, #580]	; (8004600 <UART_SetConfig+0x328>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d138      	bne.n	8004432 <UART_SetConfig+0x15a>
 80043c0:	4b8e      	ldr	r3, [pc, #568]	; (80045fc <UART_SetConfig+0x324>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d82c      	bhi.n	8004428 <UART_SetConfig+0x150>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0xfc>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004409 	.word	0x08004409
 80043d8:	08004429 	.word	0x08004429
 80043dc:	08004429 	.word	0x08004429
 80043e0:	08004429 	.word	0x08004429
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004429 	.word	0x08004429
 80043f0:	08004429 	.word	0x08004429
 80043f4:	08004411 	.word	0x08004411
 80043f8:	08004429 	.word	0x08004429
 80043fc:	08004429 	.word	0x08004429
 8004400:	08004429 	.word	0x08004429
 8004404:	08004421 	.word	0x08004421
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e0c7      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004410:	2302      	movs	r3, #2
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e0c3      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004418:	2304      	movs	r3, #4
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e0bf      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004420:	2308      	movs	r3, #8
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e0bb      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004428:	2310      	movs	r3, #16
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	bf00      	nop
 8004430:	e0b6      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a73      	ldr	r2, [pc, #460]	; (8004604 <UART_SetConfig+0x32c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d125      	bne.n	8004488 <UART_SetConfig+0x1b0>
 800443c:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <UART_SetConfig+0x324>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004446:	2b10      	cmp	r3, #16
 8004448:	d011      	beq.n	800446e <UART_SetConfig+0x196>
 800444a:	2b10      	cmp	r3, #16
 800444c:	d802      	bhi.n	8004454 <UART_SetConfig+0x17c>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <UART_SetConfig+0x186>
 8004452:	e014      	b.n	800447e <UART_SetConfig+0x1a6>
 8004454:	2b20      	cmp	r3, #32
 8004456:	d006      	beq.n	8004466 <UART_SetConfig+0x18e>
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	d00c      	beq.n	8004476 <UART_SetConfig+0x19e>
 800445c:	e00f      	b.n	800447e <UART_SetConfig+0x1a6>
 800445e:	2300      	movs	r3, #0
 8004460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004464:	e09c      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004466:	2302      	movs	r3, #2
 8004468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446c:	e098      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800446e:	2304      	movs	r3, #4
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004474:	e094      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004476:	2308      	movs	r3, #8
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e090      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800447e:	2310      	movs	r3, #16
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	bf00      	nop
 8004486:	e08b      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5e      	ldr	r2, [pc, #376]	; (8004608 <UART_SetConfig+0x330>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d125      	bne.n	80044de <UART_SetConfig+0x206>
 8004492:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <UART_SetConfig+0x324>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d011      	beq.n	80044c4 <UART_SetConfig+0x1ec>
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d802      	bhi.n	80044aa <UART_SetConfig+0x1d2>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <UART_SetConfig+0x1dc>
 80044a8:	e014      	b.n	80044d4 <UART_SetConfig+0x1fc>
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d006      	beq.n	80044bc <UART_SetConfig+0x1e4>
 80044ae:	2bc0      	cmp	r3, #192	; 0xc0
 80044b0:	d00c      	beq.n	80044cc <UART_SetConfig+0x1f4>
 80044b2:	e00f      	b.n	80044d4 <UART_SetConfig+0x1fc>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ba:	e071      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80044bc:	2302      	movs	r3, #2
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e06d      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e069      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e065      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	bf00      	nop
 80044dc:	e060      	b.n	80045a0 <UART_SetConfig+0x2c8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a4a      	ldr	r2, [pc, #296]	; (800460c <UART_SetConfig+0x334>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d129      	bne.n	800453c <UART_SetConfig+0x264>
 80044e8:	4b44      	ldr	r3, [pc, #272]	; (80045fc <UART_SetConfig+0x324>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f6:	d014      	beq.n	8004522 <UART_SetConfig+0x24a>
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fc:	d802      	bhi.n	8004504 <UART_SetConfig+0x22c>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <UART_SetConfig+0x23a>
 8004502:	e016      	b.n	8004532 <UART_SetConfig+0x25a>
 8004504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004508:	d007      	beq.n	800451a <UART_SetConfig+0x242>
 800450a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450e:	d00c      	beq.n	800452a <UART_SetConfig+0x252>
 8004510:	e00f      	b.n	8004532 <UART_SetConfig+0x25a>
 8004512:	2300      	movs	r3, #0
 8004514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004518:	e042      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800451a:	2302      	movs	r3, #2
 800451c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004520:	e03e      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004522:	2304      	movs	r3, #4
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004528:	e03a      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800452a:	2308      	movs	r3, #8
 800452c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004530:	e036      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004532:	2310      	movs	r3, #16
 8004534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004538:	bf00      	nop
 800453a:	e031      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <UART_SetConfig+0x31c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d129      	bne.n	800459a <UART_SetConfig+0x2c2>
 8004546:	4b2d      	ldr	r3, [pc, #180]	; (80045fc <UART_SetConfig+0x324>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004554:	d014      	beq.n	8004580 <UART_SetConfig+0x2a8>
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455a:	d802      	bhi.n	8004562 <UART_SetConfig+0x28a>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <UART_SetConfig+0x298>
 8004560:	e016      	b.n	8004590 <UART_SetConfig+0x2b8>
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004566:	d007      	beq.n	8004578 <UART_SetConfig+0x2a0>
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456c:	d00c      	beq.n	8004588 <UART_SetConfig+0x2b0>
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0x2b8>
 8004570:	2300      	movs	r3, #0
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e00b      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e007      	b.n	80045a0 <UART_SetConfig+0x2c8>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	bf00      	nop
 8004598:	e002      	b.n	80045a0 <UART_SetConfig+0x2c8>
 800459a:	2310      	movs	r3, #16
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <UART_SetConfig+0x31c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f040 80fe 	bne.w	80047a8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d837      	bhi.n	8004624 <UART_SetConfig+0x34c>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x2e4>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	08004625 	.word	0x08004625
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	08004625 	.word	0x08004625
 80045cc:	08004615 	.word	0x08004615
 80045d0:	08004625 	.word	0x08004625
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004625 	.word	0x08004625
 80045dc:	0800461d 	.word	0x0800461d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fd fe6c 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80045e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045e6:	e020      	b.n	800462a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <UART_SetConfig+0x338>)
 80045ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ec:	e01d      	b.n	800462a <UART_SetConfig+0x352>
 80045ee:	bf00      	nop
 80045f0:	efff69f3 	.word	0xefff69f3
 80045f4:	40008000 	.word	0x40008000
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40021000 	.word	0x40021000
 8004600:	40004400 	.word	0x40004400
 8004604:	40004800 	.word	0x40004800
 8004608:	40004c00 	.word	0x40004c00
 800460c:	40005000 	.word	0x40005000
 8004610:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004614:	f7fd fdbc 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8004618:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800461a:	e006      	b.n	800462a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800461c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004620:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004622:	e002      	b.n	800462a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	76fb      	strb	r3, [r7, #27]
        break;
 8004628:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 81b9 	beq.w	80049a4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	429a      	cmp	r2, r3
 8004640:	d305      	bcc.n	800464e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	429a      	cmp	r2, r3
 800464c:	d902      	bls.n	8004654 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	76fb      	strb	r3, [r7, #27]
 8004652:	e1a7      	b.n	80049a4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004658:	2b08      	cmp	r3, #8
 800465a:	f200 8092 	bhi.w	8004782 <UART_SetConfig+0x4aa>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x38c>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004689 	.word	0x08004689
 8004668:	08004783 	.word	0x08004783
 800466c:	080046d7 	.word	0x080046d7
 8004670:	08004783 	.word	0x08004783
 8004674:	0800470b 	.word	0x0800470b
 8004678:	08004783 	.word	0x08004783
 800467c:	08004783 	.word	0x08004783
 8004680:	08004783 	.word	0x08004783
 8004684:	08004759 	.word	0x08004759
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004688:	f7fd fe18 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 800468c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4619      	mov	r1, r3
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	f04f 0400 	mov.w	r4, #0
 800469e:	0214      	lsls	r4, r2, #8
 80046a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046a4:	020b      	lsls	r3, r1, #8
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6852      	ldr	r2, [r2, #4]
 80046aa:	0852      	lsrs	r2, r2, #1
 80046ac:	4611      	mov	r1, r2
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	eb13 0b01 	adds.w	fp, r3, r1
 80046b6:	eb44 0c02 	adc.w	ip, r4, r2
 80046ba:	4658      	mov	r0, fp
 80046bc:	4661      	mov	r1, ip
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f04f 0400 	mov.w	r4, #0
 80046c6:	461a      	mov	r2, r3
 80046c8:	4623      	mov	r3, r4
 80046ca:	f7fb fd81 	bl	80001d0 <__aeabi_uldivmod>
 80046ce:	4603      	mov	r3, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80046d4:	e058      	b.n	8004788 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	f04f 0400 	mov.w	r4, #0
 80046e0:	49ae      	ldr	r1, [pc, #696]	; (800499c <UART_SetConfig+0x6c4>)
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	eb13 0b01 	adds.w	fp, r3, r1
 80046ea:	eb44 0c02 	adc.w	ip, r4, r2
 80046ee:	4658      	mov	r0, fp
 80046f0:	4661      	mov	r1, ip
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f04f 0400 	mov.w	r4, #0
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	f7fb fd67 	bl	80001d0 <__aeabi_uldivmod>
 8004702:	4603      	mov	r3, r0
 8004704:	460c      	mov	r4, r1
 8004706:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004708:	e03e      	b.n	8004788 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800470a:	f7fd fd41 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800470e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4619      	mov	r1, r3
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	f04f 0400 	mov.w	r4, #0
 8004720:	0214      	lsls	r4, r2, #8
 8004722:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004726:	020b      	lsls	r3, r1, #8
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6852      	ldr	r2, [r2, #4]
 800472c:	0852      	lsrs	r2, r2, #1
 800472e:	4611      	mov	r1, r2
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	eb13 0b01 	adds.w	fp, r3, r1
 8004738:	eb44 0c02 	adc.w	ip, r4, r2
 800473c:	4658      	mov	r0, fp
 800473e:	4661      	mov	r1, ip
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	461a      	mov	r2, r3
 800474a:	4623      	mov	r3, r4
 800474c:	f7fb fd40 	bl	80001d0 <__aeabi_uldivmod>
 8004750:	4603      	mov	r3, r0
 8004752:	460c      	mov	r4, r1
 8004754:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004756:	e017      	b.n	8004788 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	f04f 0400 	mov.w	r4, #0
 8004762:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004766:	f144 0100 	adc.w	r1, r4, #0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f04f 0400 	mov.w	r4, #0
 8004772:	461a      	mov	r2, r3
 8004774:	4623      	mov	r3, r4
 8004776:	f7fb fd2b 	bl	80001d0 <__aeabi_uldivmod>
 800477a:	4603      	mov	r3, r0
 800477c:	460c      	mov	r4, r1
 800477e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004780:	e002      	b.n	8004788 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	76fb      	strb	r3, [r7, #27]
            break;
 8004786:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478e:	d308      	bcc.n	80047a2 <UART_SetConfig+0x4ca>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004796:	d204      	bcs.n	80047a2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	60da      	str	r2, [r3, #12]
 80047a0:	e100      	b.n	80049a4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	76fb      	strb	r3, [r7, #27]
 80047a6:	e0fd      	b.n	80049a4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	f040 8084 	bne.w	80048bc <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80047b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d85f      	bhi.n	800487c <UART_SetConfig+0x5a4>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x4ec>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	08004809 	.word	0x08004809
 80047cc:	08004829 	.word	0x08004829
 80047d0:	0800487d 	.word	0x0800487d
 80047d4:	08004845 	.word	0x08004845
 80047d8:	0800487d 	.word	0x0800487d
 80047dc:	0800487d 	.word	0x0800487d
 80047e0:	0800487d 	.word	0x0800487d
 80047e4:	08004865 	.word	0x08004865
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fd fd68 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80047ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004806:	e03c      	b.n	8004882 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fd fd6e 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 800480c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004826:	e02c      	b.n	8004882 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004832:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6852      	ldr	r2, [r2, #4]
 800483a:	fbb3 f3f2 	udiv	r3, r3, r2
 800483e:	b29b      	uxth	r3, r3
 8004840:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004842:	e01e      	b.n	8004882 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004844:	f7fd fca4 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8004848:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	005a      	lsls	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004862:	e00e      	b.n	8004882 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	b29b      	uxth	r3, r3
 8004878:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800487a:	e002      	b.n	8004882 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	76fb      	strb	r3, [r7, #27]
        break;
 8004880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d916      	bls.n	80048b6 <UART_SetConfig+0x5de>
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d212      	bcs.n	80048b6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f023 030f 	bic.w	r3, r3, #15
 8004898:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	89fb      	ldrh	r3, [r7, #14]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	89fa      	ldrh	r2, [r7, #14]
 80048b2:	60da      	str	r2, [r3, #12]
 80048b4:	e076      	b.n	80049a4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	76fb      	strb	r3, [r7, #27]
 80048ba:	e073      	b.n	80049a4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80048bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d85c      	bhi.n	800497e <UART_SetConfig+0x6a6>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x5f4>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	0800490f 	.word	0x0800490f
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	0800497f 	.word	0x0800497f
 80048dc:	08004949 	.word	0x08004949
 80048e0:	0800497f 	.word	0x0800497f
 80048e4:	0800497f 	.word	0x0800497f
 80048e8:	0800497f 	.word	0x0800497f
 80048ec:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fd fce4 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80048f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	085a      	lsrs	r2, r3, #1
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	b29b      	uxth	r3, r3
 800490a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800490c:	e03a      	b.n	8004984 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490e:	f7fd fceb 	bl	80022e8 <HAL_RCC_GetPCLK2Freq>
 8004912:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	085a      	lsrs	r2, r3, #1
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800492a:	e02b      	b.n	8004984 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004936:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6852      	ldr	r2, [r2, #4]
 800493e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004946:	e01d      	b.n	8004984 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004948:	f7fd fc22 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800494c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	085a      	lsrs	r2, r3, #1
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	441a      	add	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	b29b      	uxth	r3, r3
 8004962:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004964:	e00e      	b.n	8004984 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	b29b      	uxth	r3, r3
 800497a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800497c:	e002      	b.n	8004984 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	76fb      	strb	r3, [r7, #27]
        break;
 8004982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	d90a      	bls.n	80049a0 <UART_SetConfig+0x6c8>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d206      	bcs.n	80049a0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	e003      	b.n	80049a4 <UART_SetConfig+0x6cc>
 800499c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80049b0:	7efb      	ldrb	r3, [r7, #27]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3728      	adds	r7, #40	; 0x28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080049bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aba:	d10a      	bne.n	8004ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b0e:	f7fc fac9 	bl	80010a4 <HAL_GetTick>
 8004b12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d10e      	bne.n	8004b40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f82a 	bl	8004b8a <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e020      	b.n	8004b82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d10e      	bne.n	8004b6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f814 	bl	8004b8a <UART_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e00a      	b.n	8004b82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9a:	e05d      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d059      	beq.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba4:	f7fc fa7e 	bl	80010a4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11b      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e042      	b.n	8004c78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02b      	beq.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0e:	d123      	bne.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c18:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c28:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e00f      	b.n	8004c78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d092      	beq.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff faf0 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff facd 	bl	80042b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d46:	f3ef 8305 	mrs	r3, IPSR
 8004d4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d52:	f3ef 8310 	mrs	r3, PRIMASK
 8004d56:	607b      	str	r3, [r7, #4]
  return(result);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d62:	603b      	str	r3, [r7, #0]
  return(result);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <osKernelInitialize+0x3a>
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <osKernelInitialize+0x64>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d103      	bne.n	8004d7a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004d72:	f06f 0305 	mvn.w	r3, #5
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e00c      	b.n	8004d94 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <osKernelInitialize+0x64>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <osKernelInitialize+0x64>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	e002      	b.n	8004d94 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d94:	68fb      	ldr	r3, [r7, #12]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	2000002c 	.word	0x2000002c

08004da8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dae:	f3ef 8305 	mrs	r3, IPSR
 8004db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004db4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dba:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbe:	607b      	str	r3, [r7, #4]
  return(result);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d105      	bne.n	8004dd2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dca:	603b      	str	r3, [r7, #0]
  return(result);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <osKernelStart+0x3a>
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <osKernelStart+0x68>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d103      	bne.n	8004de2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004dda:	f06f 0305 	mvn.w	r3, #5
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e010      	b.n	8004e04 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <osKernelStart+0x68>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d109      	bne.n	8004dfe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dea:	f7ff ffa2 	bl	8004d32 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <osKernelStart+0x68>)
 8004df0:	2202      	movs	r2, #2
 8004df2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004df4:	f001 f870 	bl	8005ed8 <vTaskStartScheduler>
      stat = osOK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e002      	b.n	8004e04 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004e02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000002c 	.word	0x2000002c

08004e14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b090      	sub	sp, #64	; 0x40
 8004e18:	af04      	add	r7, sp, #16
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e24:	f3ef 8305 	mrs	r3, IPSR
 8004e28:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e2a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 808f 	bne.w	8004f50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e32:	f3ef 8310 	mrs	r3, PRIMASK
 8004e36:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e42:	617b      	str	r3, [r7, #20]
  return(result);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <osThreadNew+0x3e>
 8004e4a:	4b44      	ldr	r3, [pc, #272]	; (8004f5c <osThreadNew+0x148>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d07e      	beq.n	8004f50 <osThreadNew+0x13c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d07b      	beq.n	8004f50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004e5c:	2318      	movs	r3, #24
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004e64:	f04f 33ff 	mov.w	r3, #4294967295
 8004e68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d045      	beq.n	8004efc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <osThreadNew+0x6a>
        name = attr->name;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <osThreadNew+0x90>
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	2b38      	cmp	r3, #56	; 0x38
 8004e96:	d805      	bhi.n	8004ea4 <osThreadNew+0x90>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <osThreadNew+0x94>
        return (NULL);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e054      	b.n	8004f52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	089b      	lsrs	r3, r3, #2
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <osThreadNew+0xca>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b5b      	cmp	r3, #91	; 0x5b
 8004ec6:	d90a      	bls.n	8004ede <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d006      	beq.n	8004ede <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <osThreadNew+0xca>
        mem = 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	e010      	b.n	8004f00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10c      	bne.n	8004f00 <osThreadNew+0xec>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d108      	bne.n	8004f00 <osThreadNew+0xec>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <osThreadNew+0xec>
          mem = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	e001      	b.n	8004f00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d110      	bne.n	8004f28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f0e:	9202      	str	r2, [sp, #8]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fe09 	bl	8005b34 <xTaskCreateStatic>
 8004f22:	4603      	mov	r3, r0
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e013      	b.n	8004f50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d110      	bne.n	8004f50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	f107 0310 	add.w	r3, r7, #16
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fe51 	bl	8005be8 <xTaskCreate>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <osThreadNew+0x13c>
          hTask = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f50:	693b      	ldr	r3, [r7, #16]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3730      	adds	r7, #48	; 0x30
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	2000002c 	.word	0x2000002c

08004f60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f68:	f3ef 8305 	mrs	r3, IPSR
 8004f6c:	613b      	str	r3, [r7, #16]
  return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10f      	bne.n	8004f94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f74:	f3ef 8310 	mrs	r3, PRIMASK
 8004f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f80:	f3ef 8311 	mrs	r3, BASEPRI
 8004f84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <osDelay+0x3c>
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <osDelay+0x58>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d103      	bne.n	8004f9c <osDelay+0x3c>
    stat = osErrorISR;
 8004f94:	f06f 0305 	mvn.w	r3, #5
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e007      	b.n	8004fac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <osDelay+0x4c>
      vTaskDelay(ticks);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 ff62 	bl	8005e70 <vTaskDelay>
    }
  }

  return (stat);
 8004fac:	697b      	ldr	r3, [r7, #20]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2000002c 	.word	0x2000002c

08004fbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a07      	ldr	r2, [pc, #28]	; (8004fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4a06      	ldr	r2, [pc, #24]	; (8004fec <vApplicationGetIdleTaskMemory+0x30>)
 8004fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000030 	.word	0x20000030
 8004fec:	2000008c 	.word	0x2000008c

08004ff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a07      	ldr	r2, [pc, #28]	; (800501c <vApplicationGetTimerTaskMemory+0x2c>)
 8005000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4a06      	ldr	r2, [pc, #24]	; (8005020 <vApplicationGetTimerTaskMemory+0x30>)
 8005006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800500e:	601a      	str	r2, [r3, #0]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	2000028c 	.word	0x2000028c
 8005020:	200002e8 	.word	0x200002e8

08005024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f103 0208 	add.w	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f103 0208 	add.w	r2, r3, #8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f103 0208 	add.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	601a      	str	r2, [r3, #0]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d103      	bne.n	80050e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e00c      	b.n	8005100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3308      	adds	r3, #8
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e002      	b.n	80050f4 <vListInsert+0x2e>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d2f6      	bcs.n	80050ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	601a      	str	r2, [r3, #0]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6892      	ldr	r2, [r2, #8]
 800514e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6852      	ldr	r2, [r2, #4]
 8005158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	d103      	bne.n	800516c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	e7fe      	b.n	80051b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80051b4:	f002 f812 	bl	80071dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	68f9      	ldr	r1, [r7, #12]
 80051c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	441a      	add	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	3b01      	subs	r3, #1
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	441a      	add	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	22ff      	movs	r2, #255	; 0xff
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d114      	bne.n	8005234 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01a      	beq.n	8005248 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3310      	adds	r3, #16
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f8de 	bl	80063d8 <xTaskRemoveFromEventList>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <xQueueGenericReset+0xcc>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	e009      	b.n	8005248 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3310      	adds	r3, #16
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fef3 	bl	8005024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3324      	adds	r3, #36	; 0x24
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff feee 	bl	8005024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005248:	f001 fff6 	bl	8007238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800524c:	2301      	movs	r3, #1
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <xQueueGenericCreateStatic+0x28>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
 8005282:	e7fe      	b.n	8005282 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <xQueueGenericCreateStatic+0x42>
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
 800529c:	e7fe      	b.n	800529c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <xQueueGenericCreateStatic+0x4e>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <xQueueGenericCreateStatic+0x52>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <xQueueGenericCreateStatic+0x54>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <xQueueGenericCreateStatic+0x6c>
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	e7fe      	b.n	80052c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <xQueueGenericCreateStatic+0x78>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueGenericCreateStatic+0x7c>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueGenericCreateStatic+0x7e>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <xQueueGenericCreateStatic+0x96>
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052f2:	2350      	movs	r3, #80	; 0x50
 80052f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b50      	cmp	r3, #80	; 0x50
 80052fa:	d009      	beq.n	8005310 <xQueueGenericCreateStatic+0xb4>
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	e7fe      	b.n	800530e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005310:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005324:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f805 	bl	8005342 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800533a:	4618      	mov	r0, r3
 800533c:	3730      	adds	r7, #48	; 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e002      	b.n	8005364 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005370:	2101      	movs	r1, #1
 8005372:	69b8      	ldr	r0, [r7, #24]
 8005374:	f7ff ff0a 	bl	800518c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <xQueueGenericSend+0x30>
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b6:	e7fe      	b.n	80053b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <xQueueGenericSend+0x3e>
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <xQueueGenericSend+0x42>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <xQueueGenericSend+0x44>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <xQueueGenericSend+0x5c>
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e7fe      	b.n	80053e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d103      	bne.n	80053f2 <xQueueGenericSend+0x6a>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <xQueueGenericSend+0x6e>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <xQueueGenericSend+0x70>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <xQueueGenericSend+0x88>
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	623b      	str	r3, [r7, #32]
 800540e:	e7fe      	b.n	800540e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005410:	f001 f998 	bl	8006744 <xTaskGetSchedulerState>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <xQueueGenericSend+0x98>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <xQueueGenericSend+0x9c>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <xQueueGenericSend+0x9e>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <xQueueGenericSend+0xb6>
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	e7fe      	b.n	800543c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800543e:	f001 fecd 	bl	80071dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <xQueueGenericSend+0xcc>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d129      	bne.n	80054a8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545a:	f000 f9ff 	bl	800585c <prvCopyDataToQueue>
 800545e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	3324      	adds	r3, #36	; 0x24
 800546c:	4618      	mov	r0, r3
 800546e:	f000 ffb3 	bl	80063d8 <xTaskRemoveFromEventList>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005478:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <xQueueGenericSend+0x1f0>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	e00a      	b.n	80054a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <xQueueGenericSend+0x1f0>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054a0:	f001 feca 	bl	8007238 <vPortExitCritical>
				return pdPASS;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e063      	b.n	8005570 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ae:	f001 fec3 	bl	8007238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e05c      	b.n	8005570 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 ffeb 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ca:	f001 feb5 	bl	8007238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ce:	f000 fd67 	bl	8005fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d2:	f001 fe83 	bl	80071dc <vPortEnterCritical>
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054dc:	b25b      	sxtb	r3, r3
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d103      	bne.n	80054ec <xQueueGenericSend+0x164>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d103      	bne.n	8005502 <xQueueGenericSend+0x17a>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005502:	f001 fe99 	bl	8007238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005506:	1d3a      	adds	r2, r7, #4
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ffda 	bl	80064c8 <xTaskCheckForTimeOut>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d124      	bne.n	8005564 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800551a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551c:	f000 fa96 	bl	8005a4c <prvIsQueueFull>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d018      	beq.n	8005558 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	3310      	adds	r3, #16
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ff04 	bl	800633c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005536:	f000 fa21 	bl	800597c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800553a:	f000 fd3f 	bl	8005fbc <xTaskResumeAll>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f af7c 	bne.w	800543e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <xQueueGenericSend+0x1f0>)
 8005548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	e772      	b.n	800543e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800555a:	f000 fa0f 	bl	800597c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800555e:	f000 fd2d 	bl	8005fbc <xTaskResumeAll>
 8005562:	e76c      	b.n	800543e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005566:	f000 fa09 	bl	800597c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800556a:	f000 fd27 	bl	8005fbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800556e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005570:	4618      	mov	r0, r3
 8005572:	3738      	adds	r7, #56	; 0x38
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	; 0x38
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2b00      	cmp	r3, #0
 8005592:	d109      	bne.n	80055a8 <xQueueGenericSendFromISR+0x2c>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
 80055a6:	e7fe      	b.n	80055a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <xQueueGenericSendFromISR+0x3a>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueGenericSendFromISR+0x3e>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericSendFromISR+0x40>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <xQueueGenericSendFromISR+0x58>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	e7fe      	b.n	80055d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d103      	bne.n	80055e2 <xQueueGenericSendFromISR+0x66>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <xQueueGenericSendFromISR+0x6a>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueGenericSendFromISR+0x6c>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <xQueueGenericSendFromISR+0x84>
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e7fe      	b.n	80055fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005600:	f001 fec8 	bl	8007394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005604:	f3ef 8211 	mrs	r2, BASEPRI
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61ba      	str	r2, [r7, #24]
 800561a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800561c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <xQueueGenericSendFromISR+0xb6>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d12c      	bne.n	800568c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005642:	f000 f90b 	bl	800585c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005646:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d112      	bne.n	8005676 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d016      	beq.n	8005686 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	4618      	mov	r0, r3
 800565e:	f000 febb 	bl	80063d8 <xTaskRemoveFromEventList>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00e      	beq.n	8005686 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e007      	b.n	8005686 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800567a:	3301      	adds	r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	b25a      	sxtb	r2, r3
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005686:	2301      	movs	r3, #1
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800568a:	e001      	b.n	8005690 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800568c:	2300      	movs	r3, #0
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800569c:	4618      	mov	r0, r3
 800569e:	3738      	adds	r7, #56	; 0x38
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <xQueueReceive+0x2e>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	e7fe      	b.n	80056d0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <xQueueReceive+0x3c>
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xQueueReceive+0x40>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <xQueueReceive+0x42>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <xQueueReceive+0x5a>
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e7fe      	b.n	80056fc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fe:	f001 f821 	bl	8006744 <xTaskGetSchedulerState>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <xQueueReceive+0x6a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueReceive+0x6e>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueReceive+0x70>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <xQueueReceive+0x88>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e7fe      	b.n	800572a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800572c:	f001 fd56 	bl	80071dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01f      	beq.n	800577c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005740:	f000 f8f6 	bl	8005930 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1e5a      	subs	r2, r3, #1
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00f      	beq.n	8005774 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	3310      	adds	r3, #16
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fe3d 	bl	80063d8 <xTaskRemoveFromEventList>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005764:	4b3c      	ldr	r3, [pc, #240]	; (8005858 <xQueueReceive+0x1b4>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005774:	f001 fd60 	bl	8007238 <vPortExitCritical>
				return pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	e069      	b.n	8005850 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005782:	f001 fd59 	bl	8007238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005786:	2300      	movs	r3, #0
 8005788:	e062      	b.n	8005850 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005790:	f107 0310 	add.w	r3, r7, #16
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fe81 	bl	800649c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800579a:	2301      	movs	r3, #1
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800579e:	f001 fd4b 	bl	8007238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a2:	f000 fbfd 	bl	8005fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057a6:	f001 fd19 	bl	80071dc <vPortEnterCritical>
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d103      	bne.n	80057c0 <xQueueReceive+0x11c>
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057c6:	b25b      	sxtb	r3, r3
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d103      	bne.n	80057d6 <xQueueReceive+0x132>
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d6:	f001 fd2f 	bl	8007238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057da:	1d3a      	adds	r2, r7, #4
 80057dc:	f107 0310 	add.w	r3, r7, #16
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fe70 	bl	80064c8 <xTaskCheckForTimeOut>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d123      	bne.n	8005836 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f0:	f000 f916 	bl	8005a20 <prvIsQueueEmpty>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fd9a 	bl	800633c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f000 f8b7 	bl	800597c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800580e:	f000 fbd5 	bl	8005fbc <xTaskResumeAll>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d189      	bne.n	800572c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <xQueueReceive+0x1b4>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	e780      	b.n	800572c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800582a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582c:	f000 f8a6 	bl	800597c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005830:	f000 fbc4 	bl	8005fbc <xTaskResumeAll>
 8005834:	e77a      	b.n	800572c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005838:	f000 f8a0 	bl	800597c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800583c:	f000 fbbe 	bl	8005fbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005842:	f000 f8ed 	bl	8005a20 <prvIsQueueEmpty>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	f43f af6f 	beq.w	800572c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800584e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005850:	4618      	mov	r0, r3
 8005852:	3730      	adds	r7, #48	; 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d14d      	bne.n	800591e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 ff7a 	bl	8006780 <xTaskPriorityDisinherit>
 800588c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	e043      	b.n	800591e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d119      	bne.n	80058d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6858      	ldr	r0, [r3, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	461a      	mov	r2, r3
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	f001 ffac 	bl	8007804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d32b      	bcc.n	800591e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]
 80058ce:	e026      	b.n	800591e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68d8      	ldr	r0, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	461a      	mov	r2, r3
 80058da:	68b9      	ldr	r1, [r7, #8]
 80058dc:	f001 ff92 	bl	8007804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	425b      	negs	r3, r3
 80058ea:	441a      	add	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d207      	bcs.n	800590c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	425b      	negs	r3, r3
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d105      	bne.n	800591e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	3b01      	subs	r3, #1
 800591c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005926:	697b      	ldr	r3, [r7, #20]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d018      	beq.n	8005974 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	441a      	add	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	429a      	cmp	r2, r3
 800595a:	d303      	bcc.n	8005964 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68d9      	ldr	r1, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	461a      	mov	r2, r3
 800596e:	6838      	ldr	r0, [r7, #0]
 8005970:	f001 ff48 	bl	8007804 <memcpy>
	}
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005984:	f001 fc2a 	bl	80071dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005990:	e011      	b.n	80059b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3324      	adds	r3, #36	; 0x24
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd1a 	bl	80063d8 <xTaskRemoveFromEventList>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059aa:	f000 fded 	bl	8006588 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	dce9      	bgt.n	8005992 <prvUnlockQueue+0x16>
 80059be:	e000      	b.n	80059c2 <prvUnlockQueue+0x46>
					break;
 80059c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	22ff      	movs	r2, #255	; 0xff
 80059c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80059ca:	f001 fc35 	bl	8007238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059ce:	f001 fc05 	bl	80071dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059da:	e011      	b.n	8005a00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d012      	beq.n	8005a0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3310      	adds	r3, #16
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fcf5 	bl	80063d8 <xTaskRemoveFromEventList>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059f4:	f000 fdc8 	bl	8006588 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dce9      	bgt.n	80059dc <prvUnlockQueue+0x60>
 8005a08:	e000      	b.n	8005a0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a14:	f001 fc10 	bl	8007238 <vPortExitCritical>
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a28:	f001 fbd8 	bl	80071dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e001      	b.n	8005a3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a3e:	f001 fbfb 	bl	8007238 <vPortExitCritical>

	return xReturn;
 8005a42:	68fb      	ldr	r3, [r7, #12]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a54:	f001 fbc2 	bl	80071dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d102      	bne.n	8005a6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e001      	b.n	8005a6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a6e:	f001 fbe3 	bl	8007238 <vPortExitCritical>

	return xReturn;
 8005a72:	68fb      	ldr	r3, [r7, #12]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e014      	b.n	8005ab6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a8c:	4a0e      	ldr	r2, [pc, #56]	; (8005ac8 <vQueueAddToRegistry+0x4c>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10b      	bne.n	8005ab0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a98:	490b      	ldr	r1, [pc, #44]	; (8005ac8 <vQueueAddToRegistry+0x4c>)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <vQueueAddToRegistry+0x4c>)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005aae:	e005      	b.n	8005abc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b07      	cmp	r3, #7
 8005aba:	d9e7      	bls.n	8005a8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	20001a48 	.word	0x20001a48

08005acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005adc:	f001 fb7e 	bl	80071dc <vPortEnterCritical>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ae6:	b25b      	sxtb	r3, r3
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d103      	bne.n	8005af6 <vQueueWaitForMessageRestricted+0x2a>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d103      	bne.n	8005b0c <vQueueWaitForMessageRestricted+0x40>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b0c:	f001 fb94 	bl	8007238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fc2f 	bl	8006384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7ff ff28 	bl	800597c <prvUnlockQueue>
	}
 8005b2c:	bf00      	nop
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af04      	add	r7, sp, #16
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <xTaskCreateStatic+0x28>
 8005b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	e7fe      	b.n	8005b5a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <xTaskCreateStatic+0x42>
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e7fe      	b.n	8005b74 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b76:	235c      	movs	r3, #92	; 0x5c
 8005b78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b7e:	d009      	beq.n	8005b94 <xTaskCreateStatic+0x60>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e7fe      	b.n	8005b92 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01e      	beq.n	8005bda <xTaskCreateStatic+0xa6>
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01b      	beq.n	8005bda <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9303      	str	r3, [sp, #12]
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	9302      	str	r3, [sp, #8]
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f850 	bl	8005c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bd4:	f000 f8dc 	bl	8005d90 <prvAddNewTaskToReadyList>
 8005bd8:	e001      	b.n	8005bde <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bde:	697b      	ldr	r3, [r7, #20]
	}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3728      	adds	r7, #40	; 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08c      	sub	sp, #48	; 0x30
 8005bec:	af04      	add	r7, sp, #16
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fc07 	bl	8007410 <pvPortMalloc>
 8005c02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c0a:	205c      	movs	r0, #92	; 0x5c
 8005c0c:	f001 fc00 	bl	8007410 <pvPortMalloc>
 8005c10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c1e:	e005      	b.n	8005c2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c20:	6978      	ldr	r0, [r7, #20]
 8005c22:	f001 fcb7 	bl	8007594 <vPortFree>
 8005c26:	e001      	b.n	8005c2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d017      	beq.n	8005c62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9303      	str	r3, [sp, #12]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	9302      	str	r3, [sp, #8]
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f80e 	bl	8005c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c56:	69f8      	ldr	r0, [r7, #28]
 8005c58:	f000 f89a 	bl	8005d90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e002      	b.n	8005c68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c62:	f04f 33ff 	mov.w	r3, #4294967295
 8005c66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c68:	69bb      	ldr	r3, [r7, #24]
	}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b088      	sub	sp, #32
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	607a      	str	r2, [r7, #4]
 8005c7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	21a5      	movs	r1, #165	; 0xa5
 8005c8c:	f001 fdc5 	bl	800781a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f023 0307 	bic.w	r3, r3, #7
 8005ca8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <prvInitialiseNewTask+0x56>
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	e7fe      	b.n	8005cc6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01f      	beq.n	8005d0e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e012      	b.n	8005cfa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	7819      	ldrb	r1, [r3, #0]
 8005cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3334      	adds	r3, #52	; 0x34
 8005ce4:	460a      	mov	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d006      	beq.n	8005d02 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2b0f      	cmp	r3, #15
 8005cfe:	d9e9      	bls.n	8005cd4 <prvInitialiseNewTask+0x62>
 8005d00:	e000      	b.n	8005d04 <prvInitialiseNewTask+0x92>
			{
				break;
 8005d02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d0c:	e003      	b.n	8005d16 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	2b37      	cmp	r3, #55	; 0x37
 8005d1a:	d901      	bls.n	8005d20 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d1c:	2337      	movs	r3, #55	; 0x37
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	3304      	adds	r3, #4
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff f994 	bl	8005064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	3318      	adds	r3, #24
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff f98f 	bl	8005064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	69b8      	ldr	r0, [r7, #24]
 8005d70:	f001 f90c 	bl	8006f8c <pxPortInitialiseStack>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bf00      	nop
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d98:	f001 fa20 	bl	80071dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <prvAddNewTaskToReadyList+0xc4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <prvAddNewTaskToReadyList+0xc4>)
 8005da4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005da6:	4b2c      	ldr	r3, [pc, #176]	; (8005e58 <prvAddNewTaskToReadyList+0xc8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <prvAddNewTaskToReadyList+0xc8>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005db4:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <prvAddNewTaskToReadyList+0xc4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d110      	bne.n	8005dde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dbc:	f000 fc08 	bl	80065d0 <prvInitialiseTaskLists>
 8005dc0:	e00d      	b.n	8005dde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <prvAddNewTaskToReadyList+0xcc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dca:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <prvAddNewTaskToReadyList+0xc8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d802      	bhi.n	8005dde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dd8:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <prvAddNewTaskToReadyList+0xc8>)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <prvAddNewTaskToReadyList+0xd0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <prvAddNewTaskToReadyList+0xd0>)
 8005de6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005de8:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <prvAddNewTaskToReadyList+0xd0>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <prvAddNewTaskToReadyList+0xd4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d903      	bls.n	8005e04 <prvAddNewTaskToReadyList+0x74>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a18      	ldr	r2, [pc, #96]	; (8005e64 <prvAddNewTaskToReadyList+0xd4>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <prvAddNewTaskToReadyList+0xd8>)
 8005e12:	441a      	add	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7ff f92f 	bl	800507e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e20:	f001 fa0a 	bl	8007238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e24:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <prvAddNewTaskToReadyList+0xcc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00e      	beq.n	8005e4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <prvAddNewTaskToReadyList+0xc8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d207      	bcs.n	8005e4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <prvAddNewTaskToReadyList+0xdc>)
 8005e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000bbc 	.word	0x20000bbc
 8005e58:	200006e8 	.word	0x200006e8
 8005e5c:	20000bc8 	.word	0x20000bc8
 8005e60:	20000bd8 	.word	0x20000bd8
 8005e64:	20000bc4 	.word	0x20000bc4
 8005e68:	200006ec 	.word	0x200006ec
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e82:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <vTaskDelay+0x60>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <vTaskDelay+0x2e>
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	e7fe      	b.n	8005e9c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005e9e:	f000 f87f 	bl	8005fa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fcd7 	bl	8006858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005eaa:	f000 f887 	bl	8005fbc <xTaskResumeAll>
 8005eae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d107      	bne.n	8005ec6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <vTaskDelay+0x64>)
 8005eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000be4 	.word	0x20000be4
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ee6:	463a      	mov	r2, r7
 8005ee8:	1d39      	adds	r1, r7, #4
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff f864 	bl	8004fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	9202      	str	r2, [sp, #8]
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	2300      	movs	r3, #0
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	2300      	movs	r3, #0
 8005f04:	460a      	mov	r2, r1
 8005f06:	4920      	ldr	r1, [pc, #128]	; (8005f88 <vTaskStartScheduler+0xb0>)
 8005f08:	4820      	ldr	r0, [pc, #128]	; (8005f8c <vTaskStartScheduler+0xb4>)
 8005f0a:	f7ff fe13 	bl	8005b34 <xTaskCreateStatic>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	4b1f      	ldr	r3, [pc, #124]	; (8005f90 <vTaskStartScheduler+0xb8>)
 8005f12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f14:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <vTaskStartScheduler+0xb8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e001      	b.n	8005f26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d102      	bne.n	8005f32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f2c:	f000 fce8 	bl	8006900 <xTimerCreateTimerTask>
 8005f30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d115      	bne.n	8005f64 <vTaskStartScheduler+0x8c>
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <vTaskStartScheduler+0xbc>)
 8005f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <vTaskStartScheduler+0xc0>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f58:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <vTaskStartScheduler+0xc4>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f5e:	f001 f89f 	bl	80070a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f62:	e00d      	b.n	8005f80 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d109      	bne.n	8005f80 <vTaskStartScheduler+0xa8>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e7fe      	b.n	8005f7e <vTaskStartScheduler+0xa6>
}
 8005f80:	bf00      	nop
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	080078c8 	.word	0x080078c8
 8005f8c:	080065a1 	.word	0x080065a1
 8005f90:	20000be0 	.word	0x20000be0
 8005f94:	20000bdc 	.word	0x20000bdc
 8005f98:	20000bc8 	.word	0x20000bc8
 8005f9c:	20000bc0 	.word	0x20000bc0

08005fa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <vTaskSuspendAll+0x18>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	4a03      	ldr	r2, [pc, #12]	; (8005fb8 <vTaskSuspendAll+0x18>)
 8005fac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	20000be4 	.word	0x20000be4

08005fbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fca:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <xTaskResumeAll+0x114>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <xTaskResumeAll+0x2a>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	e7fe      	b.n	8005fe4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fe6:	f001 f8f9 	bl	80071dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fea:	4b39      	ldr	r3, [pc, #228]	; (80060d0 <xTaskResumeAll+0x114>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <xTaskResumeAll+0x114>)
 8005ff2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff4:	4b36      	ldr	r3, [pc, #216]	; (80060d0 <xTaskResumeAll+0x114>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d162      	bne.n	80060c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ffc:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <xTaskResumeAll+0x118>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d05e      	beq.n	80060c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006004:	e02f      	b.n	8006066 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <xTaskResumeAll+0x11c>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3318      	adds	r3, #24
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f890 	bl	8005138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f88b 	bl	8005138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <xTaskResumeAll+0x120>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <xTaskResumeAll+0x7a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <xTaskResumeAll+0x120>)
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <xTaskResumeAll+0x124>)
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3304      	adds	r3, #4
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f7ff f816 	bl	800507e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	4b23      	ldr	r3, [pc, #140]	; (80060e4 <xTaskResumeAll+0x128>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d302      	bcc.n	8006066 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006060:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <xTaskResumeAll+0x12c>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006066:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <xTaskResumeAll+0x11c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1cb      	bne.n	8006006 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006074:	f000 fb46 	bl	8006704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006078:	4b1c      	ldr	r3, [pc, #112]	; (80060ec <xTaskResumeAll+0x130>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d010      	beq.n	80060a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006084:	f000 f846 	bl	8006114 <xTaskIncrementTick>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800608e:	4b16      	ldr	r3, [pc, #88]	; (80060e8 <xTaskResumeAll+0x12c>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f1      	bne.n	8006084 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <xTaskResumeAll+0x130>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060a6:	4b10      	ldr	r3, [pc, #64]	; (80060e8 <xTaskResumeAll+0x12c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060b2:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <xTaskResumeAll+0x134>)
 80060b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 f8b9 	bl	8007238 <vPortExitCritical>

	return xAlreadyYielded;
 80060c6:	68bb      	ldr	r3, [r7, #8]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000be4 	.word	0x20000be4
 80060d4:	20000bbc 	.word	0x20000bbc
 80060d8:	20000b7c 	.word	0x20000b7c
 80060dc:	20000bc4 	.word	0x20000bc4
 80060e0:	200006ec 	.word	0x200006ec
 80060e4:	200006e8 	.word	0x200006e8
 80060e8:	20000bd0 	.word	0x20000bd0
 80060ec:	20000bcc 	.word	0x20000bcc
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <xTaskGetTickCount+0x1c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006100:	687b      	ldr	r3, [r7, #4]
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	20000bc0 	.word	0x20000bc0

08006114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800611e:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <xTaskIncrementTick+0x144>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 8088 	bne.w	8006238 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006128:	4b4c      	ldr	r3, [pc, #304]	; (800625c <xTaskIncrementTick+0x148>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006130:	4a4a      	ldr	r2, [pc, #296]	; (800625c <xTaskIncrementTick+0x148>)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11f      	bne.n	800617c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800613c:	4b48      	ldr	r3, [pc, #288]	; (8006260 <xTaskIncrementTick+0x14c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <xTaskIncrementTick+0x46>
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	e7fe      	b.n	8006158 <xTaskIncrementTick+0x44>
 800615a:	4b41      	ldr	r3, [pc, #260]	; (8006260 <xTaskIncrementTick+0x14c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	4b40      	ldr	r3, [pc, #256]	; (8006264 <xTaskIncrementTick+0x150>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a3e      	ldr	r2, [pc, #248]	; (8006260 <xTaskIncrementTick+0x14c>)
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4a3e      	ldr	r2, [pc, #248]	; (8006264 <xTaskIncrementTick+0x150>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <xTaskIncrementTick+0x154>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3301      	adds	r3, #1
 8006174:	4a3c      	ldr	r2, [pc, #240]	; (8006268 <xTaskIncrementTick+0x154>)
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	f000 fac4 	bl	8006704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800617c:	4b3b      	ldr	r3, [pc, #236]	; (800626c <xTaskIncrementTick+0x158>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d349      	bcc.n	800621a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <xTaskIncrementTick+0x14c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006190:	4b36      	ldr	r3, [pc, #216]	; (800626c <xTaskIncrementTick+0x158>)
 8006192:	f04f 32ff 	mov.w	r2, #4294967295
 8006196:	601a      	str	r2, [r3, #0]
					break;
 8006198:	e03f      	b.n	800621a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <xTaskIncrementTick+0x14c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d203      	bcs.n	80061ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061b2:	4a2e      	ldr	r2, [pc, #184]	; (800626c <xTaskIncrementTick+0x158>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061b8:	e02f      	b.n	800621a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3304      	adds	r3, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe ffba 	bl	8005138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	3318      	adds	r3, #24
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe ffb1 	bl	8005138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	4b25      	ldr	r3, [pc, #148]	; (8006270 <xTaskIncrementTick+0x15c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d903      	bls.n	80061ea <xTaskIncrementTick+0xd6>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <xTaskIncrementTick+0x15c>)
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <xTaskIncrementTick+0x160>)
 80061f8:	441a      	add	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7fe ff3c 	bl	800507e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <xTaskIncrementTick+0x164>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	429a      	cmp	r2, r3
 8006212:	d3b8      	bcc.n	8006186 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006218:	e7b5      	b.n	8006186 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <xTaskIncrementTick+0x164>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	4914      	ldr	r1, [pc, #80]	; (8006274 <xTaskIncrementTick+0x160>)
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d907      	bls.n	8006242 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e004      	b.n	8006242 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006238:	4b10      	ldr	r3, [pc, #64]	; (800627c <xTaskIncrementTick+0x168>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	4a0f      	ldr	r2, [pc, #60]	; (800627c <xTaskIncrementTick+0x168>)
 8006240:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <xTaskIncrementTick+0x16c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800624e:	697b      	ldr	r3, [r7, #20]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000be4 	.word	0x20000be4
 800625c:	20000bc0 	.word	0x20000bc0
 8006260:	20000b74 	.word	0x20000b74
 8006264:	20000b78 	.word	0x20000b78
 8006268:	20000bd4 	.word	0x20000bd4
 800626c:	20000bdc 	.word	0x20000bdc
 8006270:	20000bc4 	.word	0x20000bc4
 8006274:	200006ec 	.word	0x200006ec
 8006278:	200006e8 	.word	0x200006e8
 800627c:	20000bcc 	.word	0x20000bcc
 8006280:	20000bd0 	.word	0x20000bd0

08006284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <vTaskSwitchContext+0xa4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <vTaskSwitchContext+0xa8>)
 8006294:	2201      	movs	r2, #1
 8006296:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006298:	e040      	b.n	800631c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <vTaskSwitchContext+0xa8>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a0:	4b23      	ldr	r3, [pc, #140]	; (8006330 <vTaskSwitchContext+0xac>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e00f      	b.n	80062c8 <vTaskSwitchContext+0x44>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <vTaskSwitchContext+0x3e>
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e7fe      	b.n	80062c0 <vTaskSwitchContext+0x3c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	491a      	ldr	r1, [pc, #104]	; (8006334 <vTaskSwitchContext+0xb0>)
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0e5      	beq.n	80062a8 <vTaskSwitchContext+0x24>
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <vTaskSwitchContext+0xb0>)
 80062e8:	4413      	add	r3, r2
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	3308      	adds	r3, #8
 80062fe:	429a      	cmp	r2, r3
 8006300:	d104      	bne.n	800630c <vTaskSwitchContext+0x88>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	605a      	str	r2, [r3, #4]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <vTaskSwitchContext+0xb4>)
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4a06      	ldr	r2, [pc, #24]	; (8006330 <vTaskSwitchContext+0xac>)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6013      	str	r3, [r2, #0]
}
 800631c:	bf00      	nop
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	20000be4 	.word	0x20000be4
 800632c:	20000bd0 	.word	0x20000bd0
 8006330:	20000bc4 	.word	0x20000bc4
 8006334:	200006ec 	.word	0x200006ec
 8006338:	200006e8 	.word	0x200006e8

0800633c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <vTaskPlaceOnEventList+0x24>
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e7fe      	b.n	800635e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <vTaskPlaceOnEventList+0x44>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3318      	adds	r3, #24
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7fe feac 	bl	80050c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800636e:	2101      	movs	r1, #1
 8006370:	6838      	ldr	r0, [r7, #0]
 8006372:	f000 fa71 	bl	8006858 <prvAddCurrentTaskToDelayedList>
}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	200006e8 	.word	0x200006e8

08006384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <vTaskPlaceOnEventListRestricted+0x26>
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e7fe      	b.n	80063a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <vTaskPlaceOnEventListRestricted+0x50>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3318      	adds	r3, #24
 80063b0:	4619      	mov	r1, r3
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7fe fe63 	bl	800507e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80063be:	f04f 33ff 	mov.w	r3, #4294967295
 80063c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	f000 fa46 	bl	8006858 <prvAddCurrentTaskToDelayedList>
	}
 80063cc:	bf00      	nop
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200006e8 	.word	0x200006e8

080063d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <xTaskRemoveFromEventList+0x2a>
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e7fe      	b.n	8006400 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3318      	adds	r3, #24
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fe96 	bl	8005138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640c:	4b1d      	ldr	r3, [pc, #116]	; (8006484 <xTaskRemoveFromEventList+0xac>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11d      	bne.n	8006450 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3304      	adds	r3, #4
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fe8d 	bl	8005138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	4b19      	ldr	r3, [pc, #100]	; (8006488 <xTaskRemoveFromEventList+0xb0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d903      	bls.n	8006432 <xTaskRemoveFromEventList+0x5a>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <xTaskRemoveFromEventList+0xb0>)
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <xTaskRemoveFromEventList+0xb4>)
 8006440:	441a      	add	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe fe18 	bl	800507e <vListInsertEnd>
 800644e:	e005      	b.n	800645c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3318      	adds	r3, #24
 8006454:	4619      	mov	r1, r3
 8006456:	480e      	ldr	r0, [pc, #56]	; (8006490 <xTaskRemoveFromEventList+0xb8>)
 8006458:	f7fe fe11 	bl	800507e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <xTaskRemoveFromEventList+0xbc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	429a      	cmp	r2, r3
 8006468:	d905      	bls.n	8006476 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800646a:	2301      	movs	r3, #1
 800646c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <xTaskRemoveFromEventList+0xc0>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	e001      	b.n	800647a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800647a:	697b      	ldr	r3, [r7, #20]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000be4 	.word	0x20000be4
 8006488:	20000bc4 	.word	0x20000bc4
 800648c:	200006ec 	.word	0x200006ec
 8006490:	20000b7c 	.word	0x20000b7c
 8006494:	200006e8 	.word	0x200006e8
 8006498:	20000bd0 	.word	0x20000bd0

0800649c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <vTaskInternalSetTimeOutState+0x24>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <vTaskInternalSetTimeOutState+0x28>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	605a      	str	r2, [r3, #4]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20000bd4 	.word	0x20000bd4
 80064c4:	20000bc0 	.word	0x20000bc0

080064c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <xTaskCheckForTimeOut+0x24>
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e7fe      	b.n	80064ea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <xTaskCheckForTimeOut+0x3e>
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e7fe      	b.n	8006504 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006506:	f000 fe69 	bl	80071dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <xTaskCheckForTimeOut+0xb8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006522:	d102      	bne.n	800652a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e023      	b.n	8006572 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <xTaskCheckForTimeOut+0xbc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d007      	beq.n	8006546 <xTaskCheckForTimeOut+0x7e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	429a      	cmp	r2, r3
 800653e:	d302      	bcc.n	8006546 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	e015      	b.n	8006572 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	429a      	cmp	r2, r3
 800654e:	d20b      	bcs.n	8006568 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1ad2      	subs	r2, r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff ff9d 	bl	800649c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e004      	b.n	8006572 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800656e:	2301      	movs	r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006572:	f000 fe61 	bl	8007238 <vPortExitCritical>

	return xReturn;
 8006576:	69fb      	ldr	r3, [r7, #28]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000bc0 	.word	0x20000bc0
 8006584:	20000bd4 	.word	0x20000bd4

08006588 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800658c:	4b03      	ldr	r3, [pc, #12]	; (800659c <vTaskMissedYield+0x14>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20000bd0 	.word	0x20000bd0

080065a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065a8:	f000 f852 	bl	8006650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <prvIdleTask+0x28>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d9f9      	bls.n	80065a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <prvIdleTask+0x2c>)
 80065b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065c4:	e7f0      	b.n	80065a8 <prvIdleTask+0x8>
 80065c6:	bf00      	nop
 80065c8:	200006ec 	.word	0x200006ec
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	e00c      	b.n	80065f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4a12      	ldr	r2, [pc, #72]	; (8006630 <prvInitialiseTaskLists+0x60>)
 80065e8:	4413      	add	r3, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fd1a 	bl	8005024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3301      	adds	r3, #1
 80065f4:	607b      	str	r3, [r7, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b37      	cmp	r3, #55	; 0x37
 80065fa:	d9ef      	bls.n	80065dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065fc:	480d      	ldr	r0, [pc, #52]	; (8006634 <prvInitialiseTaskLists+0x64>)
 80065fe:	f7fe fd11 	bl	8005024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006602:	480d      	ldr	r0, [pc, #52]	; (8006638 <prvInitialiseTaskLists+0x68>)
 8006604:	f7fe fd0e 	bl	8005024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006608:	480c      	ldr	r0, [pc, #48]	; (800663c <prvInitialiseTaskLists+0x6c>)
 800660a:	f7fe fd0b 	bl	8005024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800660e:	480c      	ldr	r0, [pc, #48]	; (8006640 <prvInitialiseTaskLists+0x70>)
 8006610:	f7fe fd08 	bl	8005024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006614:	480b      	ldr	r0, [pc, #44]	; (8006644 <prvInitialiseTaskLists+0x74>)
 8006616:	f7fe fd05 	bl	8005024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <prvInitialiseTaskLists+0x78>)
 800661c:	4a05      	ldr	r2, [pc, #20]	; (8006634 <prvInitialiseTaskLists+0x64>)
 800661e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <prvInitialiseTaskLists+0x7c>)
 8006622:	4a05      	ldr	r2, [pc, #20]	; (8006638 <prvInitialiseTaskLists+0x68>)
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200006ec 	.word	0x200006ec
 8006634:	20000b4c 	.word	0x20000b4c
 8006638:	20000b60 	.word	0x20000b60
 800663c:	20000b7c 	.word	0x20000b7c
 8006640:	20000b90 	.word	0x20000b90
 8006644:	20000ba8 	.word	0x20000ba8
 8006648:	20000b74 	.word	0x20000b74
 800664c:	20000b78 	.word	0x20000b78

08006650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006656:	e019      	b.n	800668c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006658:	f000 fdc0 	bl	80071dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <prvCheckTasksWaitingTermination+0x4c>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fd65 	bl	8005138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <prvCheckTasksWaitingTermination+0x50>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3b01      	subs	r3, #1
 8006674:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <prvCheckTasksWaitingTermination+0x50>)
 8006676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 8006680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006682:	f000 fdd9 	bl	8007238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f80e 	bl	80066a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e1      	bne.n	8006658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000b90 	.word	0x20000b90
 80066a0:	20000bbc 	.word	0x20000bbc
 80066a4:	20000ba4 	.word	0x20000ba4

080066a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d108      	bne.n	80066cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 ff68 	bl	8007594 <vPortFree>
				vPortFree( pxTCB );
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 ff65 	bl	8007594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066ca:	e017      	b.n	80066fc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d103      	bne.n	80066de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 ff5c 	bl	8007594 <vPortFree>
	}
 80066dc:	e00e      	b.n	80066fc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d009      	beq.n	80066fc <prvDeleteTCB+0x54>
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e7fe      	b.n	80066fa <prvDeleteTCB+0x52>
	}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <prvResetNextTaskUnblockTime+0x38>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvResetNextTaskUnblockTime+0x3c>)
 8006716:	f04f 32ff 	mov.w	r2, #4294967295
 800671a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800671c:	e008      	b.n	8006730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvResetNextTaskUnblockTime+0x38>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <prvResetNextTaskUnblockTime+0x3c>)
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	20000b74 	.word	0x20000b74
 8006740:	20000bdc 	.word	0x20000bdc

08006744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <xTaskGetSchedulerState+0x34>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006752:	2301      	movs	r3, #1
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	e008      	b.n	800676a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006758:	4b08      	ldr	r3, [pc, #32]	; (800677c <xTaskGetSchedulerState+0x38>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006760:	2302      	movs	r3, #2
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e001      	b.n	800676a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800676a:	687b      	ldr	r3, [r7, #4]
	}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	20000bc8 	.word	0x20000bc8
 800677c:	20000be4 	.word	0x20000be4

08006780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d054      	beq.n	8006840 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006796:	4b2d      	ldr	r3, [pc, #180]	; (800684c <xTaskPriorityDisinherit+0xcc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	429a      	cmp	r2, r3
 800679e:	d009      	beq.n	80067b4 <xTaskPriorityDisinherit+0x34>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e7fe      	b.n	80067b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <xTaskPriorityDisinherit+0x50>
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	e7fe      	b.n	80067ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d4:	1e5a      	subs	r2, r3, #1
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d02c      	beq.n	8006840 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d128      	bne.n	8006840 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fca0 	bl	8005138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <xTaskPriorityDisinherit+0xd0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d903      	bls.n	8006820 <xTaskPriorityDisinherit+0xa0>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	4a0c      	ldr	r2, [pc, #48]	; (8006850 <xTaskPriorityDisinherit+0xd0>)
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4a09      	ldr	r2, [pc, #36]	; (8006854 <xTaskPriorityDisinherit+0xd4>)
 800682e:	441a      	add	r2, r3
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f7fe fc21 	bl	800507e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006840:	697b      	ldr	r3, [r7, #20]
	}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	200006e8 	.word	0x200006e8
 8006850:	20000bc4 	.word	0x20000bc4
 8006854:	200006ec 	.word	0x200006ec

08006858 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006862:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006868:	4b20      	ldr	r3, [pc, #128]	; (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fc62 	bl	8005138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d10a      	bne.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006882:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4819      	ldr	r0, [pc, #100]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800688c:	f7fe fbf7 	bl	800507e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006890:	e026      	b.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d209      	bcs.n	80068be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe fc05 	bl	80050c6 <vListInsert>
}
 80068bc:	e010      	b.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068be:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7fe fbfb 	bl	80050c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d202      	bcs.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068da:	4a08      	ldr	r2, [pc, #32]	; (80068fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000bc0 	.word	0x20000bc0
 80068ec:	200006e8 	.word	0x200006e8
 80068f0:	20000ba8 	.word	0x20000ba8
 80068f4:	20000b78 	.word	0x20000b78
 80068f8:	20000b74 	.word	0x20000b74
 80068fc:	20000bdc 	.word	0x20000bdc

08006900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800690a:	f000 faff 	bl	8006f0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800690e:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <xTimerCreateTimerTask+0x80>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d021      	beq.n	800695a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800691e:	1d3a      	adds	r2, r7, #4
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	f107 030c 	add.w	r3, r7, #12
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe fb61 	bl	8004ff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	9202      	str	r2, [sp, #8]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	2302      	movs	r3, #2
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	460a      	mov	r2, r1
 8006940:	4910      	ldr	r1, [pc, #64]	; (8006984 <xTimerCreateTimerTask+0x84>)
 8006942:	4811      	ldr	r0, [pc, #68]	; (8006988 <xTimerCreateTimerTask+0x88>)
 8006944:	f7ff f8f6 	bl	8005b34 <xTaskCreateStatic>
 8006948:	4602      	mov	r2, r0
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <xTimerCreateTimerTask+0x8c>)
 800694c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <xTimerCreateTimerTask+0x8c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006956:	2301      	movs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <xTimerCreateTimerTask+0x74>
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	e7fe      	b.n	8006972 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006974:	697b      	ldr	r3, [r7, #20]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000c18 	.word	0x20000c18
 8006984:	080078d0 	.word	0x080078d0
 8006988:	08006ac1 	.word	0x08006ac1
 800698c:	20000c1c 	.word	0x20000c1c

08006990 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d109      	bne.n	80069bc <xTimerGenericCommand+0x2c>
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	e7fe      	b.n	80069ba <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <xTimerGenericCommand+0x94>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d02a      	beq.n	8006a1a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	dc18      	bgt.n	8006a08 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069d6:	f7ff feb5 	bl	8006744 <xTaskGetSchedulerState>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d109      	bne.n	80069f4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <xTimerGenericCommand+0x94>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	f107 0110 	add.w	r1, r7, #16
 80069e8:	2300      	movs	r3, #0
 80069ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ec:	f7fe fccc 	bl	8005388 <xQueueGenericSend>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24
 80069f2:	e012      	b.n	8006a1a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <xTimerGenericCommand+0x94>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f107 0110 	add.w	r1, r7, #16
 80069fc:	2300      	movs	r3, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	f7fe fcc2 	bl	8005388 <xQueueGenericSend>
 8006a04:	6278      	str	r0, [r7, #36]	; 0x24
 8006a06:	e008      	b.n	8006a1a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <xTimerGenericCommand+0x94>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	f107 0110 	add.w	r1, r7, #16
 8006a10:	2300      	movs	r3, #0
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	f7fe fdb2 	bl	800557c <xQueueGenericSendFromISR>
 8006a18:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3728      	adds	r7, #40	; 0x28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000c18 	.word	0x20000c18

08006a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a32:	4b22      	ldr	r3, [pc, #136]	; (8006abc <prvProcessExpiredTimer+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fb79 	bl	8005138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d021      	beq.n	8006a98 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	18d1      	adds	r1, r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f000 f8d1 	bl	8006c08 <prvInsertTimerInActiveList>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01e      	beq.n	8006aaa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2300      	movs	r3, #0
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f7ff ff8a 	bl	8006990 <xTimerGenericCommand>
 8006a7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d112      	bne.n	8006aaa <prvProcessExpiredTimer+0x82>
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e7fe      	b.n	8006a96 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	4798      	blx	r3
}
 8006ab2:	bf00      	nop
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000c10 	.word	0x20000c10

08006ac0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ac8:	f107 0308 	add.w	r3, r7, #8
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 f857 	bl	8006b80 <prvGetNextExpireTime>
 8006ad2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f803 	bl	8006ae4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ade:	f000 f8d5 	bl	8006c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ae2:	e7f1      	b.n	8006ac8 <prvTimerTask+0x8>

08006ae4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006aee:	f7ff fa57 	bl	8005fa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006af2:	f107 0308 	add.w	r3, r7, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f866 	bl	8006bc8 <prvSampleTimeNow>
 8006afc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d130      	bne.n	8006b66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <prvProcessTimerOrBlockTask+0x3c>
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d806      	bhi.n	8006b20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b12:	f7ff fa53 	bl	8005fbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff85 	bl	8006a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b1e:	e024      	b.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <prvProcessTimerOrBlockTask+0x90>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <prvProcessTimerOrBlockTask+0x50>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <prvProcessTimerOrBlockTask+0x52>
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <prvProcessTimerOrBlockTask+0x94>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7fe ffc1 	bl	8005acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b4a:	f7ff fa37 	bl	8005fbc <xTaskResumeAll>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <prvProcessTimerOrBlockTask+0x98>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
}
 8006b64:	e001      	b.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b66:	f7ff fa29 	bl	8005fbc <xTaskResumeAll>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000c14 	.word	0x20000c14
 8006b78:	20000c18 	.word	0x20000c18
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b88:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <prvGetNextExpireTime+0x44>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <prvGetNextExpireTime+0x16>
 8006b92:	2201      	movs	r2, #1
 8006b94:	e000      	b.n	8006b98 <prvGetNextExpireTime+0x18>
 8006b96:	2200      	movs	r2, #0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <prvGetNextExpireTime+0x44>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e001      	b.n	8006bb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000c10 	.word	0x20000c10

08006bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bd0:	f7ff fa90 	bl	80060f4 <xTaskGetTickCount>
 8006bd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <prvSampleTimeNow+0x3c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d205      	bcs.n	8006bec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006be0:	f000 f930 	bl	8006e44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bf2:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <prvSampleTimeNow+0x3c>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000c20 	.word	0x20000c20

08006c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d812      	bhi.n	8006c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad2      	subs	r2, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e01b      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <prvInsertTimerInActiveList+0x7c>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe fa3a 	bl	80050c6 <vListInsert>
 8006c52:	e012      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d206      	bcs.n	8006c6a <prvInsertTimerInActiveList+0x62>
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e007      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <prvInsertTimerInActiveList+0x80>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fe fa26 	bl	80050c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c7a:	697b      	ldr	r3, [r7, #20]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000c14 	.word	0x20000c14
 8006c88:	20000c10 	.word	0x20000c10

08006c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08e      	sub	sp, #56	; 0x38
 8006c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c92:	e0c6      	b.n	8006e22 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da17      	bge.n	8006cca <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <prvProcessReceivedCommands+0x2e>
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e7fe      	b.n	8006cb8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc0:	6850      	ldr	r0, [r2, #4]
 8006cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc4:	6892      	ldr	r2, [r2, #8]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f2c0 80a7 	blt.w	8006e20 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fa28 	bl	8005138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ce8:	463b      	mov	r3, r7
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff ff6c 	bl	8006bc8 <prvSampleTimeNow>
 8006cf0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b09      	cmp	r3, #9
 8006cf6:	f200 8094 	bhi.w	8006e22 <prvProcessReceivedCommands+0x196>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <prvProcessReceivedCommands+0x74>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d29 	.word	0x08006d29
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d29 	.word	0x08006d29
 8006d0c:	08006d9b 	.word	0x08006d9b
 8006d10:	08006daf 	.word	0x08006daf
 8006d14:	08006df7 	.word	0x08006df7
 8006d18:	08006d29 	.word	0x08006d29
 8006d1c:	08006d29 	.word	0x08006d29
 8006d20:	08006d9b 	.word	0x08006d9b
 8006d24:	08006daf 	.word	0x08006daf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	18d1      	adds	r1, r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d48:	f7ff ff5e 	bl	8006c08 <prvInsertTimerInActiveList>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d067      	beq.n	8006e22 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d05c      	beq.n	8006e22 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	441a      	add	r2, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	2100      	movs	r1, #0
 8006d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7a:	f7ff fe09 	bl	8006990 <xTimerGenericCommand>
 8006d7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d14d      	bne.n	8006e22 <prvProcessReceivedCommands+0x196>
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e7fe      	b.n	8006d98 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006dac:	e039      	b.n	8006e22 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d109      	bne.n	8006de2 <prvProcessReceivedCommands+0x156>
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e7fe      	b.n	8006de0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	18d1      	adds	r1, r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df0:	f7ff ff0a 	bl	8006c08 <prvInsertTimerInActiveList>
					break;
 8006df4:	e015      	b.n	8006e22 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e06:	f000 fbc5 	bl	8007594 <vPortFree>
 8006e0a:	e00a      	b.n	8006e22 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e1e:	e000      	b.n	8006e22 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <prvProcessReceivedCommands+0x1b4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	1d39      	adds	r1, r7, #4
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fc3a 	bl	80056a4 <xQueueReceive>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f47f af2e 	bne.w	8006c94 <prvProcessReceivedCommands+0x8>
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3730      	adds	r7, #48	; 0x30
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000c18 	.word	0x20000c18

08006e44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e4a:	e047      	b.n	8006edc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e4c:	4b2d      	ldr	r3, [pc, #180]	; (8006f04 <prvSwitchTimerLists+0xc0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e56:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <prvSwitchTimerLists+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe f967 	bl	8005138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d02d      	beq.n	8006edc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4413      	add	r3, r2
 8006e88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d90e      	bls.n	8006eb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e9e:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <prvSwitchTimerLists+0xc0>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fe f90c 	bl	80050c6 <vListInsert>
 8006eae:	e015      	b.n	8006edc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff fd68 	bl	8006990 <xTimerGenericCommand>
 8006ec0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d109      	bne.n	8006edc <prvSwitchTimerLists+0x98>
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	e7fe      	b.n	8006eda <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <prvSwitchTimerLists+0xc0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1b2      	bne.n	8006e4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <prvSwitchTimerLists+0xc0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a04      	ldr	r2, [pc, #16]	; (8006f04 <prvSwitchTimerLists+0xc0>)
 8006ef2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvSwitchTimerLists+0xc4>)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6013      	str	r3, [r2, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000c10 	.word	0x20000c10
 8006f08:	20000c14 	.word	0x20000c14

08006f0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f12:	f000 f963 	bl	80071dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f16:	4b15      	ldr	r3, [pc, #84]	; (8006f6c <prvCheckForValidListAndQueue+0x60>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d120      	bne.n	8006f60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f1e:	4814      	ldr	r0, [pc, #80]	; (8006f70 <prvCheckForValidListAndQueue+0x64>)
 8006f20:	f7fe f880 	bl	8005024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f24:	4813      	ldr	r0, [pc, #76]	; (8006f74 <prvCheckForValidListAndQueue+0x68>)
 8006f26:	f7fe f87d 	bl	8005024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <prvCheckForValidListAndQueue+0x6c>)
 8006f2c:	4a10      	ldr	r2, [pc, #64]	; (8006f70 <prvCheckForValidListAndQueue+0x64>)
 8006f2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f30:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <prvCheckForValidListAndQueue+0x70>)
 8006f32:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <prvCheckForValidListAndQueue+0x68>)
 8006f34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f36:	2300      	movs	r3, #0
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <prvCheckForValidListAndQueue+0x74>)
 8006f3c:	4a11      	ldr	r2, [pc, #68]	; (8006f84 <prvCheckForValidListAndQueue+0x78>)
 8006f3e:	2110      	movs	r1, #16
 8006f40:	200a      	movs	r0, #10
 8006f42:	f7fe f98b 	bl	800525c <xQueueGenericCreateStatic>
 8006f46:	4602      	mov	r2, r0
 8006f48:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <prvCheckForValidListAndQueue+0x60>)
 8006f4a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f4c:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <prvCheckForValidListAndQueue+0x60>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <prvCheckForValidListAndQueue+0x60>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	490b      	ldr	r1, [pc, #44]	; (8006f88 <prvCheckForValidListAndQueue+0x7c>)
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fd8e 	bl	8005a7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f60:	f000 f96a 	bl	8007238 <vPortExitCritical>
}
 8006f64:	bf00      	nop
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000c18 	.word	0x20000c18
 8006f70:	20000be8 	.word	0x20000be8
 8006f74:	20000bfc 	.word	0x20000bfc
 8006f78:	20000c10 	.word	0x20000c10
 8006f7c:	20000c14 	.word	0x20000c14
 8006f80:	20000cc4 	.word	0x20000cc4
 8006f84:	20000c24 	.word	0x20000c24
 8006f88:	080078d8 	.word	0x080078d8

08006f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3b04      	subs	r3, #4
 8006f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f023 0201 	bic.w	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fbc:	4a0c      	ldr	r2, [pc, #48]	; (8006ff0 <pxPortInitialiseStack+0x64>)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3b14      	subs	r3, #20
 8006fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f06f 0202 	mvn.w	r2, #2
 8006fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3b20      	subs	r3, #32
 8006fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	08006ff5 	.word	0x08006ff5

08006ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ffe:	4b11      	ldr	r3, [pc, #68]	; (8007044 <prvTaskExitError+0x50>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d009      	beq.n	800701c <prvTaskExitError+0x28>
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	e7fe      	b.n	800701a <prvTaskExitError+0x26>
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800702e:	bf00      	nop
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0fc      	beq.n	8007030 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	2000000c 	.word	0x2000000c
	...

08007050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <pxCurrentTCBConst2>)
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	6808      	ldr	r0, [r1, #0]
 8007056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	f380 8809 	msr	PSP, r0
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	4770      	bx	lr
 800706c:	f3af 8000 	nop.w

08007070 <pxCurrentTCBConst2>:
 8007070:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007078:	4808      	ldr	r0, [pc, #32]	; (800709c <prvPortStartFirstTask+0x24>)
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f380 8808 	msr	MSP, r0
 8007082:	f04f 0000 	mov.w	r0, #0
 8007086:	f380 8814 	msr	CONTROL, r0
 800708a:	b662      	cpsie	i
 800708c:	b661      	cpsie	f
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	df00      	svc	0
 8007098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800709a:	bf00      	nop
 800709c:	e000ed08 	.word	0xe000ed08

080070a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070a6:	4b44      	ldr	r3, [pc, #272]	; (80071b8 <xPortStartScheduler+0x118>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a44      	ldr	r2, [pc, #272]	; (80071bc <xPortStartScheduler+0x11c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d109      	bne.n	80070c4 <xPortStartScheduler+0x24>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	e7fe      	b.n	80070c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070c4:	4b3c      	ldr	r3, [pc, #240]	; (80071b8 <xPortStartScheduler+0x118>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a3d      	ldr	r2, [pc, #244]	; (80071c0 <xPortStartScheduler+0x120>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d109      	bne.n	80070e2 <xPortStartScheduler+0x42>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e7fe      	b.n	80070e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <xPortStartScheduler+0x124>)
 80070e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007104:	b2da      	uxtb	r2, r3
 8007106:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <xPortStartScheduler+0x128>)
 8007108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800710a:	4b30      	ldr	r3, [pc, #192]	; (80071cc <xPortStartScheduler+0x12c>)
 800710c:	2207      	movs	r2, #7
 800710e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007110:	e009      	b.n	8007126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007112:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <xPortStartScheduler+0x12c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3b01      	subs	r3, #1
 8007118:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <xPortStartScheduler+0x12c>)
 800711a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b80      	cmp	r3, #128	; 0x80
 8007130:	d0ef      	beq.n	8007112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007132:	4b26      	ldr	r3, [pc, #152]	; (80071cc <xPortStartScheduler+0x12c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1c3 0307 	rsb	r3, r3, #7
 800713a:	2b04      	cmp	r3, #4
 800713c:	d009      	beq.n	8007152 <xPortStartScheduler+0xb2>
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	e7fe      	b.n	8007150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007152:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <xPortStartScheduler+0x12c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <xPortStartScheduler+0x12c>)
 800715a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <xPortStartScheduler+0x12c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007164:	4a19      	ldr	r2, [pc, #100]	; (80071cc <xPortStartScheduler+0x12c>)
 8007166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <xPortStartScheduler+0x130>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a16      	ldr	r2, [pc, #88]	; (80071d0 <xPortStartScheduler+0x130>)
 8007176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800717a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800717c:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <xPortStartScheduler+0x130>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a13      	ldr	r2, [pc, #76]	; (80071d0 <xPortStartScheduler+0x130>)
 8007182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007188:	f000 f8d6 	bl	8007338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <xPortStartScheduler+0x134>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007192:	f000 f8f5 	bl	8007380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <xPortStartScheduler+0x138>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a0f      	ldr	r2, [pc, #60]	; (80071d8 <xPortStartScheduler+0x138>)
 800719c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071a2:	f7ff ff69 	bl	8007078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071a6:	f7ff f86d 	bl	8006284 <vTaskSwitchContext>
	prvTaskExitError();
 80071aa:	f7ff ff23 	bl	8006ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	e000ed00 	.word	0xe000ed00
 80071bc:	410fc271 	.word	0x410fc271
 80071c0:	410fc270 	.word	0x410fc270
 80071c4:	e000e400 	.word	0xe000e400
 80071c8:	20000d14 	.word	0x20000d14
 80071cc:	20000d18 	.word	0x20000d18
 80071d0:	e000ed20 	.word	0xe000ed20
 80071d4:	2000000c 	.word	0x2000000c
 80071d8:	e000ef34 	.word	0xe000ef34

080071dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <vPortEnterCritical+0x54>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3301      	adds	r3, #1
 80071fa:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <vPortEnterCritical+0x54>)
 80071fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <vPortEnterCritical+0x54>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10e      	bne.n	8007224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <vPortEnterCritical+0x58>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <vPortEnterCritical+0x48>
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	e7fe      	b.n	8007222 <vPortEnterCritical+0x46>
	}
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	2000000c 	.word	0x2000000c
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <vPortExitCritical+0x4c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <vPortExitCritical+0x22>
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	e7fe      	b.n	8007258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <vPortExitCritical+0x4c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a08      	ldr	r2, [pc, #32]	; (8007284 <vPortExitCritical+0x4c>)
 8007262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007264:	4b07      	ldr	r3, [pc, #28]	; (8007284 <vPortExitCritical+0x4c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <vPortExitCritical+0x3e>
 800726c:	2300      	movs	r3, #0
 800726e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	2000000c 	.word	0x2000000c
	...

08007290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007290:	f3ef 8009 	mrs	r0, PSP
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <pxCurrentTCBConst>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	f01e 0f10 	tst.w	lr, #16
 80072a0:	bf08      	it	eq
 80072a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	6010      	str	r0, [r2, #0]
 80072ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072b4:	f380 8811 	msr	BASEPRI, r0
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f7fe ffe0 	bl	8006284 <vTaskSwitchContext>
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	f380 8811 	msr	BASEPRI, r0
 80072cc:	bc09      	pop	{r0, r3}
 80072ce:	6819      	ldr	r1, [r3, #0]
 80072d0:	6808      	ldr	r0, [r1, #0]
 80072d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d6:	f01e 0f10 	tst.w	lr, #16
 80072da:	bf08      	it	eq
 80072dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072e0:	f380 8809 	msr	PSP, r0
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w

080072f0 <pxCurrentTCBConst>:
 80072f0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop

080072f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007310:	f7fe ff00 	bl	8006114 <xTaskIncrementTick>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <SysTick_Handler+0x3c>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <vPortSetupTimerInterrupt+0x34>)
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <vPortSetupTimerInterrupt+0x38>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <vPortSetupTimerInterrupt+0x3c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <vPortSetupTimerInterrupt+0x40>)
 800734e:	fba2 2303 	umull	r2, r3, r2, r3
 8007352:	099b      	lsrs	r3, r3, #6
 8007354:	4a09      	ldr	r2, [pc, #36]	; (800737c <vPortSetupTimerInterrupt+0x44>)
 8007356:	3b01      	subs	r3, #1
 8007358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800735a:	4b04      	ldr	r3, [pc, #16]	; (800736c <vPortSetupTimerInterrupt+0x34>)
 800735c:	2207      	movs	r2, #7
 800735e:	601a      	str	r2, [r3, #0]
}
 8007360:	bf00      	nop
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	e000e010 	.word	0xe000e010
 8007370:	e000e018 	.word	0xe000e018
 8007374:	20000000 	.word	0x20000000
 8007378:	10624dd3 	.word	0x10624dd3
 800737c:	e000e014 	.word	0xe000e014

08007380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007390 <vPortEnableVFP+0x10>
 8007384:	6801      	ldr	r1, [r0, #0]
 8007386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800738a:	6001      	str	r1, [r0, #0]
 800738c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800738e:	bf00      	nop
 8007390:	e000ed88 	.word	0xe000ed88

08007394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800739a:	f3ef 8305 	mrs	r3, IPSR
 800739e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d913      	bls.n	80073ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073a6:	4a16      	ldr	r2, [pc, #88]	; (8007400 <vPortValidateInterruptPriority+0x6c>)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4413      	add	r3, r2
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073b0:	4b14      	ldr	r3, [pc, #80]	; (8007404 <vPortValidateInterruptPriority+0x70>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	7afa      	ldrb	r2, [r7, #11]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d209      	bcs.n	80073ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
 80073cc:	e7fe      	b.n	80073cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <vPortValidateInterruptPriority+0x74>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073d6:	4b0d      	ldr	r3, [pc, #52]	; (800740c <vPortValidateInterruptPriority+0x78>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d909      	bls.n	80073f2 <vPortValidateInterruptPriority+0x5e>
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	e7fe      	b.n	80073f0 <vPortValidateInterruptPriority+0x5c>
	}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	e000e3f0 	.word	0xe000e3f0
 8007404:	20000d14 	.word	0x20000d14
 8007408:	e000ed0c 	.word	0xe000ed0c
 800740c:	20000d18 	.word	0x20000d18

08007410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800741c:	f7fe fdc0 	bl	8005fa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007420:	4b57      	ldr	r3, [pc, #348]	; (8007580 <pvPortMalloc+0x170>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007428:	f000 f90c 	bl	8007644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800742c:	4b55      	ldr	r3, [pc, #340]	; (8007584 <pvPortMalloc+0x174>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 808c 	bne.w	8007552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01c      	beq.n	800747a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007440:	2208      	movs	r2, #8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b00      	cmp	r3, #0
 8007450:	d013      	beq.n	800747a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	3308      	adds	r3, #8
 800745a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <pvPortMalloc+0x6a>
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	e7fe      	b.n	8007478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d068      	beq.n	8007552 <pvPortMalloc+0x142>
 8007480:	4b41      	ldr	r3, [pc, #260]	; (8007588 <pvPortMalloc+0x178>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d863      	bhi.n	8007552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800748a:	4b40      	ldr	r3, [pc, #256]	; (800758c <pvPortMalloc+0x17c>)
 800748c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800748e:	4b3f      	ldr	r3, [pc, #252]	; (800758c <pvPortMalloc+0x17c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007494:	e004      	b.n	80074a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <pvPortMalloc+0xa2>
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f1      	bne.n	8007496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074b2:	4b33      	ldr	r3, [pc, #204]	; (8007580 <pvPortMalloc+0x170>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d04a      	beq.n	8007552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2208      	movs	r2, #8
 80074c2:	4413      	add	r3, r2
 80074c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	1ad2      	subs	r2, r2, r3
 80074d6:	2308      	movs	r3, #8
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	429a      	cmp	r2, r3
 80074dc:	d91e      	bls.n	800751c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4413      	add	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <pvPortMalloc+0xf4>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	e7fe      	b.n	8007502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f8f6 	bl	8007708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <pvPortMalloc+0x178>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <pvPortMalloc+0x178>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <pvPortMalloc+0x178>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <pvPortMalloc+0x180>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <pvPortMalloc+0x178>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <pvPortMalloc+0x180>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <pvPortMalloc+0x174>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007552:	f7fe fd33 	bl	8005fbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <pvPortMalloc+0x164>
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e7fe      	b.n	8007572 <pvPortMalloc+0x162>
	return pvReturn;
 8007574:	69fb      	ldr	r3, [r7, #28]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3728      	adds	r7, #40	; 0x28
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200018dc 	.word	0x200018dc
 8007584:	200018e8 	.word	0x200018e8
 8007588:	200018e0 	.word	0x200018e0
 800758c:	200018d4 	.word	0x200018d4
 8007590:	200018e4 	.word	0x200018e4

08007594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d046      	beq.n	8007634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075a6:	2308      	movs	r3, #8
 80075a8:	425b      	negs	r3, r3
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	4b20      	ldr	r3, [pc, #128]	; (800763c <vPortFree+0xa8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <vPortFree+0x42>
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e7fe      	b.n	80075d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <vPortFree+0x5e>
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	60bb      	str	r3, [r7, #8]
 80075f0:	e7fe      	b.n	80075f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	4b11      	ldr	r3, [pc, #68]	; (800763c <vPortFree+0xa8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d019      	beq.n	8007634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d115      	bne.n	8007634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <vPortFree+0xa8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	43db      	mvns	r3, r3
 8007612:	401a      	ands	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007618:	f7fe fcc2 	bl	8005fa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <vPortFree+0xac>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4413      	add	r3, r2
 8007626:	4a06      	ldr	r2, [pc, #24]	; (8007640 <vPortFree+0xac>)
 8007628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800762a:	6938      	ldr	r0, [r7, #16]
 800762c:	f000 f86c 	bl	8007708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007630:	f7fe fcc4 	bl	8005fbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007634:	bf00      	nop
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	200018e8 	.word	0x200018e8
 8007640:	200018e0 	.word	0x200018e0

08007644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800764a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800764e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007650:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <prvHeapInit+0xac>)
 8007652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3307      	adds	r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0307 	bic.w	r3, r3, #7
 800766a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <prvHeapInit+0xac>)
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <prvHeapInit+0xb0>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <prvHeapInit+0xb0>)
 8007684:	2200      	movs	r2, #0
 8007686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007690:	2208      	movs	r2, #8
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1a9b      	subs	r3, r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0307 	bic.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <prvHeapInit+0xb4>)
 80076a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvHeapInit+0xb4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <prvHeapInit+0xb4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c4:	4b0c      	ldr	r3, [pc, #48]	; (80076f8 <prvHeapInit+0xb4>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <prvHeapInit+0xb8>)
 80076d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	4a09      	ldr	r2, [pc, #36]	; (8007700 <prvHeapInit+0xbc>)
 80076da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <prvHeapInit+0xc0>)
 80076de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20000d1c 	.word	0x20000d1c
 80076f4:	200018d4 	.word	0x200018d4
 80076f8:	200018dc 	.word	0x200018dc
 80076fc:	200018e4 	.word	0x200018e4
 8007700:	200018e0 	.word	0x200018e0
 8007704:	200018e8 	.word	0x200018e8

08007708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007710:	4b28      	ldr	r3, [pc, #160]	; (80077b4 <prvInsertBlockIntoFreeList+0xac>)
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e002      	b.n	800771c <prvInsertBlockIntoFreeList+0x14>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d8f7      	bhi.n	8007716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4413      	add	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	429a      	cmp	r2, r3
 8007736:	d108      	bne.n	800774a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d118      	bne.n	8007790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d00d      	beq.n	8007786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	441a      	add	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	e008      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e003      	b.n	8007798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	429a      	cmp	r2, r3
 800779e:	d002      	beq.n	80077a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	200018d4 	.word	0x200018d4
 80077b8:	200018dc 	.word	0x200018dc

080077bc <__libc_init_array>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4e0d      	ldr	r6, [pc, #52]	; (80077f4 <__libc_init_array+0x38>)
 80077c0:	4c0d      	ldr	r4, [pc, #52]	; (80077f8 <__libc_init_array+0x3c>)
 80077c2:	1ba4      	subs	r4, r4, r6
 80077c4:	10a4      	asrs	r4, r4, #2
 80077c6:	2500      	movs	r5, #0
 80077c8:	42a5      	cmp	r5, r4
 80077ca:	d109      	bne.n	80077e0 <__libc_init_array+0x24>
 80077cc:	4e0b      	ldr	r6, [pc, #44]	; (80077fc <__libc_init_array+0x40>)
 80077ce:	4c0c      	ldr	r4, [pc, #48]	; (8007800 <__libc_init_array+0x44>)
 80077d0:	f000 f82c 	bl	800782c <_init>
 80077d4:	1ba4      	subs	r4, r4, r6
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	2500      	movs	r5, #0
 80077da:	42a5      	cmp	r5, r4
 80077dc:	d105      	bne.n	80077ea <__libc_init_array+0x2e>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077e4:	4798      	blx	r3
 80077e6:	3501      	adds	r5, #1
 80077e8:	e7ee      	b.n	80077c8 <__libc_init_array+0xc>
 80077ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077ee:	4798      	blx	r3
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7f2      	b.n	80077da <__libc_init_array+0x1e>
 80077f4:	08007978 	.word	0x08007978
 80077f8:	08007978 	.word	0x08007978
 80077fc:	08007978 	.word	0x08007978
 8007800:	0800797c 	.word	0x0800797c

08007804 <memcpy>:
 8007804:	b510      	push	{r4, lr}
 8007806:	1e43      	subs	r3, r0, #1
 8007808:	440a      	add	r2, r1
 800780a:	4291      	cmp	r1, r2
 800780c:	d100      	bne.n	8007810 <memcpy+0xc>
 800780e:	bd10      	pop	{r4, pc}
 8007810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007818:	e7f7      	b.n	800780a <memcpy+0x6>

0800781a <memset>:
 800781a:	4402      	add	r2, r0
 800781c:	4603      	mov	r3, r0
 800781e:	4293      	cmp	r3, r2
 8007820:	d100      	bne.n	8007824 <memset+0xa>
 8007822:	4770      	bx	lr
 8007824:	f803 1b01 	strb.w	r1, [r3], #1
 8007828:	e7f9      	b.n	800781e <memset+0x4>
	...

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr
